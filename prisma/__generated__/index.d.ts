
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Follower
 * 
 */
export type Follower = $Result.DefaultSelection<Prisma.$FollowerPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model UserSubscription
 * 
 */
export type UserSubscription = $Result.DefaultSelection<Prisma.$UserSubscriptionPayload>
/**
 * Model Moderator
 * 
 */
export type Moderator = $Result.DefaultSelection<Prisma.$ModeratorPayload>
/**
 * Model DescriptionPart
 * 
 */
export type DescriptionPart = $Result.DefaultSelection<Prisma.$DescriptionPartPayload>
/**
 * Model Ban
 * 
 */
export type Ban = $Result.DefaultSelection<Prisma.$BanPayload>
/**
 * Model StreamerCurrency
 * 
 */
export type StreamerCurrency = $Result.DefaultSelection<Prisma.$StreamerCurrencyPayload>
/**
 * Model CurrencyBalance
 * 
 */
export type CurrencyBalance = $Result.DefaultSelection<Prisma.$CurrencyBalancePayload>
/**
 * Model UserReward
 * 
 */
export type UserReward = $Result.DefaultSelection<Prisma.$UserRewardPayload>
/**
 * Model BuyerReward
 * 
 */
export type BuyerReward = $Result.DefaultSelection<Prisma.$BuyerRewardPayload>
/**
 * Model Stream
 * 
 */
export type Stream = $Result.DefaultSelection<Prisma.$StreamPayload>
/**
 * Model StreamStats
 * 
 */
export type StreamStats = $Result.DefaultSelection<Prisma.$StreamStatsPayload>
/**
 * Model Emote
 * 
 */
export type Emote = $Result.DefaultSelection<Prisma.$EmotePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Chat
 * 
 */
export type Chat = $Result.DefaultSelection<Prisma.$ChatPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuthMethod: {
  CREDENTIALS: 'CREDENTIALS',
  GOOGLE: 'GOOGLE',
  YANDEX: 'YANDEX',
  GITHUB: 'GITHUB'
};

export type AuthMethod = (typeof AuthMethod)[keyof typeof AuthMethod]


export const banAction: {
  MUTE: 'MUTE',
  BAN: 'BAN'
};

export type banAction = (typeof banAction)[keyof typeof banAction]


export const TokenType: {
  VERIFICATION: 'VERIFICATION',
  TWO_FACTOR: 'TWO_FACTOR',
  PASSWORD_RESET: 'PASSWORD_RESET',
  TWO_FACTOR_RESET: 'TWO_FACTOR_RESET',
  EMAIL_CHANGE: 'EMAIL_CHANGE'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]

}

export type AuthMethod = $Enums.AuthMethod

export const AuthMethod: typeof $Enums.AuthMethod

export type banAction = $Enums.banAction

export const banAction: typeof $Enums.banAction

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.follower`: Exposes CRUD operations for the **Follower** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followers
    * const followers = await prisma.follower.findMany()
    * ```
    */
  get follower(): Prisma.FollowerDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.userSubscription`: Exposes CRUD operations for the **UserSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSubscriptions
    * const userSubscriptions = await prisma.userSubscription.findMany()
    * ```
    */
  get userSubscription(): Prisma.UserSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.moderator`: Exposes CRUD operations for the **Moderator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Moderators
    * const moderators = await prisma.moderator.findMany()
    * ```
    */
  get moderator(): Prisma.ModeratorDelegate<ExtArgs>;

  /**
   * `prisma.descriptionPart`: Exposes CRUD operations for the **DescriptionPart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DescriptionParts
    * const descriptionParts = await prisma.descriptionPart.findMany()
    * ```
    */
  get descriptionPart(): Prisma.DescriptionPartDelegate<ExtArgs>;

  /**
   * `prisma.ban`: Exposes CRUD operations for the **Ban** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bans
    * const bans = await prisma.ban.findMany()
    * ```
    */
  get ban(): Prisma.BanDelegate<ExtArgs>;

  /**
   * `prisma.streamerCurrency`: Exposes CRUD operations for the **StreamerCurrency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StreamerCurrencies
    * const streamerCurrencies = await prisma.streamerCurrency.findMany()
    * ```
    */
  get streamerCurrency(): Prisma.StreamerCurrencyDelegate<ExtArgs>;

  /**
   * `prisma.currencyBalance`: Exposes CRUD operations for the **CurrencyBalance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CurrencyBalances
    * const currencyBalances = await prisma.currencyBalance.findMany()
    * ```
    */
  get currencyBalance(): Prisma.CurrencyBalanceDelegate<ExtArgs>;

  /**
   * `prisma.userReward`: Exposes CRUD operations for the **UserReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRewards
    * const userRewards = await prisma.userReward.findMany()
    * ```
    */
  get userReward(): Prisma.UserRewardDelegate<ExtArgs>;

  /**
   * `prisma.buyerReward`: Exposes CRUD operations for the **BuyerReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuyerRewards
    * const buyerRewards = await prisma.buyerReward.findMany()
    * ```
    */
  get buyerReward(): Prisma.BuyerRewardDelegate<ExtArgs>;

  /**
   * `prisma.stream`: Exposes CRUD operations for the **Stream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Streams
    * const streams = await prisma.stream.findMany()
    * ```
    */
  get stream(): Prisma.StreamDelegate<ExtArgs>;

  /**
   * `prisma.streamStats`: Exposes CRUD operations for the **StreamStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StreamStats
    * const streamStats = await prisma.streamStats.findMany()
    * ```
    */
  get streamStats(): Prisma.StreamStatsDelegate<ExtArgs>;

  /**
   * `prisma.emote`: Exposes CRUD operations for the **Emote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emotes
    * const emotes = await prisma.emote.findMany()
    * ```
    */
  get emote(): Prisma.EmoteDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Follower: 'Follower',
    Subscription: 'Subscription',
    UserSubscription: 'UserSubscription',
    Moderator: 'Moderator',
    DescriptionPart: 'DescriptionPart',
    Ban: 'Ban',
    StreamerCurrency: 'StreamerCurrency',
    CurrencyBalance: 'CurrencyBalance',
    UserReward: 'UserReward',
    BuyerReward: 'BuyerReward',
    Stream: 'Stream',
    StreamStats: 'StreamStats',
    Emote: 'Emote',
    Category: 'Category',
    Chat: 'Chat',
    Message: 'Message',
    Notification: 'Notification',
    Account: 'Account',
    Token: 'Token'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "follower" | "subscription" | "userSubscription" | "moderator" | "descriptionPart" | "ban" | "streamerCurrency" | "currencyBalance" | "userReward" | "buyerReward" | "stream" | "streamStats" | "emote" | "category" | "chat" | "message" | "notification" | "account" | "token"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Follower: {
        payload: Prisma.$FollowerPayload<ExtArgs>
        fields: Prisma.FollowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          findFirst: {
            args: Prisma.FollowerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          findMany: {
            args: Prisma.FollowerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>[]
          }
          create: {
            args: Prisma.FollowerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          createMany: {
            args: Prisma.FollowerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>[]
          }
          delete: {
            args: Prisma.FollowerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          update: {
            args: Prisma.FollowerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          deleteMany: {
            args: Prisma.FollowerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FollowerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowerPayload>
          }
          aggregate: {
            args: Prisma.FollowerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollower>
          }
          groupBy: {
            args: Prisma.FollowerGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowerCountArgs<ExtArgs>
            result: $Utils.Optional<FollowerCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      UserSubscription: {
        payload: Prisma.$UserSubscriptionPayload<ExtArgs>
        fields: Prisma.UserSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.UserSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          findMany: {
            args: Prisma.UserSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>[]
          }
          create: {
            args: Prisma.UserSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          createMany: {
            args: Prisma.UserSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.UserSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          update: {
            args: Prisma.UserSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.UserSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.UserSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSubscription>
          }
          groupBy: {
            args: Prisma.UserSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Moderator: {
        payload: Prisma.$ModeratorPayload<ExtArgs>
        fields: Prisma.ModeratorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModeratorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeratorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          findFirst: {
            args: Prisma.ModeratorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeratorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          findMany: {
            args: Prisma.ModeratorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>[]
          }
          create: {
            args: Prisma.ModeratorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          createMany: {
            args: Prisma.ModeratorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModeratorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>[]
          }
          delete: {
            args: Prisma.ModeratorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          update: {
            args: Prisma.ModeratorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          deleteMany: {
            args: Prisma.ModeratorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModeratorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModeratorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModeratorPayload>
          }
          aggregate: {
            args: Prisma.ModeratorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModerator>
          }
          groupBy: {
            args: Prisma.ModeratorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModeratorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeratorCountArgs<ExtArgs>
            result: $Utils.Optional<ModeratorCountAggregateOutputType> | number
          }
        }
      }
      DescriptionPart: {
        payload: Prisma.$DescriptionPartPayload<ExtArgs>
        fields: Prisma.DescriptionPartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DescriptionPartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DescriptionPartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          findFirst: {
            args: Prisma.DescriptionPartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DescriptionPartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          findMany: {
            args: Prisma.DescriptionPartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>[]
          }
          create: {
            args: Prisma.DescriptionPartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          createMany: {
            args: Prisma.DescriptionPartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DescriptionPartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>[]
          }
          delete: {
            args: Prisma.DescriptionPartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          update: {
            args: Prisma.DescriptionPartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          deleteMany: {
            args: Prisma.DescriptionPartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DescriptionPartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DescriptionPartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DescriptionPartPayload>
          }
          aggregate: {
            args: Prisma.DescriptionPartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDescriptionPart>
          }
          groupBy: {
            args: Prisma.DescriptionPartGroupByArgs<ExtArgs>
            result: $Utils.Optional<DescriptionPartGroupByOutputType>[]
          }
          count: {
            args: Prisma.DescriptionPartCountArgs<ExtArgs>
            result: $Utils.Optional<DescriptionPartCountAggregateOutputType> | number
          }
        }
      }
      Ban: {
        payload: Prisma.$BanPayload<ExtArgs>
        fields: Prisma.BanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          findFirst: {
            args: Prisma.BanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          findMany: {
            args: Prisma.BanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>[]
          }
          create: {
            args: Prisma.BanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          createMany: {
            args: Prisma.BanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>[]
          }
          delete: {
            args: Prisma.BanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          update: {
            args: Prisma.BanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          deleteMany: {
            args: Prisma.BanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanPayload>
          }
          aggregate: {
            args: Prisma.BanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBan>
          }
          groupBy: {
            args: Prisma.BanGroupByArgs<ExtArgs>
            result: $Utils.Optional<BanGroupByOutputType>[]
          }
          count: {
            args: Prisma.BanCountArgs<ExtArgs>
            result: $Utils.Optional<BanCountAggregateOutputType> | number
          }
        }
      }
      StreamerCurrency: {
        payload: Prisma.$StreamerCurrencyPayload<ExtArgs>
        fields: Prisma.StreamerCurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StreamerCurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StreamerCurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          findFirst: {
            args: Prisma.StreamerCurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StreamerCurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          findMany: {
            args: Prisma.StreamerCurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>[]
          }
          create: {
            args: Prisma.StreamerCurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          createMany: {
            args: Prisma.StreamerCurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StreamerCurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>[]
          }
          delete: {
            args: Prisma.StreamerCurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          update: {
            args: Prisma.StreamerCurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          deleteMany: {
            args: Prisma.StreamerCurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StreamerCurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StreamerCurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamerCurrencyPayload>
          }
          aggregate: {
            args: Prisma.StreamerCurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStreamerCurrency>
          }
          groupBy: {
            args: Prisma.StreamerCurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<StreamerCurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StreamerCurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<StreamerCurrencyCountAggregateOutputType> | number
          }
        }
      }
      CurrencyBalance: {
        payload: Prisma.$CurrencyBalancePayload<ExtArgs>
        fields: Prisma.CurrencyBalanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrencyBalanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrencyBalanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          findFirst: {
            args: Prisma.CurrencyBalanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrencyBalanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          findMany: {
            args: Prisma.CurrencyBalanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>[]
          }
          create: {
            args: Prisma.CurrencyBalanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          createMany: {
            args: Prisma.CurrencyBalanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrencyBalanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>[]
          }
          delete: {
            args: Prisma.CurrencyBalanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          update: {
            args: Prisma.CurrencyBalanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          deleteMany: {
            args: Prisma.CurrencyBalanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrencyBalanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CurrencyBalanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrencyBalancePayload>
          }
          aggregate: {
            args: Prisma.CurrencyBalanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrencyBalance>
          }
          groupBy: {
            args: Prisma.CurrencyBalanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrencyBalanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrencyBalanceCountArgs<ExtArgs>
            result: $Utils.Optional<CurrencyBalanceCountAggregateOutputType> | number
          }
        }
      }
      UserReward: {
        payload: Prisma.$UserRewardPayload<ExtArgs>
        fields: Prisma.UserRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findFirst: {
            args: Prisma.UserRewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findMany: {
            args: Prisma.UserRewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          create: {
            args: Prisma.UserRewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          createMany: {
            args: Prisma.UserRewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          delete: {
            args: Prisma.UserRewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          update: {
            args: Prisma.UserRewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          deleteMany: {
            args: Prisma.UserRewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          aggregate: {
            args: Prisma.UserRewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserReward>
          }
          groupBy: {
            args: Prisma.UserRewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRewardCountArgs<ExtArgs>
            result: $Utils.Optional<UserRewardCountAggregateOutputType> | number
          }
        }
      }
      BuyerReward: {
        payload: Prisma.$BuyerRewardPayload<ExtArgs>
        fields: Prisma.BuyerRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerRewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerRewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          findFirst: {
            args: Prisma.BuyerRewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerRewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          findMany: {
            args: Prisma.BuyerRewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>[]
          }
          create: {
            args: Prisma.BuyerRewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          createMany: {
            args: Prisma.BuyerRewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuyerRewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>[]
          }
          delete: {
            args: Prisma.BuyerRewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          update: {
            args: Prisma.BuyerRewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          deleteMany: {
            args: Prisma.BuyerRewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerRewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuyerRewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerRewardPayload>
          }
          aggregate: {
            args: Prisma.BuyerRewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyerReward>
          }
          groupBy: {
            args: Prisma.BuyerRewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerRewardCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerRewardCountAggregateOutputType> | number
          }
        }
      }
      Stream: {
        payload: Prisma.$StreamPayload<ExtArgs>
        fields: Prisma.StreamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StreamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StreamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          findFirst: {
            args: Prisma.StreamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StreamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          findMany: {
            args: Prisma.StreamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>[]
          }
          create: {
            args: Prisma.StreamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          createMany: {
            args: Prisma.StreamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StreamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>[]
          }
          delete: {
            args: Prisma.StreamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          update: {
            args: Prisma.StreamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          deleteMany: {
            args: Prisma.StreamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StreamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StreamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamPayload>
          }
          aggregate: {
            args: Prisma.StreamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStream>
          }
          groupBy: {
            args: Prisma.StreamGroupByArgs<ExtArgs>
            result: $Utils.Optional<StreamGroupByOutputType>[]
          }
          count: {
            args: Prisma.StreamCountArgs<ExtArgs>
            result: $Utils.Optional<StreamCountAggregateOutputType> | number
          }
        }
      }
      StreamStats: {
        payload: Prisma.$StreamStatsPayload<ExtArgs>
        fields: Prisma.StreamStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StreamStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StreamStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          findFirst: {
            args: Prisma.StreamStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StreamStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          findMany: {
            args: Prisma.StreamStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>[]
          }
          create: {
            args: Prisma.StreamStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          createMany: {
            args: Prisma.StreamStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StreamStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>[]
          }
          delete: {
            args: Prisma.StreamStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          update: {
            args: Prisma.StreamStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          deleteMany: {
            args: Prisma.StreamStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StreamStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StreamStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StreamStatsPayload>
          }
          aggregate: {
            args: Prisma.StreamStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStreamStats>
          }
          groupBy: {
            args: Prisma.StreamStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StreamStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StreamStatsCountArgs<ExtArgs>
            result: $Utils.Optional<StreamStatsCountAggregateOutputType> | number
          }
        }
      }
      Emote: {
        payload: Prisma.$EmotePayload<ExtArgs>
        fields: Prisma.EmoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          findFirst: {
            args: Prisma.EmoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          findMany: {
            args: Prisma.EmoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>[]
          }
          create: {
            args: Prisma.EmoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          createMany: {
            args: Prisma.EmoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>[]
          }
          delete: {
            args: Prisma.EmoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          update: {
            args: Prisma.EmoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          deleteMany: {
            args: Prisma.EmoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotePayload>
          }
          aggregate: {
            args: Prisma.EmoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmote>
          }
          groupBy: {
            args: Prisma.EmoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmoteCountArgs<ExtArgs>
            result: $Utils.Optional<EmoteCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: Prisma.$ChatPayload<ExtArgs>
        fields: Prisma.ChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    descriptionParts: number
    following: number
    followers: number
    bans: number
    issuedBans: number
    userModerators: number
    appointedModerators: number
    streamerCurrency: number
    currencyBalance: number
    userRewards: number
    boughtRewards: number
    subscriptions: number
    subscribers: number
    Emote: number
    StreamStats: number
    chat: number
    Message: number
    receivedNotification: number
    sentNotifications: number
    account: number
    UserSubscription: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    descriptionParts?: boolean | UserCountOutputTypeCountDescriptionPartsArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    bans?: boolean | UserCountOutputTypeCountBansArgs
    issuedBans?: boolean | UserCountOutputTypeCountIssuedBansArgs
    userModerators?: boolean | UserCountOutputTypeCountUserModeratorsArgs
    appointedModerators?: boolean | UserCountOutputTypeCountAppointedModeratorsArgs
    streamerCurrency?: boolean | UserCountOutputTypeCountStreamerCurrencyArgs
    currencyBalance?: boolean | UserCountOutputTypeCountCurrencyBalanceArgs
    userRewards?: boolean | UserCountOutputTypeCountUserRewardsArgs
    boughtRewards?: boolean | UserCountOutputTypeCountBoughtRewardsArgs
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    subscribers?: boolean | UserCountOutputTypeCountSubscribersArgs
    Emote?: boolean | UserCountOutputTypeCountEmoteArgs
    StreamStats?: boolean | UserCountOutputTypeCountStreamStatsArgs
    chat?: boolean | UserCountOutputTypeCountChatArgs
    Message?: boolean | UserCountOutputTypeCountMessageArgs
    receivedNotification?: boolean | UserCountOutputTypeCountReceivedNotificationArgs
    sentNotifications?: boolean | UserCountOutputTypeCountSentNotificationsArgs
    account?: boolean | UserCountOutputTypeCountAccountArgs
    UserSubscription?: boolean | UserCountOutputTypeCountUserSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDescriptionPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DescriptionPartWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountIssuedBansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeratorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointedModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeratorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStreamerCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamerCurrencyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCurrencyBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyBalanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoughtRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerRewardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscribersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStreamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamStatsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSubscriptionWhereInput
  }


  /**
   * Count Type ModeratorCountOutputType
   */

  export type ModeratorCountOutputType = {
    issuedBans: number
  }

  export type ModeratorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issuedBans?: boolean | ModeratorCountOutputTypeCountIssuedBansArgs
  }

  // Custom InputTypes
  /**
   * ModeratorCountOutputType without action
   */
  export type ModeratorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeratorCountOutputType
     */
    select?: ModeratorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModeratorCountOutputType without action
   */
  export type ModeratorCountOutputTypeCountIssuedBansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanWhereInput
  }


  /**
   * Count Type StreamerCurrencyCountOutputType
   */

  export type StreamerCurrencyCountOutputType = {
    currencyBalances: number
  }

  export type StreamerCurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currencyBalances?: boolean | StreamerCurrencyCountOutputTypeCountCurrencyBalancesArgs
  }

  // Custom InputTypes
  /**
   * StreamerCurrencyCountOutputType without action
   */
  export type StreamerCurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrencyCountOutputType
     */
    select?: StreamerCurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StreamerCurrencyCountOutputType without action
   */
  export type StreamerCurrencyCountOutputTypeCountCurrencyBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyBalanceWhereInput
  }


  /**
   * Count Type UserRewardCountOutputType
   */

  export type UserRewardCountOutputType = {
    BuyerRewards: number
  }

  export type UserRewardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BuyerRewards?: boolean | UserRewardCountOutputTypeCountBuyerRewardsArgs
  }

  // Custom InputTypes
  /**
   * UserRewardCountOutputType without action
   */
  export type UserRewardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRewardCountOutputType
     */
    select?: UserRewardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserRewardCountOutputType without action
   */
  export type UserRewardCountOutputTypeCountBuyerRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerRewardWhereInput
  }


  /**
   * Count Type StreamCountOutputType
   */

  export type StreamCountOutputType = {
    categories: number
  }

  export type StreamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | StreamCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * StreamCountOutputType without action
   */
  export type StreamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamCountOutputType
     */
    select?: StreamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StreamCountOutputType without action
   */
  export type StreamCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }


  /**
   * Count Type StreamStatsCountOutputType
   */

  export type StreamStatsCountOutputType = {
    categories: number
  }

  export type StreamStatsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | StreamStatsCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * StreamStatsCountOutputType without action
   */
  export type StreamStatsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStatsCountOutputType
     */
    select?: StreamStatsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StreamStatsCountOutputType without action
   */
  export type StreamStatsCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }


  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    messages: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    replies: number
    pinnedInChats: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | MessageCountOutputTypeCountRepliesArgs
    pinnedInChats?: boolean | MessageCountOutputTypeCountPinnedInChatsArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountPinnedInChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    countFollowers: number | null
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    countFollowers: number | null
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    description: string | null
    banner: string | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    color: string | null
    countFollowers: number | null
    streamId: string | null
    method: $Enums.AuthMethod | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    description: string | null
    banner: string | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    color: string | null
    countFollowers: number | null
    streamId: string | null
    method: $Enums.AuthMethod | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    description: number
    banner: number
    isVerified: number
    isTwoFactorEnabled: number
    color: number
    countFollowers: number
    streamId: number
    method: number
    balance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    countFollowers?: true
    balance?: true
  }

  export type UserSumAggregateInputType = {
    countFollowers?: true
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    description?: true
    banner?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    color?: true
    countFollowers?: true
    streamId?: true
    method?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    description?: true
    banner?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    color?: true
    countFollowers?: true
    streamId?: true
    method?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    description?: true
    banner?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    color?: true
    countFollowers?: true
    streamId?: true
    method?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    avatar: string
    description: string
    banner: string
    isVerified: boolean
    isTwoFactorEnabled: boolean
    color: string
    countFollowers: number
    streamId: string | null
    method: $Enums.AuthMethod
    balance: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    description?: boolean
    banner?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: boolean
    countFollowers?: boolean
    streamId?: boolean
    method?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    descriptionParts?: boolean | User$descriptionPartsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    bans?: boolean | User$bansArgs<ExtArgs>
    issuedBans?: boolean | User$issuedBansArgs<ExtArgs>
    userModerators?: boolean | User$userModeratorsArgs<ExtArgs>
    appointedModerators?: boolean | User$appointedModeratorsArgs<ExtArgs>
    streamerCurrency?: boolean | User$streamerCurrencyArgs<ExtArgs>
    currencyBalance?: boolean | User$currencyBalanceArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    boughtRewards?: boolean | User$boughtRewardsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    subscribers?: boolean | User$subscribersArgs<ExtArgs>
    Emote?: boolean | User$EmoteArgs<ExtArgs>
    Stream?: boolean | User$StreamArgs<ExtArgs>
    StreamStats?: boolean | User$StreamStatsArgs<ExtArgs>
    chat?: boolean | User$chatArgs<ExtArgs>
    Message?: boolean | User$MessageArgs<ExtArgs>
    receivedNotification?: boolean | User$receivedNotificationArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    account?: boolean | User$accountArgs<ExtArgs>
    UserSubscription?: boolean | User$UserSubscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    description?: boolean
    banner?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: boolean
    countFollowers?: boolean
    streamId?: boolean
    method?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Stream?: boolean | User$StreamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    description?: boolean
    banner?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: boolean
    countFollowers?: boolean
    streamId?: boolean
    method?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    descriptionParts?: boolean | User$descriptionPartsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    followers?: boolean | User$followersArgs<ExtArgs>
    bans?: boolean | User$bansArgs<ExtArgs>
    issuedBans?: boolean | User$issuedBansArgs<ExtArgs>
    userModerators?: boolean | User$userModeratorsArgs<ExtArgs>
    appointedModerators?: boolean | User$appointedModeratorsArgs<ExtArgs>
    streamerCurrency?: boolean | User$streamerCurrencyArgs<ExtArgs>
    currencyBalance?: boolean | User$currencyBalanceArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    boughtRewards?: boolean | User$boughtRewardsArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    subscribers?: boolean | User$subscribersArgs<ExtArgs>
    Emote?: boolean | User$EmoteArgs<ExtArgs>
    Stream?: boolean | User$StreamArgs<ExtArgs>
    StreamStats?: boolean | User$StreamStatsArgs<ExtArgs>
    chat?: boolean | User$chatArgs<ExtArgs>
    Message?: boolean | User$MessageArgs<ExtArgs>
    receivedNotification?: boolean | User$receivedNotificationArgs<ExtArgs>
    sentNotifications?: boolean | User$sentNotificationsArgs<ExtArgs>
    account?: boolean | User$accountArgs<ExtArgs>
    UserSubscription?: boolean | User$UserSubscriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stream?: boolean | User$StreamArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      descriptionParts: Prisma.$DescriptionPartPayload<ExtArgs>[]
      following: Prisma.$FollowerPayload<ExtArgs>[]
      followers: Prisma.$FollowerPayload<ExtArgs>[]
      bans: Prisma.$BanPayload<ExtArgs>[]
      issuedBans: Prisma.$BanPayload<ExtArgs>[]
      userModerators: Prisma.$ModeratorPayload<ExtArgs>[]
      appointedModerators: Prisma.$ModeratorPayload<ExtArgs>[]
      streamerCurrency: Prisma.$StreamerCurrencyPayload<ExtArgs>[]
      currencyBalance: Prisma.$CurrencyBalancePayload<ExtArgs>[]
      userRewards: Prisma.$UserRewardPayload<ExtArgs>[]
      boughtRewards: Prisma.$BuyerRewardPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      subscribers: Prisma.$SubscriptionPayload<ExtArgs>[]
      Emote: Prisma.$EmotePayload<ExtArgs>[]
      Stream: Prisma.$StreamPayload<ExtArgs> | null
      StreamStats: Prisma.$StreamStatsPayload<ExtArgs>[]
      chat: Prisma.$ChatPayload<ExtArgs>[]
      Message: Prisma.$MessagePayload<ExtArgs>[]
      receivedNotification: Prisma.$NotificationPayload<ExtArgs>[]
      sentNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      account: Prisma.$AccountPayload<ExtArgs>[]
      UserSubscription: Prisma.$UserSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      avatar: string
      description: string
      banner: string
      isVerified: boolean
      isTwoFactorEnabled: boolean
      color: string
      countFollowers: number
      streamId: string | null
      method: $Enums.AuthMethod
      balance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    descriptionParts<T extends User$descriptionPartsArgs<ExtArgs> = {}>(args?: Subset<T, User$descriptionPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findMany"> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findMany"> | Null>
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findMany"> | Null>
    bans<T extends User$bansArgs<ExtArgs> = {}>(args?: Subset<T, User$bansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findMany"> | Null>
    issuedBans<T extends User$issuedBansArgs<ExtArgs> = {}>(args?: Subset<T, User$issuedBansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findMany"> | Null>
    userModerators<T extends User$userModeratorsArgs<ExtArgs> = {}>(args?: Subset<T, User$userModeratorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findMany"> | Null>
    appointedModerators<T extends User$appointedModeratorsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointedModeratorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findMany"> | Null>
    streamerCurrency<T extends User$streamerCurrencyArgs<ExtArgs> = {}>(args?: Subset<T, User$streamerCurrencyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findMany"> | Null>
    currencyBalance<T extends User$currencyBalanceArgs<ExtArgs> = {}>(args?: Subset<T, User$currencyBalanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findMany"> | Null>
    userRewards<T extends User$userRewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$userRewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany"> | Null>
    boughtRewards<T extends User$boughtRewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$boughtRewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findMany"> | Null>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    subscribers<T extends User$subscribersArgs<ExtArgs> = {}>(args?: Subset<T, User$subscribersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    Emote<T extends User$EmoteArgs<ExtArgs> = {}>(args?: Subset<T, User$EmoteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findMany"> | Null>
    Stream<T extends User$StreamArgs<ExtArgs> = {}>(args?: Subset<T, User$StreamArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    StreamStats<T extends User$StreamStatsArgs<ExtArgs> = {}>(args?: Subset<T, User$StreamStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findMany"> | Null>
    chat<T extends User$chatArgs<ExtArgs> = {}>(args?: Subset<T, User$chatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany"> | Null>
    Message<T extends User$MessageArgs<ExtArgs> = {}>(args?: Subset<T, User$MessageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    receivedNotification<T extends User$receivedNotificationArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedNotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    sentNotifications<T extends User$sentNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    account<T extends User$accountArgs<ExtArgs> = {}>(args?: Subset<T, User$accountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    UserSubscription<T extends User$UserSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$UserSubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly description: FieldRef<"User", 'String'>
    readonly banner: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly isTwoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly color: FieldRef<"User", 'String'>
    readonly countFollowers: FieldRef<"User", 'Int'>
    readonly streamId: FieldRef<"User", 'String'>
    readonly method: FieldRef<"User", 'AuthMethod'>
    readonly balance: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.descriptionParts
   */
  export type User$descriptionPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    where?: DescriptionPartWhereInput
    orderBy?: DescriptionPartOrderByWithRelationInput | DescriptionPartOrderByWithRelationInput[]
    cursor?: DescriptionPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DescriptionPartScalarFieldEnum | DescriptionPartScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    where?: FollowerWhereInput
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    cursor?: FollowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowerScalarFieldEnum | FollowerScalarFieldEnum[]
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    where?: FollowerWhereInput
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    cursor?: FollowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowerScalarFieldEnum | FollowerScalarFieldEnum[]
  }

  /**
   * User.bans
   */
  export type User$bansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    where?: BanWhereInput
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    cursor?: BanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * User.issuedBans
   */
  export type User$issuedBansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    where?: BanWhereInput
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    cursor?: BanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * User.userModerators
   */
  export type User$userModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    where?: ModeratorWhereInput
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    cursor?: ModeratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeratorScalarFieldEnum | ModeratorScalarFieldEnum[]
  }

  /**
   * User.appointedModerators
   */
  export type User$appointedModeratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    where?: ModeratorWhereInput
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    cursor?: ModeratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeratorScalarFieldEnum | ModeratorScalarFieldEnum[]
  }

  /**
   * User.streamerCurrency
   */
  export type User$streamerCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    where?: StreamerCurrencyWhereInput
    orderBy?: StreamerCurrencyOrderByWithRelationInput | StreamerCurrencyOrderByWithRelationInput[]
    cursor?: StreamerCurrencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StreamerCurrencyScalarFieldEnum | StreamerCurrencyScalarFieldEnum[]
  }

  /**
   * User.currencyBalance
   */
  export type User$currencyBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    where?: CurrencyBalanceWhereInput
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    cursor?: CurrencyBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurrencyBalanceScalarFieldEnum | CurrencyBalanceScalarFieldEnum[]
  }

  /**
   * User.userRewards
   */
  export type User$userRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    cursor?: UserRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * User.boughtRewards
   */
  export type User$boughtRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    where?: BuyerRewardWhereInput
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    cursor?: BuyerRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerRewardScalarFieldEnum | BuyerRewardScalarFieldEnum[]
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.subscribers
   */
  export type User$subscribersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.Emote
   */
  export type User$EmoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    where?: EmoteWhereInput
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    cursor?: EmoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * User.Stream
   */
  export type User$StreamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    where?: StreamWhereInput
  }

  /**
   * User.StreamStats
   */
  export type User$StreamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    where?: StreamStatsWhereInput
    orderBy?: StreamStatsOrderByWithRelationInput | StreamStatsOrderByWithRelationInput[]
    cursor?: StreamStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StreamStatsScalarFieldEnum | StreamStatsScalarFieldEnum[]
  }

  /**
   * User.chat
   */
  export type User$chatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * User.Message
   */
  export type User$MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.receivedNotification
   */
  export type User$receivedNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sentNotifications
   */
  export type User$sentNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.account
   */
  export type User$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.UserSubscription
   */
  export type User$UserSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    where?: UserSubscriptionWhereInput
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    cursor?: UserSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Follower
   */

  export type AggregateFollower = {
    _count: FollowerCountAggregateOutputType | null
    _min: FollowerMinAggregateOutputType | null
    _max: FollowerMaxAggregateOutputType | null
  }

  export type FollowerMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    streamerId: string | null
  }

  export type FollowerMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    streamerId: string | null
  }

  export type FollowerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    streamerId: number
    _all: number
  }


  export type FollowerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
  }

  export type FollowerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
  }

  export type FollowerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
    _all?: true
  }

  export type FollowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follower to aggregate.
     */
    where?: FollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Followers
    **/
    _count?: true | FollowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowerMaxAggregateInputType
  }

  export type GetFollowerAggregateType<T extends FollowerAggregateArgs> = {
        [P in keyof T & keyof AggregateFollower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollower[P]>
      : GetScalarType<T[P], AggregateFollower[P]>
  }




  export type FollowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowerWhereInput
    orderBy?: FollowerOrderByWithAggregationInput | FollowerOrderByWithAggregationInput[]
    by: FollowerScalarFieldEnum[] | FollowerScalarFieldEnum
    having?: FollowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowerCountAggregateInputType | true
    _min?: FollowerMinAggregateInputType
    _max?: FollowerMaxAggregateInputType
  }

  export type FollowerGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    streamerId: string
    _count: FollowerCountAggregateOutputType | null
    _min: FollowerMinAggregateOutputType | null
    _max: FollowerMaxAggregateOutputType | null
  }

  type GetFollowerGroupByPayload<T extends FollowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowerGroupByOutputType[P]>
            : GetScalarType<T[P], FollowerGroupByOutputType[P]>
        }
      >
    >


  export type FollowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follower"]>

  export type FollowerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follower"]>

  export type FollowerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
  }

  export type FollowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follower"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      streamer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      streamerId: string
    }, ExtArgs["result"]["follower"]>
    composites: {}
  }

  type FollowerGetPayload<S extends boolean | null | undefined | FollowerDefaultArgs> = $Result.GetResult<Prisma.$FollowerPayload, S>

  type FollowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FollowerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FollowerCountAggregateInputType | true
    }

  export interface FollowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follower'], meta: { name: 'Follower' } }
    /**
     * Find zero or one Follower that matches the filter.
     * @param {FollowerFindUniqueArgs} args - Arguments to find a Follower
     * @example
     * // Get one Follower
     * const follower = await prisma.follower.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowerFindUniqueArgs>(args: SelectSubset<T, FollowerFindUniqueArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Follower that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FollowerFindUniqueOrThrowArgs} args - Arguments to find a Follower
     * @example
     * // Get one Follower
     * const follower = await prisma.follower.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowerFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Follower that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerFindFirstArgs} args - Arguments to find a Follower
     * @example
     * // Get one Follower
     * const follower = await prisma.follower.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowerFindFirstArgs>(args?: SelectSubset<T, FollowerFindFirstArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Follower that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerFindFirstOrThrowArgs} args - Arguments to find a Follower
     * @example
     * // Get one Follower
     * const follower = await prisma.follower.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowerFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowerFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followers
     * const followers = await prisma.follower.findMany()
     * 
     * // Get first 10 Followers
     * const followers = await prisma.follower.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followerWithIdOnly = await prisma.follower.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowerFindManyArgs>(args?: SelectSubset<T, FollowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Follower.
     * @param {FollowerCreateArgs} args - Arguments to create a Follower.
     * @example
     * // Create one Follower
     * const Follower = await prisma.follower.create({
     *   data: {
     *     // ... data to create a Follower
     *   }
     * })
     * 
     */
    create<T extends FollowerCreateArgs>(args: SelectSubset<T, FollowerCreateArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Followers.
     * @param {FollowerCreateManyArgs} args - Arguments to create many Followers.
     * @example
     * // Create many Followers
     * const follower = await prisma.follower.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowerCreateManyArgs>(args?: SelectSubset<T, FollowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Followers and returns the data saved in the database.
     * @param {FollowerCreateManyAndReturnArgs} args - Arguments to create many Followers.
     * @example
     * // Create many Followers
     * const follower = await prisma.follower.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Followers and only return the `id`
     * const followerWithIdOnly = await prisma.follower.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowerCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Follower.
     * @param {FollowerDeleteArgs} args - Arguments to delete one Follower.
     * @example
     * // Delete one Follower
     * const Follower = await prisma.follower.delete({
     *   where: {
     *     // ... filter to delete one Follower
     *   }
     * })
     * 
     */
    delete<T extends FollowerDeleteArgs>(args: SelectSubset<T, FollowerDeleteArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Follower.
     * @param {FollowerUpdateArgs} args - Arguments to update one Follower.
     * @example
     * // Update one Follower
     * const follower = await prisma.follower.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowerUpdateArgs>(args: SelectSubset<T, FollowerUpdateArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Followers.
     * @param {FollowerDeleteManyArgs} args - Arguments to filter Followers to delete.
     * @example
     * // Delete a few Followers
     * const { count } = await prisma.follower.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowerDeleteManyArgs>(args?: SelectSubset<T, FollowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followers
     * const follower = await prisma.follower.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowerUpdateManyArgs>(args: SelectSubset<T, FollowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follower.
     * @param {FollowerUpsertArgs} args - Arguments to update or create a Follower.
     * @example
     * // Update or create a Follower
     * const follower = await prisma.follower.upsert({
     *   create: {
     *     // ... data to create a Follower
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follower we want to update
     *   }
     * })
     */
    upsert<T extends FollowerUpsertArgs>(args: SelectSubset<T, FollowerUpsertArgs<ExtArgs>>): Prisma__FollowerClient<$Result.GetResult<Prisma.$FollowerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerCountArgs} args - Arguments to filter Followers to count.
     * @example
     * // Count the number of Followers
     * const count = await prisma.follower.count({
     *   where: {
     *     // ... the filter for the Followers we want to count
     *   }
     * })
    **/
    count<T extends FollowerCountArgs>(
      args?: Subset<T, FollowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowerAggregateArgs>(args: Subset<T, FollowerAggregateArgs>): Prisma.PrismaPromise<GetFollowerAggregateType<T>>

    /**
     * Group by Follower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowerGroupByArgs['orderBy'] }
        : { orderBy?: FollowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follower model
   */
  readonly fields: FollowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follower.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    streamer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follower model
   */ 
  interface FollowerFieldRefs {
    readonly id: FieldRef<"Follower", 'String'>
    readonly createdAt: FieldRef<"Follower", 'DateTime'>
    readonly updatedAt: FieldRef<"Follower", 'DateTime'>
    readonly userId: FieldRef<"Follower", 'String'>
    readonly streamerId: FieldRef<"Follower", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Follower findUnique
   */
  export type FollowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter, which Follower to fetch.
     */
    where: FollowerWhereUniqueInput
  }

  /**
   * Follower findUniqueOrThrow
   */
  export type FollowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter, which Follower to fetch.
     */
    where: FollowerWhereUniqueInput
  }

  /**
   * Follower findFirst
   */
  export type FollowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter, which Follower to fetch.
     */
    where?: FollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowerScalarFieldEnum | FollowerScalarFieldEnum[]
  }

  /**
   * Follower findFirstOrThrow
   */
  export type FollowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter, which Follower to fetch.
     */
    where?: FollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowerScalarFieldEnum | FollowerScalarFieldEnum[]
  }

  /**
   * Follower findMany
   */
  export type FollowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowerOrderByWithRelationInput | FollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Followers.
     */
    cursor?: FollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    distinct?: FollowerScalarFieldEnum | FollowerScalarFieldEnum[]
  }

  /**
   * Follower create
   */
  export type FollowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * The data needed to create a Follower.
     */
    data: XOR<FollowerCreateInput, FollowerUncheckedCreateInput>
  }

  /**
   * Follower createMany
   */
  export type FollowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Followers.
     */
    data: FollowerCreateManyInput | FollowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follower createManyAndReturn
   */
  export type FollowerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Followers.
     */
    data: FollowerCreateManyInput | FollowerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follower update
   */
  export type FollowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * The data needed to update a Follower.
     */
    data: XOR<FollowerUpdateInput, FollowerUncheckedUpdateInput>
    /**
     * Choose, which Follower to update.
     */
    where: FollowerWhereUniqueInput
  }

  /**
   * Follower updateMany
   */
  export type FollowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Followers.
     */
    data: XOR<FollowerUpdateManyMutationInput, FollowerUncheckedUpdateManyInput>
    /**
     * Filter which Followers to update
     */
    where?: FollowerWhereInput
  }

  /**
   * Follower upsert
   */
  export type FollowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * The filter to search for the Follower to update in case it exists.
     */
    where: FollowerWhereUniqueInput
    /**
     * In case the Follower found by the `where` argument doesn't exist, create a new Follower with this data.
     */
    create: XOR<FollowerCreateInput, FollowerUncheckedCreateInput>
    /**
     * In case the Follower was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowerUpdateInput, FollowerUncheckedUpdateInput>
  }

  /**
   * Follower delete
   */
  export type FollowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
    /**
     * Filter which Follower to delete.
     */
    where: FollowerWhereUniqueInput
  }

  /**
   * Follower deleteMany
   */
  export type FollowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Followers to delete
     */
    where?: FollowerWhereInput
  }

  /**
   * Follower without action
   */
  export type FollowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follower
     */
    select?: FollowerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowerInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    subscribedId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    subscriberId: string | null
    subscribedId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    subscriberId: number
    subscribedId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    subscriberId?: true
    subscribedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    subscriberId?: true
    subscribedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    subscriberId?: true
    subscribedId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    subscriberId: string
    subscribedId: string
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    subscribedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriber?: boolean | UserDefaultArgs<ExtArgs>
    subscribed?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriberId?: boolean
    subscribedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriber?: boolean | UserDefaultArgs<ExtArgs>
    subscribed?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    subscriberId?: boolean
    subscribedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | UserDefaultArgs<ExtArgs>
    subscribed?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriber?: boolean | UserDefaultArgs<ExtArgs>
    subscribed?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      subscriber: Prisma.$UserPayload<ExtArgs>
      subscribed: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriberId: string
      subscribedId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriber<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subscribed<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly subscriberId: FieldRef<"Subscription", 'String'>
    readonly subscribedId: FieldRef<"Subscription", 'String'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model UserSubscription
   */

  export type AggregateUserSubscription = {
    _count: UserSubscriptionCountAggregateOutputType | null
    _avg: UserSubscriptionAvgAggregateOutputType | null
    _sum: UserSubscriptionSumAggregateOutputType | null
    _min: UserSubscriptionMinAggregateOutputType | null
    _max: UserSubscriptionMaxAggregateOutputType | null
  }

  export type UserSubscriptionAvgAggregateOutputType = {
    price: number | null
  }

  export type UserSubscriptionSumAggregateOutputType = {
    price: number | null
  }

  export type UserSubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    price: number | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    price: number | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    price: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSubscriptionAvgAggregateInputType = {
    price?: true
  }

  export type UserSubscriptionSumAggregateInputType = {
    price?: true
  }

  export type UserSubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSubscription to aggregate.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSubscriptions
    **/
    _count?: true | UserSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSubscriptionMaxAggregateInputType
  }

  export type GetUserSubscriptionAggregateType<T extends UserSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSubscription[P]>
      : GetScalarType<T[P], AggregateUserSubscription[P]>
  }




  export type UserSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSubscriptionWhereInput
    orderBy?: UserSubscriptionOrderByWithAggregationInput | UserSubscriptionOrderByWithAggregationInput[]
    by: UserSubscriptionScalarFieldEnum[] | UserSubscriptionScalarFieldEnum
    having?: UserSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSubscriptionCountAggregateInputType | true
    _avg?: UserSubscriptionAvgAggregateInputType
    _sum?: UserSubscriptionSumAggregateInputType
    _min?: UserSubscriptionMinAggregateInputType
    _max?: UserSubscriptionMaxAggregateInputType
  }

  export type UserSubscriptionGroupByOutputType = {
    id: string
    userId: string
    price: number
    icon: string
    createdAt: Date
    updatedAt: Date
    _count: UserSubscriptionCountAggregateOutputType | null
    _avg: UserSubscriptionAvgAggregateOutputType | null
    _sum: UserSubscriptionSumAggregateOutputType | null
    _min: UserSubscriptionMinAggregateOutputType | null
    _max: UserSubscriptionMaxAggregateOutputType | null
  }

  type GetUserSubscriptionGroupByPayload<T extends UserSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type UserSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    price?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSubscription"]>

  export type UserSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    price?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSubscription"]>

  export type UserSubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    price?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSubscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      price: number
      icon: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSubscription"]>
    composites: {}
  }

  type UserSubscriptionGetPayload<S extends boolean | null | undefined | UserSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$UserSubscriptionPayload, S>

  type UserSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSubscriptionCountAggregateInputType | true
    }

  export interface UserSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSubscription'], meta: { name: 'UserSubscription' } }
    /**
     * Find zero or one UserSubscription that matches the filter.
     * @param {UserSubscriptionFindUniqueArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSubscriptionFindUniqueArgs>(args: SelectSubset<T, UserSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSubscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindFirstArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSubscriptionFindFirstArgs>(args?: SelectSubset<T, UserSubscriptionFindFirstArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindFirstOrThrowArgs} args - Arguments to find a UserSubscription
     * @example
     * // Get one UserSubscription
     * const userSubscription = await prisma.userSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSubscriptions
     * const userSubscriptions = await prisma.userSubscription.findMany()
     * 
     * // Get first 10 UserSubscriptions
     * const userSubscriptions = await prisma.userSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSubscriptionWithIdOnly = await prisma.userSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSubscriptionFindManyArgs>(args?: SelectSubset<T, UserSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSubscription.
     * @param {UserSubscriptionCreateArgs} args - Arguments to create a UserSubscription.
     * @example
     * // Create one UserSubscription
     * const UserSubscription = await prisma.userSubscription.create({
     *   data: {
     *     // ... data to create a UserSubscription
     *   }
     * })
     * 
     */
    create<T extends UserSubscriptionCreateArgs>(args: SelectSubset<T, UserSubscriptionCreateArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSubscriptions.
     * @param {UserSubscriptionCreateManyArgs} args - Arguments to create many UserSubscriptions.
     * @example
     * // Create many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSubscriptionCreateManyArgs>(args?: SelectSubset<T, UserSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSubscriptions and returns the data saved in the database.
     * @param {UserSubscriptionCreateManyAndReturnArgs} args - Arguments to create many UserSubscriptions.
     * @example
     * // Create many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSubscriptions and only return the `id`
     * const userSubscriptionWithIdOnly = await prisma.userSubscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSubscription.
     * @param {UserSubscriptionDeleteArgs} args - Arguments to delete one UserSubscription.
     * @example
     * // Delete one UserSubscription
     * const UserSubscription = await prisma.userSubscription.delete({
     *   where: {
     *     // ... filter to delete one UserSubscription
     *   }
     * })
     * 
     */
    delete<T extends UserSubscriptionDeleteArgs>(args: SelectSubset<T, UserSubscriptionDeleteArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSubscription.
     * @param {UserSubscriptionUpdateArgs} args - Arguments to update one UserSubscription.
     * @example
     * // Update one UserSubscription
     * const userSubscription = await prisma.userSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSubscriptionUpdateArgs>(args: SelectSubset<T, UserSubscriptionUpdateArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSubscriptions.
     * @param {UserSubscriptionDeleteManyArgs} args - Arguments to filter UserSubscriptions to delete.
     * @example
     * // Delete a few UserSubscriptions
     * const { count } = await prisma.userSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSubscriptionDeleteManyArgs>(args?: SelectSubset<T, UserSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSubscriptions
     * const userSubscription = await prisma.userSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSubscriptionUpdateManyArgs>(args: SelectSubset<T, UserSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSubscription.
     * @param {UserSubscriptionUpsertArgs} args - Arguments to update or create a UserSubscription.
     * @example
     * // Update or create a UserSubscription
     * const userSubscription = await prisma.userSubscription.upsert({
     *   create: {
     *     // ... data to create a UserSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSubscription we want to update
     *   }
     * })
     */
    upsert<T extends UserSubscriptionUpsertArgs>(args: SelectSubset<T, UserSubscriptionUpsertArgs<ExtArgs>>): Prisma__UserSubscriptionClient<$Result.GetResult<Prisma.$UserSubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionCountArgs} args - Arguments to filter UserSubscriptions to count.
     * @example
     * // Count the number of UserSubscriptions
     * const count = await prisma.userSubscription.count({
     *   where: {
     *     // ... the filter for the UserSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends UserSubscriptionCountArgs>(
      args?: Subset<T, UserSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSubscriptionAggregateArgs>(args: Subset<T, UserSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetUserSubscriptionAggregateType<T>>

    /**
     * Group by UserSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: UserSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSubscription model
   */
  readonly fields: UserSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSubscription model
   */ 
  interface UserSubscriptionFieldRefs {
    readonly id: FieldRef<"UserSubscription", 'String'>
    readonly userId: FieldRef<"UserSubscription", 'String'>
    readonly price: FieldRef<"UserSubscription", 'Int'>
    readonly icon: FieldRef<"UserSubscription", 'String'>
    readonly createdAt: FieldRef<"UserSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSubscription findUnique
   */
  export type UserSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription findUniqueOrThrow
   */
  export type UserSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription findFirst
   */
  export type UserSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSubscriptions.
     */
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription findFirstOrThrow
   */
  export type UserSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscription to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSubscriptions.
     */
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription findMany
   */
  export type UserSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which UserSubscriptions to fetch.
     */
    where?: UserSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSubscriptions to fetch.
     */
    orderBy?: UserSubscriptionOrderByWithRelationInput | UserSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSubscriptions.
     */
    cursor?: UserSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSubscriptions.
     */
    skip?: number
    distinct?: UserSubscriptionScalarFieldEnum | UserSubscriptionScalarFieldEnum[]
  }

  /**
   * UserSubscription create
   */
  export type UserSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSubscription.
     */
    data: XOR<UserSubscriptionCreateInput, UserSubscriptionUncheckedCreateInput>
  }

  /**
   * UserSubscription createMany
   */
  export type UserSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSubscriptions.
     */
    data: UserSubscriptionCreateManyInput | UserSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSubscription createManyAndReturn
   */
  export type UserSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSubscriptions.
     */
    data: UserSubscriptionCreateManyInput | UserSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSubscription update
   */
  export type UserSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSubscription.
     */
    data: XOR<UserSubscriptionUpdateInput, UserSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which UserSubscription to update.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription updateMany
   */
  export type UserSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSubscriptions.
     */
    data: XOR<UserSubscriptionUpdateManyMutationInput, UserSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which UserSubscriptions to update
     */
    where?: UserSubscriptionWhereInput
  }

  /**
   * UserSubscription upsert
   */
  export type UserSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSubscription to update in case it exists.
     */
    where: UserSubscriptionWhereUniqueInput
    /**
     * In case the UserSubscription found by the `where` argument doesn't exist, create a new UserSubscription with this data.
     */
    create: XOR<UserSubscriptionCreateInput, UserSubscriptionUncheckedCreateInput>
    /**
     * In case the UserSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSubscriptionUpdateInput, UserSubscriptionUncheckedUpdateInput>
  }

  /**
   * UserSubscription delete
   */
  export type UserSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which UserSubscription to delete.
     */
    where: UserSubscriptionWhereUniqueInput
  }

  /**
   * UserSubscription deleteMany
   */
  export type UserSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSubscriptions to delete
     */
    where?: UserSubscriptionWhereInput
  }

  /**
   * UserSubscription without action
   */
  export type UserSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSubscription
     */
    select?: UserSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Moderator
   */

  export type AggregateModerator = {
    _count: ModeratorCountAggregateOutputType | null
    _min: ModeratorMinAggregateOutputType | null
    _max: ModeratorMaxAggregateOutputType | null
  }

  export type ModeratorMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    streamerId: string | null
  }

  export type ModeratorMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    streamerId: string | null
  }

  export type ModeratorCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    streamerId: number
    _all: number
  }


  export type ModeratorMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
  }

  export type ModeratorMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
  }

  export type ModeratorCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    streamerId?: true
    _all?: true
  }

  export type ModeratorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Moderator to aggregate.
     */
    where?: ModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Moderators to fetch.
     */
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Moderators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Moderators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Moderators
    **/
    _count?: true | ModeratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeratorMaxAggregateInputType
  }

  export type GetModeratorAggregateType<T extends ModeratorAggregateArgs> = {
        [P in keyof T & keyof AggregateModerator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModerator[P]>
      : GetScalarType<T[P], AggregateModerator[P]>
  }




  export type ModeratorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeratorWhereInput
    orderBy?: ModeratorOrderByWithAggregationInput | ModeratorOrderByWithAggregationInput[]
    by: ModeratorScalarFieldEnum[] | ModeratorScalarFieldEnum
    having?: ModeratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeratorCountAggregateInputType | true
    _min?: ModeratorMinAggregateInputType
    _max?: ModeratorMaxAggregateInputType
  }

  export type ModeratorGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    streamerId: string
    _count: ModeratorCountAggregateOutputType | null
    _min: ModeratorMinAggregateOutputType | null
    _max: ModeratorMaxAggregateOutputType | null
  }

  type GetModeratorGroupByPayload<T extends ModeratorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModeratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeratorGroupByOutputType[P]>
            : GetScalarType<T[P], ModeratorGroupByOutputType[P]>
        }
      >
    >


  export type ModeratorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
    issuedBans?: boolean | Moderator$issuedBansArgs<ExtArgs>
    _count?: boolean | ModeratorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["moderator"]>

  export type ModeratorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["moderator"]>

  export type ModeratorSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    streamerId?: boolean
  }

  export type ModeratorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
    issuedBans?: boolean | Moderator$issuedBansArgs<ExtArgs>
    _count?: boolean | ModeratorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModeratorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ModeratorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Moderator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      streamer: Prisma.$UserPayload<ExtArgs>
      issuedBans: Prisma.$BanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      streamerId: string
    }, ExtArgs["result"]["moderator"]>
    composites: {}
  }

  type ModeratorGetPayload<S extends boolean | null | undefined | ModeratorDefaultArgs> = $Result.GetResult<Prisma.$ModeratorPayload, S>

  type ModeratorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModeratorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModeratorCountAggregateInputType | true
    }

  export interface ModeratorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Moderator'], meta: { name: 'Moderator' } }
    /**
     * Find zero or one Moderator that matches the filter.
     * @param {ModeratorFindUniqueArgs} args - Arguments to find a Moderator
     * @example
     * // Get one Moderator
     * const moderator = await prisma.moderator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModeratorFindUniqueArgs>(args: SelectSubset<T, ModeratorFindUniqueArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Moderator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModeratorFindUniqueOrThrowArgs} args - Arguments to find a Moderator
     * @example
     * // Get one Moderator
     * const moderator = await prisma.moderator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModeratorFindUniqueOrThrowArgs>(args: SelectSubset<T, ModeratorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Moderator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorFindFirstArgs} args - Arguments to find a Moderator
     * @example
     * // Get one Moderator
     * const moderator = await prisma.moderator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModeratorFindFirstArgs>(args?: SelectSubset<T, ModeratorFindFirstArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Moderator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorFindFirstOrThrowArgs} args - Arguments to find a Moderator
     * @example
     * // Get one Moderator
     * const moderator = await prisma.moderator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModeratorFindFirstOrThrowArgs>(args?: SelectSubset<T, ModeratorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Moderators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Moderators
     * const moderators = await prisma.moderator.findMany()
     * 
     * // Get first 10 Moderators
     * const moderators = await prisma.moderator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moderatorWithIdOnly = await prisma.moderator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModeratorFindManyArgs>(args?: SelectSubset<T, ModeratorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Moderator.
     * @param {ModeratorCreateArgs} args - Arguments to create a Moderator.
     * @example
     * // Create one Moderator
     * const Moderator = await prisma.moderator.create({
     *   data: {
     *     // ... data to create a Moderator
     *   }
     * })
     * 
     */
    create<T extends ModeratorCreateArgs>(args: SelectSubset<T, ModeratorCreateArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Moderators.
     * @param {ModeratorCreateManyArgs} args - Arguments to create many Moderators.
     * @example
     * // Create many Moderators
     * const moderator = await prisma.moderator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModeratorCreateManyArgs>(args?: SelectSubset<T, ModeratorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Moderators and returns the data saved in the database.
     * @param {ModeratorCreateManyAndReturnArgs} args - Arguments to create many Moderators.
     * @example
     * // Create many Moderators
     * const moderator = await prisma.moderator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Moderators and only return the `id`
     * const moderatorWithIdOnly = await prisma.moderator.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModeratorCreateManyAndReturnArgs>(args?: SelectSubset<T, ModeratorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Moderator.
     * @param {ModeratorDeleteArgs} args - Arguments to delete one Moderator.
     * @example
     * // Delete one Moderator
     * const Moderator = await prisma.moderator.delete({
     *   where: {
     *     // ... filter to delete one Moderator
     *   }
     * })
     * 
     */
    delete<T extends ModeratorDeleteArgs>(args: SelectSubset<T, ModeratorDeleteArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Moderator.
     * @param {ModeratorUpdateArgs} args - Arguments to update one Moderator.
     * @example
     * // Update one Moderator
     * const moderator = await prisma.moderator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModeratorUpdateArgs>(args: SelectSubset<T, ModeratorUpdateArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Moderators.
     * @param {ModeratorDeleteManyArgs} args - Arguments to filter Moderators to delete.
     * @example
     * // Delete a few Moderators
     * const { count } = await prisma.moderator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModeratorDeleteManyArgs>(args?: SelectSubset<T, ModeratorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Moderators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Moderators
     * const moderator = await prisma.moderator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModeratorUpdateManyArgs>(args: SelectSubset<T, ModeratorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Moderator.
     * @param {ModeratorUpsertArgs} args - Arguments to update or create a Moderator.
     * @example
     * // Update or create a Moderator
     * const moderator = await prisma.moderator.upsert({
     *   create: {
     *     // ... data to create a Moderator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Moderator we want to update
     *   }
     * })
     */
    upsert<T extends ModeratorUpsertArgs>(args: SelectSubset<T, ModeratorUpsertArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Moderators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorCountArgs} args - Arguments to filter Moderators to count.
     * @example
     * // Count the number of Moderators
     * const count = await prisma.moderator.count({
     *   where: {
     *     // ... the filter for the Moderators we want to count
     *   }
     * })
    **/
    count<T extends ModeratorCountArgs>(
      args?: Subset<T, ModeratorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Moderator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeratorAggregateArgs>(args: Subset<T, ModeratorAggregateArgs>): Prisma.PrismaPromise<GetModeratorAggregateType<T>>

    /**
     * Group by Moderator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeratorGroupByArgs['orderBy'] }
        : { orderBy?: ModeratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Moderator model
   */
  readonly fields: ModeratorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Moderator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModeratorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    streamer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    issuedBans<T extends Moderator$issuedBansArgs<ExtArgs> = {}>(args?: Subset<T, Moderator$issuedBansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Moderator model
   */ 
  interface ModeratorFieldRefs {
    readonly id: FieldRef<"Moderator", 'String'>
    readonly createdAt: FieldRef<"Moderator", 'DateTime'>
    readonly updatedAt: FieldRef<"Moderator", 'DateTime'>
    readonly userId: FieldRef<"Moderator", 'String'>
    readonly streamerId: FieldRef<"Moderator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Moderator findUnique
   */
  export type ModeratorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter, which Moderator to fetch.
     */
    where: ModeratorWhereUniqueInput
  }

  /**
   * Moderator findUniqueOrThrow
   */
  export type ModeratorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter, which Moderator to fetch.
     */
    where: ModeratorWhereUniqueInput
  }

  /**
   * Moderator findFirst
   */
  export type ModeratorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter, which Moderator to fetch.
     */
    where?: ModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Moderators to fetch.
     */
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Moderators.
     */
    cursor?: ModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Moderators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Moderators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Moderators.
     */
    distinct?: ModeratorScalarFieldEnum | ModeratorScalarFieldEnum[]
  }

  /**
   * Moderator findFirstOrThrow
   */
  export type ModeratorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter, which Moderator to fetch.
     */
    where?: ModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Moderators to fetch.
     */
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Moderators.
     */
    cursor?: ModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Moderators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Moderators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Moderators.
     */
    distinct?: ModeratorScalarFieldEnum | ModeratorScalarFieldEnum[]
  }

  /**
   * Moderator findMany
   */
  export type ModeratorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter, which Moderators to fetch.
     */
    where?: ModeratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Moderators to fetch.
     */
    orderBy?: ModeratorOrderByWithRelationInput | ModeratorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Moderators.
     */
    cursor?: ModeratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Moderators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Moderators.
     */
    skip?: number
    distinct?: ModeratorScalarFieldEnum | ModeratorScalarFieldEnum[]
  }

  /**
   * Moderator create
   */
  export type ModeratorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * The data needed to create a Moderator.
     */
    data: XOR<ModeratorCreateInput, ModeratorUncheckedCreateInput>
  }

  /**
   * Moderator createMany
   */
  export type ModeratorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Moderators.
     */
    data: ModeratorCreateManyInput | ModeratorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Moderator createManyAndReturn
   */
  export type ModeratorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Moderators.
     */
    data: ModeratorCreateManyInput | ModeratorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Moderator update
   */
  export type ModeratorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * The data needed to update a Moderator.
     */
    data: XOR<ModeratorUpdateInput, ModeratorUncheckedUpdateInput>
    /**
     * Choose, which Moderator to update.
     */
    where: ModeratorWhereUniqueInput
  }

  /**
   * Moderator updateMany
   */
  export type ModeratorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Moderators.
     */
    data: XOR<ModeratorUpdateManyMutationInput, ModeratorUncheckedUpdateManyInput>
    /**
     * Filter which Moderators to update
     */
    where?: ModeratorWhereInput
  }

  /**
   * Moderator upsert
   */
  export type ModeratorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * The filter to search for the Moderator to update in case it exists.
     */
    where: ModeratorWhereUniqueInput
    /**
     * In case the Moderator found by the `where` argument doesn't exist, create a new Moderator with this data.
     */
    create: XOR<ModeratorCreateInput, ModeratorUncheckedCreateInput>
    /**
     * In case the Moderator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeratorUpdateInput, ModeratorUncheckedUpdateInput>
  }

  /**
   * Moderator delete
   */
  export type ModeratorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
    /**
     * Filter which Moderator to delete.
     */
    where: ModeratorWhereUniqueInput
  }

  /**
   * Moderator deleteMany
   */
  export type ModeratorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Moderators to delete
     */
    where?: ModeratorWhereInput
  }

  /**
   * Moderator.issuedBans
   */
  export type Moderator$issuedBansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    where?: BanWhereInput
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    cursor?: BanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * Moderator without action
   */
  export type ModeratorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Moderator
     */
    select?: ModeratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeratorInclude<ExtArgs> | null
  }


  /**
   * Model DescriptionPart
   */

  export type AggregateDescriptionPart = {
    _count: DescriptionPartCountAggregateOutputType | null
    _min: DescriptionPartMinAggregateOutputType | null
    _max: DescriptionPartMaxAggregateOutputType | null
  }

  export type DescriptionPartMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    image: string | null
    description: string | null
    url: string | null
  }

  export type DescriptionPartMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    image: string | null
    description: string | null
    url: string | null
  }

  export type DescriptionPartCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    image: number
    description: number
    url: number
    _all: number
  }


  export type DescriptionPartMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    url?: true
  }

  export type DescriptionPartMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    url?: true
  }

  export type DescriptionPartCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    url?: true
    _all?: true
  }

  export type DescriptionPartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DescriptionPart to aggregate.
     */
    where?: DescriptionPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionParts to fetch.
     */
    orderBy?: DescriptionPartOrderByWithRelationInput | DescriptionPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DescriptionPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DescriptionParts
    **/
    _count?: true | DescriptionPartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DescriptionPartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DescriptionPartMaxAggregateInputType
  }

  export type GetDescriptionPartAggregateType<T extends DescriptionPartAggregateArgs> = {
        [P in keyof T & keyof AggregateDescriptionPart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDescriptionPart[P]>
      : GetScalarType<T[P], AggregateDescriptionPart[P]>
  }




  export type DescriptionPartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DescriptionPartWhereInput
    orderBy?: DescriptionPartOrderByWithAggregationInput | DescriptionPartOrderByWithAggregationInput[]
    by: DescriptionPartScalarFieldEnum[] | DescriptionPartScalarFieldEnum
    having?: DescriptionPartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DescriptionPartCountAggregateInputType | true
    _min?: DescriptionPartMinAggregateInputType
    _max?: DescriptionPartMaxAggregateInputType
  }

  export type DescriptionPartGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    image: string
    description: string
    url: string
    _count: DescriptionPartCountAggregateOutputType | null
    _min: DescriptionPartMinAggregateOutputType | null
    _max: DescriptionPartMaxAggregateOutputType | null
  }

  type GetDescriptionPartGroupByPayload<T extends DescriptionPartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DescriptionPartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DescriptionPartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DescriptionPartGroupByOutputType[P]>
            : GetScalarType<T[P], DescriptionPartGroupByOutputType[P]>
        }
      >
    >


  export type DescriptionPartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    url?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["descriptionPart"]>

  export type DescriptionPartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    url?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["descriptionPart"]>

  export type DescriptionPartSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    url?: boolean
  }

  export type DescriptionPartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DescriptionPartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DescriptionPartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DescriptionPart"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      image: string
      description: string
      url: string
    }, ExtArgs["result"]["descriptionPart"]>
    composites: {}
  }

  type DescriptionPartGetPayload<S extends boolean | null | undefined | DescriptionPartDefaultArgs> = $Result.GetResult<Prisma.$DescriptionPartPayload, S>

  type DescriptionPartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DescriptionPartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DescriptionPartCountAggregateInputType | true
    }

  export interface DescriptionPartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DescriptionPart'], meta: { name: 'DescriptionPart' } }
    /**
     * Find zero or one DescriptionPart that matches the filter.
     * @param {DescriptionPartFindUniqueArgs} args - Arguments to find a DescriptionPart
     * @example
     * // Get one DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DescriptionPartFindUniqueArgs>(args: SelectSubset<T, DescriptionPartFindUniqueArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DescriptionPart that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DescriptionPartFindUniqueOrThrowArgs} args - Arguments to find a DescriptionPart
     * @example
     * // Get one DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DescriptionPartFindUniqueOrThrowArgs>(args: SelectSubset<T, DescriptionPartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DescriptionPart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartFindFirstArgs} args - Arguments to find a DescriptionPart
     * @example
     * // Get one DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DescriptionPartFindFirstArgs>(args?: SelectSubset<T, DescriptionPartFindFirstArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DescriptionPart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartFindFirstOrThrowArgs} args - Arguments to find a DescriptionPart
     * @example
     * // Get one DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DescriptionPartFindFirstOrThrowArgs>(args?: SelectSubset<T, DescriptionPartFindFirstOrThrowArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DescriptionParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DescriptionParts
     * const descriptionParts = await prisma.descriptionPart.findMany()
     * 
     * // Get first 10 DescriptionParts
     * const descriptionParts = await prisma.descriptionPart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const descriptionPartWithIdOnly = await prisma.descriptionPart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DescriptionPartFindManyArgs>(args?: SelectSubset<T, DescriptionPartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DescriptionPart.
     * @param {DescriptionPartCreateArgs} args - Arguments to create a DescriptionPart.
     * @example
     * // Create one DescriptionPart
     * const DescriptionPart = await prisma.descriptionPart.create({
     *   data: {
     *     // ... data to create a DescriptionPart
     *   }
     * })
     * 
     */
    create<T extends DescriptionPartCreateArgs>(args: SelectSubset<T, DescriptionPartCreateArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DescriptionParts.
     * @param {DescriptionPartCreateManyArgs} args - Arguments to create many DescriptionParts.
     * @example
     * // Create many DescriptionParts
     * const descriptionPart = await prisma.descriptionPart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DescriptionPartCreateManyArgs>(args?: SelectSubset<T, DescriptionPartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DescriptionParts and returns the data saved in the database.
     * @param {DescriptionPartCreateManyAndReturnArgs} args - Arguments to create many DescriptionParts.
     * @example
     * // Create many DescriptionParts
     * const descriptionPart = await prisma.descriptionPart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DescriptionParts and only return the `id`
     * const descriptionPartWithIdOnly = await prisma.descriptionPart.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DescriptionPartCreateManyAndReturnArgs>(args?: SelectSubset<T, DescriptionPartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DescriptionPart.
     * @param {DescriptionPartDeleteArgs} args - Arguments to delete one DescriptionPart.
     * @example
     * // Delete one DescriptionPart
     * const DescriptionPart = await prisma.descriptionPart.delete({
     *   where: {
     *     // ... filter to delete one DescriptionPart
     *   }
     * })
     * 
     */
    delete<T extends DescriptionPartDeleteArgs>(args: SelectSubset<T, DescriptionPartDeleteArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DescriptionPart.
     * @param {DescriptionPartUpdateArgs} args - Arguments to update one DescriptionPart.
     * @example
     * // Update one DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DescriptionPartUpdateArgs>(args: SelectSubset<T, DescriptionPartUpdateArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DescriptionParts.
     * @param {DescriptionPartDeleteManyArgs} args - Arguments to filter DescriptionParts to delete.
     * @example
     * // Delete a few DescriptionParts
     * const { count } = await prisma.descriptionPart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DescriptionPartDeleteManyArgs>(args?: SelectSubset<T, DescriptionPartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DescriptionParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DescriptionParts
     * const descriptionPart = await prisma.descriptionPart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DescriptionPartUpdateManyArgs>(args: SelectSubset<T, DescriptionPartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DescriptionPart.
     * @param {DescriptionPartUpsertArgs} args - Arguments to update or create a DescriptionPart.
     * @example
     * // Update or create a DescriptionPart
     * const descriptionPart = await prisma.descriptionPart.upsert({
     *   create: {
     *     // ... data to create a DescriptionPart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DescriptionPart we want to update
     *   }
     * })
     */
    upsert<T extends DescriptionPartUpsertArgs>(args: SelectSubset<T, DescriptionPartUpsertArgs<ExtArgs>>): Prisma__DescriptionPartClient<$Result.GetResult<Prisma.$DescriptionPartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DescriptionParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartCountArgs} args - Arguments to filter DescriptionParts to count.
     * @example
     * // Count the number of DescriptionParts
     * const count = await prisma.descriptionPart.count({
     *   where: {
     *     // ... the filter for the DescriptionParts we want to count
     *   }
     * })
    **/
    count<T extends DescriptionPartCountArgs>(
      args?: Subset<T, DescriptionPartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DescriptionPartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DescriptionPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DescriptionPartAggregateArgs>(args: Subset<T, DescriptionPartAggregateArgs>): Prisma.PrismaPromise<GetDescriptionPartAggregateType<T>>

    /**
     * Group by DescriptionPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionPartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DescriptionPartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DescriptionPartGroupByArgs['orderBy'] }
        : { orderBy?: DescriptionPartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DescriptionPartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDescriptionPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DescriptionPart model
   */
  readonly fields: DescriptionPartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DescriptionPart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DescriptionPartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DescriptionPart model
   */ 
  interface DescriptionPartFieldRefs {
    readonly id: FieldRef<"DescriptionPart", 'String'>
    readonly createdAt: FieldRef<"DescriptionPart", 'DateTime'>
    readonly updatedAt: FieldRef<"DescriptionPart", 'DateTime'>
    readonly userId: FieldRef<"DescriptionPart", 'String'>
    readonly image: FieldRef<"DescriptionPart", 'String'>
    readonly description: FieldRef<"DescriptionPart", 'String'>
    readonly url: FieldRef<"DescriptionPart", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DescriptionPart findUnique
   */
  export type DescriptionPartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionPart to fetch.
     */
    where: DescriptionPartWhereUniqueInput
  }

  /**
   * DescriptionPart findUniqueOrThrow
   */
  export type DescriptionPartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionPart to fetch.
     */
    where: DescriptionPartWhereUniqueInput
  }

  /**
   * DescriptionPart findFirst
   */
  export type DescriptionPartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionPart to fetch.
     */
    where?: DescriptionPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionParts to fetch.
     */
    orderBy?: DescriptionPartOrderByWithRelationInput | DescriptionPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DescriptionParts.
     */
    cursor?: DescriptionPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DescriptionParts.
     */
    distinct?: DescriptionPartScalarFieldEnum | DescriptionPartScalarFieldEnum[]
  }

  /**
   * DescriptionPart findFirstOrThrow
   */
  export type DescriptionPartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionPart to fetch.
     */
    where?: DescriptionPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionParts to fetch.
     */
    orderBy?: DescriptionPartOrderByWithRelationInput | DescriptionPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DescriptionParts.
     */
    cursor?: DescriptionPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DescriptionParts.
     */
    distinct?: DescriptionPartScalarFieldEnum | DescriptionPartScalarFieldEnum[]
  }

  /**
   * DescriptionPart findMany
   */
  export type DescriptionPartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionParts to fetch.
     */
    where?: DescriptionPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionParts to fetch.
     */
    orderBy?: DescriptionPartOrderByWithRelationInput | DescriptionPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DescriptionParts.
     */
    cursor?: DescriptionPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionParts.
     */
    skip?: number
    distinct?: DescriptionPartScalarFieldEnum | DescriptionPartScalarFieldEnum[]
  }

  /**
   * DescriptionPart create
   */
  export type DescriptionPartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * The data needed to create a DescriptionPart.
     */
    data: XOR<DescriptionPartCreateInput, DescriptionPartUncheckedCreateInput>
  }

  /**
   * DescriptionPart createMany
   */
  export type DescriptionPartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DescriptionParts.
     */
    data: DescriptionPartCreateManyInput | DescriptionPartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DescriptionPart createManyAndReturn
   */
  export type DescriptionPartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DescriptionParts.
     */
    data: DescriptionPartCreateManyInput | DescriptionPartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DescriptionPart update
   */
  export type DescriptionPartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * The data needed to update a DescriptionPart.
     */
    data: XOR<DescriptionPartUpdateInput, DescriptionPartUncheckedUpdateInput>
    /**
     * Choose, which DescriptionPart to update.
     */
    where: DescriptionPartWhereUniqueInput
  }

  /**
   * DescriptionPart updateMany
   */
  export type DescriptionPartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DescriptionParts.
     */
    data: XOR<DescriptionPartUpdateManyMutationInput, DescriptionPartUncheckedUpdateManyInput>
    /**
     * Filter which DescriptionParts to update
     */
    where?: DescriptionPartWhereInput
  }

  /**
   * DescriptionPart upsert
   */
  export type DescriptionPartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * The filter to search for the DescriptionPart to update in case it exists.
     */
    where: DescriptionPartWhereUniqueInput
    /**
     * In case the DescriptionPart found by the `where` argument doesn't exist, create a new DescriptionPart with this data.
     */
    create: XOR<DescriptionPartCreateInput, DescriptionPartUncheckedCreateInput>
    /**
     * In case the DescriptionPart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DescriptionPartUpdateInput, DescriptionPartUncheckedUpdateInput>
  }

  /**
   * DescriptionPart delete
   */
  export type DescriptionPartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
    /**
     * Filter which DescriptionPart to delete.
     */
    where: DescriptionPartWhereUniqueInput
  }

  /**
   * DescriptionPart deleteMany
   */
  export type DescriptionPartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DescriptionParts to delete
     */
    where?: DescriptionPartWhereInput
  }

  /**
   * DescriptionPart without action
   */
  export type DescriptionPartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionPart
     */
    select?: DescriptionPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionPartInclude<ExtArgs> | null
  }


  /**
   * Model Ban
   */

  export type AggregateBan = {
    _count: BanCountAggregateOutputType | null
    _min: BanMinAggregateOutputType | null
    _max: BanMaxAggregateOutputType | null
  }

  export type BanMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    moderatorId: string | null
    streamerId: string | null
    reason: string | null
    action: $Enums.banAction | null
    expiresAt: Date | null
  }

  export type BanMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    moderatorId: string | null
    streamerId: string | null
    reason: string | null
    action: $Enums.banAction | null
    expiresAt: Date | null
  }

  export type BanCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    moderatorId: number
    streamerId: number
    reason: number
    action: number
    expiresAt: number
    _all: number
  }


  export type BanMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    moderatorId?: true
    streamerId?: true
    reason?: true
    action?: true
    expiresAt?: true
  }

  export type BanMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    moderatorId?: true
    streamerId?: true
    reason?: true
    action?: true
    expiresAt?: true
  }

  export type BanCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    moderatorId?: true
    streamerId?: true
    reason?: true
    action?: true
    expiresAt?: true
    _all?: true
  }

  export type BanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ban to aggregate.
     */
    where?: BanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bans to fetch.
     */
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bans
    **/
    _count?: true | BanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BanMaxAggregateInputType
  }

  export type GetBanAggregateType<T extends BanAggregateArgs> = {
        [P in keyof T & keyof AggregateBan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBan[P]>
      : GetScalarType<T[P], AggregateBan[P]>
  }




  export type BanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanWhereInput
    orderBy?: BanOrderByWithAggregationInput | BanOrderByWithAggregationInput[]
    by: BanScalarFieldEnum[] | BanScalarFieldEnum
    having?: BanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BanCountAggregateInputType | true
    _min?: BanMinAggregateInputType
    _max?: BanMaxAggregateInputType
  }

  export type BanGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    moderatorId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt: Date | null
    _count: BanCountAggregateOutputType | null
    _min: BanMinAggregateOutputType | null
    _max: BanMaxAggregateOutputType | null
  }

  type GetBanGroupByPayload<T extends BanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BanGroupByOutputType[P]>
            : GetScalarType<T[P], BanGroupByOutputType[P]>
        }
      >
    >


  export type BanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    moderatorId?: boolean
    streamerId?: boolean
    reason?: boolean
    action?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    moderator?: boolean | ModeratorDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ban"]>

  export type BanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    moderatorId?: boolean
    streamerId?: boolean
    reason?: boolean
    action?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    moderator?: boolean | ModeratorDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ban"]>

  export type BanSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    moderatorId?: boolean
    streamerId?: boolean
    reason?: boolean
    action?: boolean
    expiresAt?: boolean
  }

  export type BanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    moderator?: boolean | ModeratorDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    moderator?: boolean | ModeratorDefaultArgs<ExtArgs>
    streamer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ban"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      moderator: Prisma.$ModeratorPayload<ExtArgs>
      streamer: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      moderatorId: string
      streamerId: string
      reason: string
      action: $Enums.banAction
      expiresAt: Date | null
    }, ExtArgs["result"]["ban"]>
    composites: {}
  }

  type BanGetPayload<S extends boolean | null | undefined | BanDefaultArgs> = $Result.GetResult<Prisma.$BanPayload, S>

  type BanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BanCountAggregateInputType | true
    }

  export interface BanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ban'], meta: { name: 'Ban' } }
    /**
     * Find zero or one Ban that matches the filter.
     * @param {BanFindUniqueArgs} args - Arguments to find a Ban
     * @example
     * // Get one Ban
     * const ban = await prisma.ban.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BanFindUniqueArgs>(args: SelectSubset<T, BanFindUniqueArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ban that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BanFindUniqueOrThrowArgs} args - Arguments to find a Ban
     * @example
     * // Get one Ban
     * const ban = await prisma.ban.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BanFindUniqueOrThrowArgs>(args: SelectSubset<T, BanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ban that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanFindFirstArgs} args - Arguments to find a Ban
     * @example
     * // Get one Ban
     * const ban = await prisma.ban.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BanFindFirstArgs>(args?: SelectSubset<T, BanFindFirstArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ban that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanFindFirstOrThrowArgs} args - Arguments to find a Ban
     * @example
     * // Get one Ban
     * const ban = await prisma.ban.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BanFindFirstOrThrowArgs>(args?: SelectSubset<T, BanFindFirstOrThrowArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Bans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bans
     * const bans = await prisma.ban.findMany()
     * 
     * // Get first 10 Bans
     * const bans = await prisma.ban.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const banWithIdOnly = await prisma.ban.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BanFindManyArgs>(args?: SelectSubset<T, BanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ban.
     * @param {BanCreateArgs} args - Arguments to create a Ban.
     * @example
     * // Create one Ban
     * const Ban = await prisma.ban.create({
     *   data: {
     *     // ... data to create a Ban
     *   }
     * })
     * 
     */
    create<T extends BanCreateArgs>(args: SelectSubset<T, BanCreateArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Bans.
     * @param {BanCreateManyArgs} args - Arguments to create many Bans.
     * @example
     * // Create many Bans
     * const ban = await prisma.ban.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BanCreateManyArgs>(args?: SelectSubset<T, BanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bans and returns the data saved in the database.
     * @param {BanCreateManyAndReturnArgs} args - Arguments to create many Bans.
     * @example
     * // Create many Bans
     * const ban = await prisma.ban.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bans and only return the `id`
     * const banWithIdOnly = await prisma.ban.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BanCreateManyAndReturnArgs>(args?: SelectSubset<T, BanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ban.
     * @param {BanDeleteArgs} args - Arguments to delete one Ban.
     * @example
     * // Delete one Ban
     * const Ban = await prisma.ban.delete({
     *   where: {
     *     // ... filter to delete one Ban
     *   }
     * })
     * 
     */
    delete<T extends BanDeleteArgs>(args: SelectSubset<T, BanDeleteArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ban.
     * @param {BanUpdateArgs} args - Arguments to update one Ban.
     * @example
     * // Update one Ban
     * const ban = await prisma.ban.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BanUpdateArgs>(args: SelectSubset<T, BanUpdateArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Bans.
     * @param {BanDeleteManyArgs} args - Arguments to filter Bans to delete.
     * @example
     * // Delete a few Bans
     * const { count } = await prisma.ban.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BanDeleteManyArgs>(args?: SelectSubset<T, BanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bans
     * const ban = await prisma.ban.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BanUpdateManyArgs>(args: SelectSubset<T, BanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ban.
     * @param {BanUpsertArgs} args - Arguments to update or create a Ban.
     * @example
     * // Update or create a Ban
     * const ban = await prisma.ban.upsert({
     *   create: {
     *     // ... data to create a Ban
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ban we want to update
     *   }
     * })
     */
    upsert<T extends BanUpsertArgs>(args: SelectSubset<T, BanUpsertArgs<ExtArgs>>): Prisma__BanClient<$Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Bans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanCountArgs} args - Arguments to filter Bans to count.
     * @example
     * // Count the number of Bans
     * const count = await prisma.ban.count({
     *   where: {
     *     // ... the filter for the Bans we want to count
     *   }
     * })
    **/
    count<T extends BanCountArgs>(
      args?: Subset<T, BanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ban.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BanAggregateArgs>(args: Subset<T, BanAggregateArgs>): Prisma.PrismaPromise<GetBanAggregateType<T>>

    /**
     * Group by Ban.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BanGroupByArgs['orderBy'] }
        : { orderBy?: BanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ban model
   */
  readonly fields: BanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ban.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    moderator<T extends ModeratorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ModeratorDefaultArgs<ExtArgs>>): Prisma__ModeratorClient<$Result.GetResult<Prisma.$ModeratorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    streamer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ban model
   */ 
  interface BanFieldRefs {
    readonly id: FieldRef<"Ban", 'String'>
    readonly createdAt: FieldRef<"Ban", 'DateTime'>
    readonly updatedAt: FieldRef<"Ban", 'DateTime'>
    readonly userId: FieldRef<"Ban", 'String'>
    readonly moderatorId: FieldRef<"Ban", 'String'>
    readonly streamerId: FieldRef<"Ban", 'String'>
    readonly reason: FieldRef<"Ban", 'String'>
    readonly action: FieldRef<"Ban", 'banAction'>
    readonly expiresAt: FieldRef<"Ban", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ban findUnique
   */
  export type BanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter, which Ban to fetch.
     */
    where: BanWhereUniqueInput
  }

  /**
   * Ban findUniqueOrThrow
   */
  export type BanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter, which Ban to fetch.
     */
    where: BanWhereUniqueInput
  }

  /**
   * Ban findFirst
   */
  export type BanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter, which Ban to fetch.
     */
    where?: BanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bans to fetch.
     */
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bans.
     */
    cursor?: BanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bans.
     */
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * Ban findFirstOrThrow
   */
  export type BanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter, which Ban to fetch.
     */
    where?: BanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bans to fetch.
     */
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bans.
     */
    cursor?: BanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bans.
     */
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * Ban findMany
   */
  export type BanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter, which Bans to fetch.
     */
    where?: BanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bans to fetch.
     */
    orderBy?: BanOrderByWithRelationInput | BanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bans.
     */
    cursor?: BanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bans.
     */
    skip?: number
    distinct?: BanScalarFieldEnum | BanScalarFieldEnum[]
  }

  /**
   * Ban create
   */
  export type BanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * The data needed to create a Ban.
     */
    data: XOR<BanCreateInput, BanUncheckedCreateInput>
  }

  /**
   * Ban createMany
   */
  export type BanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bans.
     */
    data: BanCreateManyInput | BanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ban createManyAndReturn
   */
  export type BanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Bans.
     */
    data: BanCreateManyInput | BanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ban update
   */
  export type BanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * The data needed to update a Ban.
     */
    data: XOR<BanUpdateInput, BanUncheckedUpdateInput>
    /**
     * Choose, which Ban to update.
     */
    where: BanWhereUniqueInput
  }

  /**
   * Ban updateMany
   */
  export type BanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bans.
     */
    data: XOR<BanUpdateManyMutationInput, BanUncheckedUpdateManyInput>
    /**
     * Filter which Bans to update
     */
    where?: BanWhereInput
  }

  /**
   * Ban upsert
   */
  export type BanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * The filter to search for the Ban to update in case it exists.
     */
    where: BanWhereUniqueInput
    /**
     * In case the Ban found by the `where` argument doesn't exist, create a new Ban with this data.
     */
    create: XOR<BanCreateInput, BanUncheckedCreateInput>
    /**
     * In case the Ban was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BanUpdateInput, BanUncheckedUpdateInput>
  }

  /**
   * Ban delete
   */
  export type BanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
    /**
     * Filter which Ban to delete.
     */
    where: BanWhereUniqueInput
  }

  /**
   * Ban deleteMany
   */
  export type BanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bans to delete
     */
    where?: BanWhereInput
  }

  /**
   * Ban without action
   */
  export type BanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ban
     */
    select?: BanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BanInclude<ExtArgs> | null
  }


  /**
   * Model StreamerCurrency
   */

  export type AggregateStreamerCurrency = {
    _count: StreamerCurrencyCountAggregateOutputType | null
    _min: StreamerCurrencyMinAggregateOutputType | null
    _max: StreamerCurrencyMaxAggregateOutputType | null
  }

  export type StreamerCurrencyMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
    userId: string | null
  }

  export type StreamerCurrencyMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
    userId: string | null
  }

  export type StreamerCurrencyCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    image: number
    userId: number
    _all: number
  }


  export type StreamerCurrencyMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    userId?: true
  }

  export type StreamerCurrencyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    userId?: true
  }

  export type StreamerCurrencyCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    userId?: true
    _all?: true
  }

  export type StreamerCurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StreamerCurrency to aggregate.
     */
    where?: StreamerCurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamerCurrencies to fetch.
     */
    orderBy?: StreamerCurrencyOrderByWithRelationInput | StreamerCurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StreamerCurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamerCurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamerCurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StreamerCurrencies
    **/
    _count?: true | StreamerCurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamerCurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamerCurrencyMaxAggregateInputType
  }

  export type GetStreamerCurrencyAggregateType<T extends StreamerCurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateStreamerCurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStreamerCurrency[P]>
      : GetScalarType<T[P], AggregateStreamerCurrency[P]>
  }




  export type StreamerCurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamerCurrencyWhereInput
    orderBy?: StreamerCurrencyOrderByWithAggregationInput | StreamerCurrencyOrderByWithAggregationInput[]
    by: StreamerCurrencyScalarFieldEnum[] | StreamerCurrencyScalarFieldEnum
    having?: StreamerCurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamerCurrencyCountAggregateInputType | true
    _min?: StreamerCurrencyMinAggregateInputType
    _max?: StreamerCurrencyMaxAggregateInputType
  }

  export type StreamerCurrencyGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    image: string
    userId: string
    _count: StreamerCurrencyCountAggregateOutputType | null
    _min: StreamerCurrencyMinAggregateOutputType | null
    _max: StreamerCurrencyMaxAggregateOutputType | null
  }

  type GetStreamerCurrencyGroupByPayload<T extends StreamerCurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StreamerCurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamerCurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamerCurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], StreamerCurrencyGroupByOutputType[P]>
        }
      >
    >


  export type StreamerCurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    userId?: boolean
    currencyBalances?: boolean | StreamerCurrency$currencyBalancesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StreamerCurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["streamerCurrency"]>

  export type StreamerCurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["streamerCurrency"]>

  export type StreamerCurrencySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    userId?: boolean
  }

  export type StreamerCurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currencyBalances?: boolean | StreamerCurrency$currencyBalancesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StreamerCurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StreamerCurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StreamerCurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StreamerCurrency"
    objects: {
      currencyBalances: Prisma.$CurrencyBalancePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      image: string
      userId: string
    }, ExtArgs["result"]["streamerCurrency"]>
    composites: {}
  }

  type StreamerCurrencyGetPayload<S extends boolean | null | undefined | StreamerCurrencyDefaultArgs> = $Result.GetResult<Prisma.$StreamerCurrencyPayload, S>

  type StreamerCurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StreamerCurrencyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StreamerCurrencyCountAggregateInputType | true
    }

  export interface StreamerCurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StreamerCurrency'], meta: { name: 'StreamerCurrency' } }
    /**
     * Find zero or one StreamerCurrency that matches the filter.
     * @param {StreamerCurrencyFindUniqueArgs} args - Arguments to find a StreamerCurrency
     * @example
     * // Get one StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StreamerCurrencyFindUniqueArgs>(args: SelectSubset<T, StreamerCurrencyFindUniqueArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StreamerCurrency that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StreamerCurrencyFindUniqueOrThrowArgs} args - Arguments to find a StreamerCurrency
     * @example
     * // Get one StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StreamerCurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, StreamerCurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StreamerCurrency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyFindFirstArgs} args - Arguments to find a StreamerCurrency
     * @example
     * // Get one StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StreamerCurrencyFindFirstArgs>(args?: SelectSubset<T, StreamerCurrencyFindFirstArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StreamerCurrency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyFindFirstOrThrowArgs} args - Arguments to find a StreamerCurrency
     * @example
     * // Get one StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StreamerCurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, StreamerCurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StreamerCurrencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StreamerCurrencies
     * const streamerCurrencies = await prisma.streamerCurrency.findMany()
     * 
     * // Get first 10 StreamerCurrencies
     * const streamerCurrencies = await prisma.streamerCurrency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamerCurrencyWithIdOnly = await prisma.streamerCurrency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StreamerCurrencyFindManyArgs>(args?: SelectSubset<T, StreamerCurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StreamerCurrency.
     * @param {StreamerCurrencyCreateArgs} args - Arguments to create a StreamerCurrency.
     * @example
     * // Create one StreamerCurrency
     * const StreamerCurrency = await prisma.streamerCurrency.create({
     *   data: {
     *     // ... data to create a StreamerCurrency
     *   }
     * })
     * 
     */
    create<T extends StreamerCurrencyCreateArgs>(args: SelectSubset<T, StreamerCurrencyCreateArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StreamerCurrencies.
     * @param {StreamerCurrencyCreateManyArgs} args - Arguments to create many StreamerCurrencies.
     * @example
     * // Create many StreamerCurrencies
     * const streamerCurrency = await prisma.streamerCurrency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StreamerCurrencyCreateManyArgs>(args?: SelectSubset<T, StreamerCurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StreamerCurrencies and returns the data saved in the database.
     * @param {StreamerCurrencyCreateManyAndReturnArgs} args - Arguments to create many StreamerCurrencies.
     * @example
     * // Create many StreamerCurrencies
     * const streamerCurrency = await prisma.streamerCurrency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StreamerCurrencies and only return the `id`
     * const streamerCurrencyWithIdOnly = await prisma.streamerCurrency.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StreamerCurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, StreamerCurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StreamerCurrency.
     * @param {StreamerCurrencyDeleteArgs} args - Arguments to delete one StreamerCurrency.
     * @example
     * // Delete one StreamerCurrency
     * const StreamerCurrency = await prisma.streamerCurrency.delete({
     *   where: {
     *     // ... filter to delete one StreamerCurrency
     *   }
     * })
     * 
     */
    delete<T extends StreamerCurrencyDeleteArgs>(args: SelectSubset<T, StreamerCurrencyDeleteArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StreamerCurrency.
     * @param {StreamerCurrencyUpdateArgs} args - Arguments to update one StreamerCurrency.
     * @example
     * // Update one StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StreamerCurrencyUpdateArgs>(args: SelectSubset<T, StreamerCurrencyUpdateArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StreamerCurrencies.
     * @param {StreamerCurrencyDeleteManyArgs} args - Arguments to filter StreamerCurrencies to delete.
     * @example
     * // Delete a few StreamerCurrencies
     * const { count } = await prisma.streamerCurrency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StreamerCurrencyDeleteManyArgs>(args?: SelectSubset<T, StreamerCurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StreamerCurrencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StreamerCurrencies
     * const streamerCurrency = await prisma.streamerCurrency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StreamerCurrencyUpdateManyArgs>(args: SelectSubset<T, StreamerCurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StreamerCurrency.
     * @param {StreamerCurrencyUpsertArgs} args - Arguments to update or create a StreamerCurrency.
     * @example
     * // Update or create a StreamerCurrency
     * const streamerCurrency = await prisma.streamerCurrency.upsert({
     *   create: {
     *     // ... data to create a StreamerCurrency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StreamerCurrency we want to update
     *   }
     * })
     */
    upsert<T extends StreamerCurrencyUpsertArgs>(args: SelectSubset<T, StreamerCurrencyUpsertArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StreamerCurrencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyCountArgs} args - Arguments to filter StreamerCurrencies to count.
     * @example
     * // Count the number of StreamerCurrencies
     * const count = await prisma.streamerCurrency.count({
     *   where: {
     *     // ... the filter for the StreamerCurrencies we want to count
     *   }
     * })
    **/
    count<T extends StreamerCurrencyCountArgs>(
      args?: Subset<T, StreamerCurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamerCurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StreamerCurrency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamerCurrencyAggregateArgs>(args: Subset<T, StreamerCurrencyAggregateArgs>): Prisma.PrismaPromise<GetStreamerCurrencyAggregateType<T>>

    /**
     * Group by StreamerCurrency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamerCurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamerCurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamerCurrencyGroupByArgs['orderBy'] }
        : { orderBy?: StreamerCurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamerCurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamerCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StreamerCurrency model
   */
  readonly fields: StreamerCurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StreamerCurrency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StreamerCurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currencyBalances<T extends StreamerCurrency$currencyBalancesArgs<ExtArgs> = {}>(args?: Subset<T, StreamerCurrency$currencyBalancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StreamerCurrency model
   */ 
  interface StreamerCurrencyFieldRefs {
    readonly id: FieldRef<"StreamerCurrency", 'String'>
    readonly createdAt: FieldRef<"StreamerCurrency", 'DateTime'>
    readonly updatedAt: FieldRef<"StreamerCurrency", 'DateTime'>
    readonly name: FieldRef<"StreamerCurrency", 'String'>
    readonly image: FieldRef<"StreamerCurrency", 'String'>
    readonly userId: FieldRef<"StreamerCurrency", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StreamerCurrency findUnique
   */
  export type StreamerCurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter, which StreamerCurrency to fetch.
     */
    where: StreamerCurrencyWhereUniqueInput
  }

  /**
   * StreamerCurrency findUniqueOrThrow
   */
  export type StreamerCurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter, which StreamerCurrency to fetch.
     */
    where: StreamerCurrencyWhereUniqueInput
  }

  /**
   * StreamerCurrency findFirst
   */
  export type StreamerCurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter, which StreamerCurrency to fetch.
     */
    where?: StreamerCurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamerCurrencies to fetch.
     */
    orderBy?: StreamerCurrencyOrderByWithRelationInput | StreamerCurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StreamerCurrencies.
     */
    cursor?: StreamerCurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamerCurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamerCurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StreamerCurrencies.
     */
    distinct?: StreamerCurrencyScalarFieldEnum | StreamerCurrencyScalarFieldEnum[]
  }

  /**
   * StreamerCurrency findFirstOrThrow
   */
  export type StreamerCurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter, which StreamerCurrency to fetch.
     */
    where?: StreamerCurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamerCurrencies to fetch.
     */
    orderBy?: StreamerCurrencyOrderByWithRelationInput | StreamerCurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StreamerCurrencies.
     */
    cursor?: StreamerCurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamerCurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamerCurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StreamerCurrencies.
     */
    distinct?: StreamerCurrencyScalarFieldEnum | StreamerCurrencyScalarFieldEnum[]
  }

  /**
   * StreamerCurrency findMany
   */
  export type StreamerCurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter, which StreamerCurrencies to fetch.
     */
    where?: StreamerCurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamerCurrencies to fetch.
     */
    orderBy?: StreamerCurrencyOrderByWithRelationInput | StreamerCurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StreamerCurrencies.
     */
    cursor?: StreamerCurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamerCurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamerCurrencies.
     */
    skip?: number
    distinct?: StreamerCurrencyScalarFieldEnum | StreamerCurrencyScalarFieldEnum[]
  }

  /**
   * StreamerCurrency create
   */
  export type StreamerCurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a StreamerCurrency.
     */
    data: XOR<StreamerCurrencyCreateInput, StreamerCurrencyUncheckedCreateInput>
  }

  /**
   * StreamerCurrency createMany
   */
  export type StreamerCurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StreamerCurrencies.
     */
    data: StreamerCurrencyCreateManyInput | StreamerCurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StreamerCurrency createManyAndReturn
   */
  export type StreamerCurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StreamerCurrencies.
     */
    data: StreamerCurrencyCreateManyInput | StreamerCurrencyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StreamerCurrency update
   */
  export type StreamerCurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a StreamerCurrency.
     */
    data: XOR<StreamerCurrencyUpdateInput, StreamerCurrencyUncheckedUpdateInput>
    /**
     * Choose, which StreamerCurrency to update.
     */
    where: StreamerCurrencyWhereUniqueInput
  }

  /**
   * StreamerCurrency updateMany
   */
  export type StreamerCurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StreamerCurrencies.
     */
    data: XOR<StreamerCurrencyUpdateManyMutationInput, StreamerCurrencyUncheckedUpdateManyInput>
    /**
     * Filter which StreamerCurrencies to update
     */
    where?: StreamerCurrencyWhereInput
  }

  /**
   * StreamerCurrency upsert
   */
  export type StreamerCurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the StreamerCurrency to update in case it exists.
     */
    where: StreamerCurrencyWhereUniqueInput
    /**
     * In case the StreamerCurrency found by the `where` argument doesn't exist, create a new StreamerCurrency with this data.
     */
    create: XOR<StreamerCurrencyCreateInput, StreamerCurrencyUncheckedCreateInput>
    /**
     * In case the StreamerCurrency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StreamerCurrencyUpdateInput, StreamerCurrencyUncheckedUpdateInput>
  }

  /**
   * StreamerCurrency delete
   */
  export type StreamerCurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    /**
     * Filter which StreamerCurrency to delete.
     */
    where: StreamerCurrencyWhereUniqueInput
  }

  /**
   * StreamerCurrency deleteMany
   */
  export type StreamerCurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StreamerCurrencies to delete
     */
    where?: StreamerCurrencyWhereInput
  }

  /**
   * StreamerCurrency.currencyBalances
   */
  export type StreamerCurrency$currencyBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    where?: CurrencyBalanceWhereInput
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    cursor?: CurrencyBalanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurrencyBalanceScalarFieldEnum | CurrencyBalanceScalarFieldEnum[]
  }

  /**
   * StreamerCurrency without action
   */
  export type StreamerCurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
  }


  /**
   * Model CurrencyBalance
   */

  export type AggregateCurrencyBalance = {
    _count: CurrencyBalanceCountAggregateOutputType | null
    _avg: CurrencyBalanceAvgAggregateOutputType | null
    _sum: CurrencyBalanceSumAggregateOutputType | null
    _min: CurrencyBalanceMinAggregateOutputType | null
    _max: CurrencyBalanceMaxAggregateOutputType | null
  }

  export type CurrencyBalanceAvgAggregateOutputType = {
    count: number | null
  }

  export type CurrencyBalanceSumAggregateOutputType = {
    count: number | null
  }

  export type CurrencyBalanceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    streamerCurrencyId: string | null
    count: number | null
    userId: string | null
  }

  export type CurrencyBalanceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    streamerCurrencyId: string | null
    count: number | null
    userId: string | null
  }

  export type CurrencyBalanceCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    streamerCurrencyId: number
    count: number
    userId: number
    _all: number
  }


  export type CurrencyBalanceAvgAggregateInputType = {
    count?: true
  }

  export type CurrencyBalanceSumAggregateInputType = {
    count?: true
  }

  export type CurrencyBalanceMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamerCurrencyId?: true
    count?: true
    userId?: true
  }

  export type CurrencyBalanceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamerCurrencyId?: true
    count?: true
    userId?: true
  }

  export type CurrencyBalanceCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamerCurrencyId?: true
    count?: true
    userId?: true
    _all?: true
  }

  export type CurrencyBalanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CurrencyBalance to aggregate.
     */
    where?: CurrencyBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrencyBalances to fetch.
     */
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrencyBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrencyBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrencyBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CurrencyBalances
    **/
    _count?: true | CurrencyBalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrencyBalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrencyBalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrencyBalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrencyBalanceMaxAggregateInputType
  }

  export type GetCurrencyBalanceAggregateType<T extends CurrencyBalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrencyBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrencyBalance[P]>
      : GetScalarType<T[P], AggregateCurrencyBalance[P]>
  }




  export type CurrencyBalanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrencyBalanceWhereInput
    orderBy?: CurrencyBalanceOrderByWithAggregationInput | CurrencyBalanceOrderByWithAggregationInput[]
    by: CurrencyBalanceScalarFieldEnum[] | CurrencyBalanceScalarFieldEnum
    having?: CurrencyBalanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrencyBalanceCountAggregateInputType | true
    _avg?: CurrencyBalanceAvgAggregateInputType
    _sum?: CurrencyBalanceSumAggregateInputType
    _min?: CurrencyBalanceMinAggregateInputType
    _max?: CurrencyBalanceMaxAggregateInputType
  }

  export type CurrencyBalanceGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    streamerCurrencyId: string | null
    count: number
    userId: string
    _count: CurrencyBalanceCountAggregateOutputType | null
    _avg: CurrencyBalanceAvgAggregateOutputType | null
    _sum: CurrencyBalanceSumAggregateOutputType | null
    _min: CurrencyBalanceMinAggregateOutputType | null
    _max: CurrencyBalanceMaxAggregateOutputType | null
  }

  type GetCurrencyBalanceGroupByPayload<T extends CurrencyBalanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrencyBalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrencyBalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrencyBalanceGroupByOutputType[P]>
            : GetScalarType<T[P], CurrencyBalanceGroupByOutputType[P]>
        }
      >
    >


  export type CurrencyBalanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamerCurrencyId?: boolean
    count?: boolean
    userId?: boolean
    streamerCurrency?: boolean | CurrencyBalance$streamerCurrencyArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currencyBalance"]>

  export type CurrencyBalanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamerCurrencyId?: boolean
    count?: boolean
    userId?: boolean
    streamerCurrency?: boolean | CurrencyBalance$streamerCurrencyArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currencyBalance"]>

  export type CurrencyBalanceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamerCurrencyId?: boolean
    count?: boolean
    userId?: boolean
  }

  export type CurrencyBalanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    streamerCurrency?: boolean | CurrencyBalance$streamerCurrencyArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CurrencyBalanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    streamerCurrency?: boolean | CurrencyBalance$streamerCurrencyArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CurrencyBalancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CurrencyBalance"
    objects: {
      streamerCurrency: Prisma.$StreamerCurrencyPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      streamerCurrencyId: string | null
      count: number
      userId: string
    }, ExtArgs["result"]["currencyBalance"]>
    composites: {}
  }

  type CurrencyBalanceGetPayload<S extends boolean | null | undefined | CurrencyBalanceDefaultArgs> = $Result.GetResult<Prisma.$CurrencyBalancePayload, S>

  type CurrencyBalanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CurrencyBalanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CurrencyBalanceCountAggregateInputType | true
    }

  export interface CurrencyBalanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CurrencyBalance'], meta: { name: 'CurrencyBalance' } }
    /**
     * Find zero or one CurrencyBalance that matches the filter.
     * @param {CurrencyBalanceFindUniqueArgs} args - Arguments to find a CurrencyBalance
     * @example
     * // Get one CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrencyBalanceFindUniqueArgs>(args: SelectSubset<T, CurrencyBalanceFindUniqueArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CurrencyBalance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CurrencyBalanceFindUniqueOrThrowArgs} args - Arguments to find a CurrencyBalance
     * @example
     * // Get one CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrencyBalanceFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrencyBalanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CurrencyBalance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceFindFirstArgs} args - Arguments to find a CurrencyBalance
     * @example
     * // Get one CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrencyBalanceFindFirstArgs>(args?: SelectSubset<T, CurrencyBalanceFindFirstArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CurrencyBalance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceFindFirstOrThrowArgs} args - Arguments to find a CurrencyBalance
     * @example
     * // Get one CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrencyBalanceFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrencyBalanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CurrencyBalances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CurrencyBalances
     * const currencyBalances = await prisma.currencyBalance.findMany()
     * 
     * // Get first 10 CurrencyBalances
     * const currencyBalances = await prisma.currencyBalance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currencyBalanceWithIdOnly = await prisma.currencyBalance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrencyBalanceFindManyArgs>(args?: SelectSubset<T, CurrencyBalanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CurrencyBalance.
     * @param {CurrencyBalanceCreateArgs} args - Arguments to create a CurrencyBalance.
     * @example
     * // Create one CurrencyBalance
     * const CurrencyBalance = await prisma.currencyBalance.create({
     *   data: {
     *     // ... data to create a CurrencyBalance
     *   }
     * })
     * 
     */
    create<T extends CurrencyBalanceCreateArgs>(args: SelectSubset<T, CurrencyBalanceCreateArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CurrencyBalances.
     * @param {CurrencyBalanceCreateManyArgs} args - Arguments to create many CurrencyBalances.
     * @example
     * // Create many CurrencyBalances
     * const currencyBalance = await prisma.currencyBalance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrencyBalanceCreateManyArgs>(args?: SelectSubset<T, CurrencyBalanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CurrencyBalances and returns the data saved in the database.
     * @param {CurrencyBalanceCreateManyAndReturnArgs} args - Arguments to create many CurrencyBalances.
     * @example
     * // Create many CurrencyBalances
     * const currencyBalance = await prisma.currencyBalance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CurrencyBalances and only return the `id`
     * const currencyBalanceWithIdOnly = await prisma.currencyBalance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrencyBalanceCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrencyBalanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CurrencyBalance.
     * @param {CurrencyBalanceDeleteArgs} args - Arguments to delete one CurrencyBalance.
     * @example
     * // Delete one CurrencyBalance
     * const CurrencyBalance = await prisma.currencyBalance.delete({
     *   where: {
     *     // ... filter to delete one CurrencyBalance
     *   }
     * })
     * 
     */
    delete<T extends CurrencyBalanceDeleteArgs>(args: SelectSubset<T, CurrencyBalanceDeleteArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CurrencyBalance.
     * @param {CurrencyBalanceUpdateArgs} args - Arguments to update one CurrencyBalance.
     * @example
     * // Update one CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrencyBalanceUpdateArgs>(args: SelectSubset<T, CurrencyBalanceUpdateArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CurrencyBalances.
     * @param {CurrencyBalanceDeleteManyArgs} args - Arguments to filter CurrencyBalances to delete.
     * @example
     * // Delete a few CurrencyBalances
     * const { count } = await prisma.currencyBalance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrencyBalanceDeleteManyArgs>(args?: SelectSubset<T, CurrencyBalanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CurrencyBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CurrencyBalances
     * const currencyBalance = await prisma.currencyBalance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrencyBalanceUpdateManyArgs>(args: SelectSubset<T, CurrencyBalanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CurrencyBalance.
     * @param {CurrencyBalanceUpsertArgs} args - Arguments to update or create a CurrencyBalance.
     * @example
     * // Update or create a CurrencyBalance
     * const currencyBalance = await prisma.currencyBalance.upsert({
     *   create: {
     *     // ... data to create a CurrencyBalance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CurrencyBalance we want to update
     *   }
     * })
     */
    upsert<T extends CurrencyBalanceUpsertArgs>(args: SelectSubset<T, CurrencyBalanceUpsertArgs<ExtArgs>>): Prisma__CurrencyBalanceClient<$Result.GetResult<Prisma.$CurrencyBalancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CurrencyBalances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceCountArgs} args - Arguments to filter CurrencyBalances to count.
     * @example
     * // Count the number of CurrencyBalances
     * const count = await prisma.currencyBalance.count({
     *   where: {
     *     // ... the filter for the CurrencyBalances we want to count
     *   }
     * })
    **/
    count<T extends CurrencyBalanceCountArgs>(
      args?: Subset<T, CurrencyBalanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrencyBalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CurrencyBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrencyBalanceAggregateArgs>(args: Subset<T, CurrencyBalanceAggregateArgs>): Prisma.PrismaPromise<GetCurrencyBalanceAggregateType<T>>

    /**
     * Group by CurrencyBalance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrencyBalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrencyBalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrencyBalanceGroupByArgs['orderBy'] }
        : { orderBy?: CurrencyBalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrencyBalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrencyBalanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CurrencyBalance model
   */
  readonly fields: CurrencyBalanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CurrencyBalance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrencyBalanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    streamerCurrency<T extends CurrencyBalance$streamerCurrencyArgs<ExtArgs> = {}>(args?: Subset<T, CurrencyBalance$streamerCurrencyArgs<ExtArgs>>): Prisma__StreamerCurrencyClient<$Result.GetResult<Prisma.$StreamerCurrencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CurrencyBalance model
   */ 
  interface CurrencyBalanceFieldRefs {
    readonly id: FieldRef<"CurrencyBalance", 'String'>
    readonly createdAt: FieldRef<"CurrencyBalance", 'DateTime'>
    readonly updatedAt: FieldRef<"CurrencyBalance", 'DateTime'>
    readonly streamerCurrencyId: FieldRef<"CurrencyBalance", 'String'>
    readonly count: FieldRef<"CurrencyBalance", 'Int'>
    readonly userId: FieldRef<"CurrencyBalance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CurrencyBalance findUnique
   */
  export type CurrencyBalanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter, which CurrencyBalance to fetch.
     */
    where: CurrencyBalanceWhereUniqueInput
  }

  /**
   * CurrencyBalance findUniqueOrThrow
   */
  export type CurrencyBalanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter, which CurrencyBalance to fetch.
     */
    where: CurrencyBalanceWhereUniqueInput
  }

  /**
   * CurrencyBalance findFirst
   */
  export type CurrencyBalanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter, which CurrencyBalance to fetch.
     */
    where?: CurrencyBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrencyBalances to fetch.
     */
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CurrencyBalances.
     */
    cursor?: CurrencyBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrencyBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrencyBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CurrencyBalances.
     */
    distinct?: CurrencyBalanceScalarFieldEnum | CurrencyBalanceScalarFieldEnum[]
  }

  /**
   * CurrencyBalance findFirstOrThrow
   */
  export type CurrencyBalanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter, which CurrencyBalance to fetch.
     */
    where?: CurrencyBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrencyBalances to fetch.
     */
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CurrencyBalances.
     */
    cursor?: CurrencyBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrencyBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrencyBalances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CurrencyBalances.
     */
    distinct?: CurrencyBalanceScalarFieldEnum | CurrencyBalanceScalarFieldEnum[]
  }

  /**
   * CurrencyBalance findMany
   */
  export type CurrencyBalanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter, which CurrencyBalances to fetch.
     */
    where?: CurrencyBalanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrencyBalances to fetch.
     */
    orderBy?: CurrencyBalanceOrderByWithRelationInput | CurrencyBalanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CurrencyBalances.
     */
    cursor?: CurrencyBalanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrencyBalances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrencyBalances.
     */
    skip?: number
    distinct?: CurrencyBalanceScalarFieldEnum | CurrencyBalanceScalarFieldEnum[]
  }

  /**
   * CurrencyBalance create
   */
  export type CurrencyBalanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * The data needed to create a CurrencyBalance.
     */
    data: XOR<CurrencyBalanceCreateInput, CurrencyBalanceUncheckedCreateInput>
  }

  /**
   * CurrencyBalance createMany
   */
  export type CurrencyBalanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CurrencyBalances.
     */
    data: CurrencyBalanceCreateManyInput | CurrencyBalanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CurrencyBalance createManyAndReturn
   */
  export type CurrencyBalanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CurrencyBalances.
     */
    data: CurrencyBalanceCreateManyInput | CurrencyBalanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CurrencyBalance update
   */
  export type CurrencyBalanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * The data needed to update a CurrencyBalance.
     */
    data: XOR<CurrencyBalanceUpdateInput, CurrencyBalanceUncheckedUpdateInput>
    /**
     * Choose, which CurrencyBalance to update.
     */
    where: CurrencyBalanceWhereUniqueInput
  }

  /**
   * CurrencyBalance updateMany
   */
  export type CurrencyBalanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CurrencyBalances.
     */
    data: XOR<CurrencyBalanceUpdateManyMutationInput, CurrencyBalanceUncheckedUpdateManyInput>
    /**
     * Filter which CurrencyBalances to update
     */
    where?: CurrencyBalanceWhereInput
  }

  /**
   * CurrencyBalance upsert
   */
  export type CurrencyBalanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * The filter to search for the CurrencyBalance to update in case it exists.
     */
    where: CurrencyBalanceWhereUniqueInput
    /**
     * In case the CurrencyBalance found by the `where` argument doesn't exist, create a new CurrencyBalance with this data.
     */
    create: XOR<CurrencyBalanceCreateInput, CurrencyBalanceUncheckedCreateInput>
    /**
     * In case the CurrencyBalance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrencyBalanceUpdateInput, CurrencyBalanceUncheckedUpdateInput>
  }

  /**
   * CurrencyBalance delete
   */
  export type CurrencyBalanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
    /**
     * Filter which CurrencyBalance to delete.
     */
    where: CurrencyBalanceWhereUniqueInput
  }

  /**
   * CurrencyBalance deleteMany
   */
  export type CurrencyBalanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CurrencyBalances to delete
     */
    where?: CurrencyBalanceWhereInput
  }

  /**
   * CurrencyBalance.streamerCurrency
   */
  export type CurrencyBalance$streamerCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamerCurrency
     */
    select?: StreamerCurrencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamerCurrencyInclude<ExtArgs> | null
    where?: StreamerCurrencyWhereInput
  }

  /**
   * CurrencyBalance without action
   */
  export type CurrencyBalanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrencyBalance
     */
    select?: CurrencyBalanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrencyBalanceInclude<ExtArgs> | null
  }


  /**
   * Model UserReward
   */

  export type AggregateUserReward = {
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  export type UserRewardAvgAggregateOutputType = {
    price: number | null
  }

  export type UserRewardSumAggregateOutputType = {
    price: number | null
  }

  export type UserRewardMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    image: string | null
    description: string | null
    name: string | null
    price: number | null
  }

  export type UserRewardMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    image: string | null
    description: string | null
    name: string | null
    price: number | null
  }

  export type UserRewardCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    image: number
    description: number
    name: number
    price: number
    _all: number
  }


  export type UserRewardAvgAggregateInputType = {
    price?: true
  }

  export type UserRewardSumAggregateInputType = {
    price?: true
  }

  export type UserRewardMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    name?: true
    price?: true
  }

  export type UserRewardMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    name?: true
    price?: true
  }

  export type UserRewardCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    image?: true
    description?: true
    name?: true
    price?: true
    _all?: true
  }

  export type UserRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReward to aggregate.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRewards
    **/
    _count?: true | UserRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRewardMaxAggregateInputType
  }

  export type GetUserRewardAggregateType<T extends UserRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReward[P]>
      : GetScalarType<T[P], AggregateUserReward[P]>
  }




  export type UserRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithAggregationInput | UserRewardOrderByWithAggregationInput[]
    by: UserRewardScalarFieldEnum[] | UserRewardScalarFieldEnum
    having?: UserRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRewardCountAggregateInputType | true
    _avg?: UserRewardAvgAggregateInputType
    _sum?: UserRewardSumAggregateInputType
    _min?: UserRewardMinAggregateInputType
    _max?: UserRewardMaxAggregateInputType
  }

  export type UserRewardGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    image: string
    description: string
    name: string
    price: number
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  type GetUserRewardGroupByPayload<T extends UserRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
            : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
        }
      >
    >


  export type UserRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    name?: boolean
    price?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    BuyerRewards?: boolean | UserReward$BuyerRewardsArgs<ExtArgs>
    _count?: boolean | UserRewardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    name?: boolean
    price?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    image?: boolean
    description?: boolean
    name?: boolean
    price?: boolean
  }

  export type UserRewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    BuyerRewards?: boolean | UserReward$BuyerRewardsArgs<ExtArgs>
    _count?: boolean | UserRewardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserRewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserReward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      BuyerRewards: Prisma.$BuyerRewardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      image: string
      description: string
      name: string
      price: number
    }, ExtArgs["result"]["userReward"]>
    composites: {}
  }

  type UserRewardGetPayload<S extends boolean | null | undefined | UserRewardDefaultArgs> = $Result.GetResult<Prisma.$UserRewardPayload, S>

  type UserRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRewardCountAggregateInputType | true
    }

  export interface UserRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserReward'], meta: { name: 'UserReward' } }
    /**
     * Find zero or one UserReward that matches the filter.
     * @param {UserRewardFindUniqueArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRewardFindUniqueArgs>(args: SelectSubset<T, UserRewardFindUniqueArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserReward that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRewardFindUniqueOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRewardFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRewardFindFirstArgs>(args?: SelectSubset<T, UserRewardFindFirstArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRewardFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRewards
     * const userRewards = await prisma.userReward.findMany()
     * 
     * // Get first 10 UserRewards
     * const userRewards = await prisma.userReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRewardWithIdOnly = await prisma.userReward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRewardFindManyArgs>(args?: SelectSubset<T, UserRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserReward.
     * @param {UserRewardCreateArgs} args - Arguments to create a UserReward.
     * @example
     * // Create one UserReward
     * const UserReward = await prisma.userReward.create({
     *   data: {
     *     // ... data to create a UserReward
     *   }
     * })
     * 
     */
    create<T extends UserRewardCreateArgs>(args: SelectSubset<T, UserRewardCreateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRewards.
     * @param {UserRewardCreateManyArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRewardCreateManyArgs>(args?: SelectSubset<T, UserRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRewards and returns the data saved in the database.
     * @param {UserRewardCreateManyAndReturnArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRewards and only return the `id`
     * const userRewardWithIdOnly = await prisma.userReward.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRewardCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserReward.
     * @param {UserRewardDeleteArgs} args - Arguments to delete one UserReward.
     * @example
     * // Delete one UserReward
     * const UserReward = await prisma.userReward.delete({
     *   where: {
     *     // ... filter to delete one UserReward
     *   }
     * })
     * 
     */
    delete<T extends UserRewardDeleteArgs>(args: SelectSubset<T, UserRewardDeleteArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserReward.
     * @param {UserRewardUpdateArgs} args - Arguments to update one UserReward.
     * @example
     * // Update one UserReward
     * const userReward = await prisma.userReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRewardUpdateArgs>(args: SelectSubset<T, UserRewardUpdateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRewards.
     * @param {UserRewardDeleteManyArgs} args - Arguments to filter UserRewards to delete.
     * @example
     * // Delete a few UserRewards
     * const { count } = await prisma.userReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRewardDeleteManyArgs>(args?: SelectSubset<T, UserRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRewards
     * const userReward = await prisma.userReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRewardUpdateManyArgs>(args: SelectSubset<T, UserRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserReward.
     * @param {UserRewardUpsertArgs} args - Arguments to update or create a UserReward.
     * @example
     * // Update or create a UserReward
     * const userReward = await prisma.userReward.upsert({
     *   create: {
     *     // ... data to create a UserReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReward we want to update
     *   }
     * })
     */
    upsert<T extends UserRewardUpsertArgs>(args: SelectSubset<T, UserRewardUpsertArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardCountArgs} args - Arguments to filter UserRewards to count.
     * @example
     * // Count the number of UserRewards
     * const count = await prisma.userReward.count({
     *   where: {
     *     // ... the filter for the UserRewards we want to count
     *   }
     * })
    **/
    count<T extends UserRewardCountArgs>(
      args?: Subset<T, UserRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRewardAggregateArgs>(args: Subset<T, UserRewardAggregateArgs>): Prisma.PrismaPromise<GetUserRewardAggregateType<T>>

    /**
     * Group by UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRewardGroupByArgs['orderBy'] }
        : { orderBy?: UserRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserReward model
   */
  readonly fields: UserRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    BuyerRewards<T extends UserReward$BuyerRewardsArgs<ExtArgs> = {}>(args?: Subset<T, UserReward$BuyerRewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserReward model
   */ 
  interface UserRewardFieldRefs {
    readonly id: FieldRef<"UserReward", 'String'>
    readonly createdAt: FieldRef<"UserReward", 'DateTime'>
    readonly updatedAt: FieldRef<"UserReward", 'DateTime'>
    readonly userId: FieldRef<"UserReward", 'String'>
    readonly image: FieldRef<"UserReward", 'String'>
    readonly description: FieldRef<"UserReward", 'String'>
    readonly name: FieldRef<"UserReward", 'String'>
    readonly price: FieldRef<"UserReward", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserReward findUnique
   */
  export type UserRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findUniqueOrThrow
   */
  export type UserRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findFirst
   */
  export type UserRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findFirstOrThrow
   */
  export type UserRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findMany
   */
  export type UserRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserRewards to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward create
   */
  export type UserRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to create a UserReward.
     */
    data: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
  }

  /**
   * UserReward createMany
   */
  export type UserRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserReward createManyAndReturn
   */
  export type UserRewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReward update
   */
  export type UserRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to update a UserReward.
     */
    data: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
    /**
     * Choose, which UserReward to update.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward updateMany
   */
  export type UserRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRewards.
     */
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyInput>
    /**
     * Filter which UserRewards to update
     */
    where?: UserRewardWhereInput
  }

  /**
   * UserReward upsert
   */
  export type UserRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The filter to search for the UserReward to update in case it exists.
     */
    where: UserRewardWhereUniqueInput
    /**
     * In case the UserReward found by the `where` argument doesn't exist, create a new UserReward with this data.
     */
    create: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
    /**
     * In case the UserReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
  }

  /**
   * UserReward delete
   */
  export type UserRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter which UserReward to delete.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward deleteMany
   */
  export type UserRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRewards to delete
     */
    where?: UserRewardWhereInput
  }

  /**
   * UserReward.BuyerRewards
   */
  export type UserReward$BuyerRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    where?: BuyerRewardWhereInput
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    cursor?: BuyerRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyerRewardScalarFieldEnum | BuyerRewardScalarFieldEnum[]
  }

  /**
   * UserReward without action
   */
  export type UserRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
  }


  /**
   * Model BuyerReward
   */

  export type AggregateBuyerReward = {
    _count: BuyerRewardCountAggregateOutputType | null
    _min: BuyerRewardMinAggregateOutputType | null
    _max: BuyerRewardMaxAggregateOutputType | null
  }

  export type BuyerRewardMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    rewardId: string | null
  }

  export type BuyerRewardMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    rewardId: string | null
  }

  export type BuyerRewardCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    rewardId: number
    _all: number
  }


  export type BuyerRewardMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    rewardId?: true
  }

  export type BuyerRewardMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    rewardId?: true
  }

  export type BuyerRewardCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    rewardId?: true
    _all?: true
  }

  export type BuyerRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerReward to aggregate.
     */
    where?: BuyerRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerRewards to fetch.
     */
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuyerRewards
    **/
    _count?: true | BuyerRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerRewardMaxAggregateInputType
  }

  export type GetBuyerRewardAggregateType<T extends BuyerRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyerReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyerReward[P]>
      : GetScalarType<T[P], AggregateBuyerReward[P]>
  }




  export type BuyerRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerRewardWhereInput
    orderBy?: BuyerRewardOrderByWithAggregationInput | BuyerRewardOrderByWithAggregationInput[]
    by: BuyerRewardScalarFieldEnum[] | BuyerRewardScalarFieldEnum
    having?: BuyerRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerRewardCountAggregateInputType | true
    _min?: BuyerRewardMinAggregateInputType
    _max?: BuyerRewardMaxAggregateInputType
  }

  export type BuyerRewardGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    rewardId: string
    _count: BuyerRewardCountAggregateOutputType | null
    _min: BuyerRewardMinAggregateOutputType | null
    _max: BuyerRewardMaxAggregateOutputType | null
  }

  type GetBuyerRewardGroupByPayload<T extends BuyerRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerRewardGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerRewardGroupByOutputType[P]>
        }
      >
    >


  export type BuyerRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    rewardId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reward?: boolean | UserRewardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyerReward"]>

  export type BuyerRewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    rewardId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    reward?: boolean | UserRewardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyerReward"]>

  export type BuyerRewardSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    rewardId?: boolean
  }

  export type BuyerRewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reward?: boolean | UserRewardDefaultArgs<ExtArgs>
  }
  export type BuyerRewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    reward?: boolean | UserRewardDefaultArgs<ExtArgs>
  }

  export type $BuyerRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuyerReward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      reward: Prisma.$UserRewardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      userId: string
      rewardId: string
    }, ExtArgs["result"]["buyerReward"]>
    composites: {}
  }

  type BuyerRewardGetPayload<S extends boolean | null | undefined | BuyerRewardDefaultArgs> = $Result.GetResult<Prisma.$BuyerRewardPayload, S>

  type BuyerRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuyerRewardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuyerRewardCountAggregateInputType | true
    }

  export interface BuyerRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuyerReward'], meta: { name: 'BuyerReward' } }
    /**
     * Find zero or one BuyerReward that matches the filter.
     * @param {BuyerRewardFindUniqueArgs} args - Arguments to find a BuyerReward
     * @example
     * // Get one BuyerReward
     * const buyerReward = await prisma.buyerReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerRewardFindUniqueArgs>(args: SelectSubset<T, BuyerRewardFindUniqueArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BuyerReward that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BuyerRewardFindUniqueOrThrowArgs} args - Arguments to find a BuyerReward
     * @example
     * // Get one BuyerReward
     * const buyerReward = await prisma.buyerReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerRewardFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BuyerReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardFindFirstArgs} args - Arguments to find a BuyerReward
     * @example
     * // Get one BuyerReward
     * const buyerReward = await prisma.buyerReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerRewardFindFirstArgs>(args?: SelectSubset<T, BuyerRewardFindFirstArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BuyerReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardFindFirstOrThrowArgs} args - Arguments to find a BuyerReward
     * @example
     * // Get one BuyerReward
     * const buyerReward = await prisma.buyerReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerRewardFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BuyerRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuyerRewards
     * const buyerRewards = await prisma.buyerReward.findMany()
     * 
     * // Get first 10 BuyerRewards
     * const buyerRewards = await prisma.buyerReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerRewardWithIdOnly = await prisma.buyerReward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerRewardFindManyArgs>(args?: SelectSubset<T, BuyerRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BuyerReward.
     * @param {BuyerRewardCreateArgs} args - Arguments to create a BuyerReward.
     * @example
     * // Create one BuyerReward
     * const BuyerReward = await prisma.buyerReward.create({
     *   data: {
     *     // ... data to create a BuyerReward
     *   }
     * })
     * 
     */
    create<T extends BuyerRewardCreateArgs>(args: SelectSubset<T, BuyerRewardCreateArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BuyerRewards.
     * @param {BuyerRewardCreateManyArgs} args - Arguments to create many BuyerRewards.
     * @example
     * // Create many BuyerRewards
     * const buyerReward = await prisma.buyerReward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerRewardCreateManyArgs>(args?: SelectSubset<T, BuyerRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BuyerRewards and returns the data saved in the database.
     * @param {BuyerRewardCreateManyAndReturnArgs} args - Arguments to create many BuyerRewards.
     * @example
     * // Create many BuyerRewards
     * const buyerReward = await prisma.buyerReward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BuyerRewards and only return the `id`
     * const buyerRewardWithIdOnly = await prisma.buyerReward.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuyerRewardCreateManyAndReturnArgs>(args?: SelectSubset<T, BuyerRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BuyerReward.
     * @param {BuyerRewardDeleteArgs} args - Arguments to delete one BuyerReward.
     * @example
     * // Delete one BuyerReward
     * const BuyerReward = await prisma.buyerReward.delete({
     *   where: {
     *     // ... filter to delete one BuyerReward
     *   }
     * })
     * 
     */
    delete<T extends BuyerRewardDeleteArgs>(args: SelectSubset<T, BuyerRewardDeleteArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BuyerReward.
     * @param {BuyerRewardUpdateArgs} args - Arguments to update one BuyerReward.
     * @example
     * // Update one BuyerReward
     * const buyerReward = await prisma.buyerReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerRewardUpdateArgs>(args: SelectSubset<T, BuyerRewardUpdateArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BuyerRewards.
     * @param {BuyerRewardDeleteManyArgs} args - Arguments to filter BuyerRewards to delete.
     * @example
     * // Delete a few BuyerRewards
     * const { count } = await prisma.buyerReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerRewardDeleteManyArgs>(args?: SelectSubset<T, BuyerRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyerRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuyerRewards
     * const buyerReward = await prisma.buyerReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerRewardUpdateManyArgs>(args: SelectSubset<T, BuyerRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BuyerReward.
     * @param {BuyerRewardUpsertArgs} args - Arguments to update or create a BuyerReward.
     * @example
     * // Update or create a BuyerReward
     * const buyerReward = await prisma.buyerReward.upsert({
     *   create: {
     *     // ... data to create a BuyerReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuyerReward we want to update
     *   }
     * })
     */
    upsert<T extends BuyerRewardUpsertArgs>(args: SelectSubset<T, BuyerRewardUpsertArgs<ExtArgs>>): Prisma__BuyerRewardClient<$Result.GetResult<Prisma.$BuyerRewardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BuyerRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardCountArgs} args - Arguments to filter BuyerRewards to count.
     * @example
     * // Count the number of BuyerRewards
     * const count = await prisma.buyerReward.count({
     *   where: {
     *     // ... the filter for the BuyerRewards we want to count
     *   }
     * })
    **/
    count<T extends BuyerRewardCountArgs>(
      args?: Subset<T, BuyerRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuyerReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerRewardAggregateArgs>(args: Subset<T, BuyerRewardAggregateArgs>): Prisma.PrismaPromise<GetBuyerRewardAggregateType<T>>

    /**
     * Group by BuyerReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerRewardGroupByArgs['orderBy'] }
        : { orderBy?: BuyerRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuyerReward model
   */
  readonly fields: BuyerRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuyerReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reward<T extends UserRewardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserRewardDefaultArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuyerReward model
   */ 
  interface BuyerRewardFieldRefs {
    readonly id: FieldRef<"BuyerReward", 'String'>
    readonly createdAt: FieldRef<"BuyerReward", 'DateTime'>
    readonly updatedAt: FieldRef<"BuyerReward", 'DateTime'>
    readonly userId: FieldRef<"BuyerReward", 'String'>
    readonly rewardId: FieldRef<"BuyerReward", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BuyerReward findUnique
   */
  export type BuyerRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter, which BuyerReward to fetch.
     */
    where: BuyerRewardWhereUniqueInput
  }

  /**
   * BuyerReward findUniqueOrThrow
   */
  export type BuyerRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter, which BuyerReward to fetch.
     */
    where: BuyerRewardWhereUniqueInput
  }

  /**
   * BuyerReward findFirst
   */
  export type BuyerRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter, which BuyerReward to fetch.
     */
    where?: BuyerRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerRewards to fetch.
     */
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerRewards.
     */
    cursor?: BuyerRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerRewards.
     */
    distinct?: BuyerRewardScalarFieldEnum | BuyerRewardScalarFieldEnum[]
  }

  /**
   * BuyerReward findFirstOrThrow
   */
  export type BuyerRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter, which BuyerReward to fetch.
     */
    where?: BuyerRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerRewards to fetch.
     */
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyerRewards.
     */
    cursor?: BuyerRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyerRewards.
     */
    distinct?: BuyerRewardScalarFieldEnum | BuyerRewardScalarFieldEnum[]
  }

  /**
   * BuyerReward findMany
   */
  export type BuyerRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter, which BuyerRewards to fetch.
     */
    where?: BuyerRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyerRewards to fetch.
     */
    orderBy?: BuyerRewardOrderByWithRelationInput | BuyerRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuyerRewards.
     */
    cursor?: BuyerRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyerRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyerRewards.
     */
    skip?: number
    distinct?: BuyerRewardScalarFieldEnum | BuyerRewardScalarFieldEnum[]
  }

  /**
   * BuyerReward create
   */
  export type BuyerRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * The data needed to create a BuyerReward.
     */
    data: XOR<BuyerRewardCreateInput, BuyerRewardUncheckedCreateInput>
  }

  /**
   * BuyerReward createMany
   */
  export type BuyerRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuyerRewards.
     */
    data: BuyerRewardCreateManyInput | BuyerRewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuyerReward createManyAndReturn
   */
  export type BuyerRewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BuyerRewards.
     */
    data: BuyerRewardCreateManyInput | BuyerRewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuyerReward update
   */
  export type BuyerRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * The data needed to update a BuyerReward.
     */
    data: XOR<BuyerRewardUpdateInput, BuyerRewardUncheckedUpdateInput>
    /**
     * Choose, which BuyerReward to update.
     */
    where: BuyerRewardWhereUniqueInput
  }

  /**
   * BuyerReward updateMany
   */
  export type BuyerRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuyerRewards.
     */
    data: XOR<BuyerRewardUpdateManyMutationInput, BuyerRewardUncheckedUpdateManyInput>
    /**
     * Filter which BuyerRewards to update
     */
    where?: BuyerRewardWhereInput
  }

  /**
   * BuyerReward upsert
   */
  export type BuyerRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * The filter to search for the BuyerReward to update in case it exists.
     */
    where: BuyerRewardWhereUniqueInput
    /**
     * In case the BuyerReward found by the `where` argument doesn't exist, create a new BuyerReward with this data.
     */
    create: XOR<BuyerRewardCreateInput, BuyerRewardUncheckedCreateInput>
    /**
     * In case the BuyerReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerRewardUpdateInput, BuyerRewardUncheckedUpdateInput>
  }

  /**
   * BuyerReward delete
   */
  export type BuyerRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
    /**
     * Filter which BuyerReward to delete.
     */
    where: BuyerRewardWhereUniqueInput
  }

  /**
   * BuyerReward deleteMany
   */
  export type BuyerRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyerRewards to delete
     */
    where?: BuyerRewardWhereInput
  }

  /**
   * BuyerReward without action
   */
  export type BuyerRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerReward
     */
    select?: BuyerRewardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerRewardInclude<ExtArgs> | null
  }


  /**
   * Model Stream
   */

  export type AggregateStream = {
    _count: StreamCountAggregateOutputType | null
    _avg: StreamAvgAggregateOutputType | null
    _sum: StreamSumAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  export type StreamAvgAggregateOutputType = {
    countOnline: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamSumAggregateOutputType = {
    countOnline: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    countOnline: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    countOnline: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    countOnline: number
    tag: number
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: number
    _all: number
  }


  export type StreamAvgAggregateInputType = {
    countOnline?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamSumAggregateInputType = {
    countOnline?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    countOnline?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    countOnline?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    countOnline?: true
    tag?: true
    theHighestOnline?: true
    theAverageOnline?: true
    qualityUrls?: true
    _all?: true
  }

  export type StreamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stream to aggregate.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Streams
    **/
    _count?: true | StreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StreamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StreamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamMaxAggregateInputType
  }

  export type GetStreamAggregateType<T extends StreamAggregateArgs> = {
        [P in keyof T & keyof AggregateStream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStream[P]>
      : GetScalarType<T[P], AggregateStream[P]>
  }




  export type StreamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamWhereInput
    orderBy?: StreamOrderByWithAggregationInput | StreamOrderByWithAggregationInput[]
    by: StreamScalarFieldEnum[] | StreamScalarFieldEnum
    having?: StreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamCountAggregateInputType | true
    _avg?: StreamAvgAggregateInputType
    _sum?: StreamSumAggregateInputType
    _min?: StreamMinAggregateInputType
    _max?: StreamMaxAggregateInputType
  }

  export type StreamGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    countOnline: number
    tag: string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonValue
    _count: StreamCountAggregateOutputType | null
    _avg: StreamAvgAggregateOutputType | null
    _sum: StreamSumAggregateOutputType | null
    _min: StreamMinAggregateOutputType | null
    _max: StreamMaxAggregateOutputType | null
  }

  type GetStreamGroupByPayload<T extends StreamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamGroupByOutputType[P]>
            : GetScalarType<T[P], StreamGroupByOutputType[P]>
        }
      >
    >


  export type StreamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    countOnline?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    qualityUrls?: boolean
    categories?: boolean | Stream$categoriesArgs<ExtArgs>
    user?: boolean | Stream$userArgs<ExtArgs>
    _count?: boolean | StreamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stream"]>

  export type StreamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    countOnline?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    qualityUrls?: boolean
  }, ExtArgs["result"]["stream"]>

  export type StreamSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    countOnline?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    qualityUrls?: boolean
  }

  export type StreamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Stream$categoriesArgs<ExtArgs>
    user?: boolean | Stream$userArgs<ExtArgs>
    _count?: boolean | StreamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StreamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StreamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stream"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      countOnline: number
      tag: string[]
      theHighestOnline: number
      theAverageOnline: number
      qualityUrls: Prisma.JsonValue
    }, ExtArgs["result"]["stream"]>
    composites: {}
  }

  type StreamGetPayload<S extends boolean | null | undefined | StreamDefaultArgs> = $Result.GetResult<Prisma.$StreamPayload, S>

  type StreamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StreamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StreamCountAggregateInputType | true
    }

  export interface StreamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stream'], meta: { name: 'Stream' } }
    /**
     * Find zero or one Stream that matches the filter.
     * @param {StreamFindUniqueArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StreamFindUniqueArgs>(args: SelectSubset<T, StreamFindUniqueArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Stream that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StreamFindUniqueOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StreamFindUniqueOrThrowArgs>(args: SelectSubset<T, StreamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Stream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StreamFindFirstArgs>(args?: SelectSubset<T, StreamFindFirstArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Stream that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindFirstOrThrowArgs} args - Arguments to find a Stream
     * @example
     * // Get one Stream
     * const stream = await prisma.stream.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StreamFindFirstOrThrowArgs>(args?: SelectSubset<T, StreamFindFirstOrThrowArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Streams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Streams
     * const streams = await prisma.stream.findMany()
     * 
     * // Get first 10 Streams
     * const streams = await prisma.stream.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamWithIdOnly = await prisma.stream.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StreamFindManyArgs>(args?: SelectSubset<T, StreamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Stream.
     * @param {StreamCreateArgs} args - Arguments to create a Stream.
     * @example
     * // Create one Stream
     * const Stream = await prisma.stream.create({
     *   data: {
     *     // ... data to create a Stream
     *   }
     * })
     * 
     */
    create<T extends StreamCreateArgs>(args: SelectSubset<T, StreamCreateArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Streams.
     * @param {StreamCreateManyArgs} args - Arguments to create many Streams.
     * @example
     * // Create many Streams
     * const stream = await prisma.stream.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StreamCreateManyArgs>(args?: SelectSubset<T, StreamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Streams and returns the data saved in the database.
     * @param {StreamCreateManyAndReturnArgs} args - Arguments to create many Streams.
     * @example
     * // Create many Streams
     * const stream = await prisma.stream.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Streams and only return the `id`
     * const streamWithIdOnly = await prisma.stream.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StreamCreateManyAndReturnArgs>(args?: SelectSubset<T, StreamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Stream.
     * @param {StreamDeleteArgs} args - Arguments to delete one Stream.
     * @example
     * // Delete one Stream
     * const Stream = await prisma.stream.delete({
     *   where: {
     *     // ... filter to delete one Stream
     *   }
     * })
     * 
     */
    delete<T extends StreamDeleteArgs>(args: SelectSubset<T, StreamDeleteArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Stream.
     * @param {StreamUpdateArgs} args - Arguments to update one Stream.
     * @example
     * // Update one Stream
     * const stream = await prisma.stream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StreamUpdateArgs>(args: SelectSubset<T, StreamUpdateArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Streams.
     * @param {StreamDeleteManyArgs} args - Arguments to filter Streams to delete.
     * @example
     * // Delete a few Streams
     * const { count } = await prisma.stream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StreamDeleteManyArgs>(args?: SelectSubset<T, StreamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Streams
     * const stream = await prisma.stream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StreamUpdateManyArgs>(args: SelectSubset<T, StreamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stream.
     * @param {StreamUpsertArgs} args - Arguments to update or create a Stream.
     * @example
     * // Update or create a Stream
     * const stream = await prisma.stream.upsert({
     *   create: {
     *     // ... data to create a Stream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stream we want to update
     *   }
     * })
     */
    upsert<T extends StreamUpsertArgs>(args: SelectSubset<T, StreamUpsertArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Streams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamCountArgs} args - Arguments to filter Streams to count.
     * @example
     * // Count the number of Streams
     * const count = await prisma.stream.count({
     *   where: {
     *     // ... the filter for the Streams we want to count
     *   }
     * })
    **/
    count<T extends StreamCountArgs>(
      args?: Subset<T, StreamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamAggregateArgs>(args: Subset<T, StreamAggregateArgs>): Prisma.PrismaPromise<GetStreamAggregateType<T>>

    /**
     * Group by Stream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamGroupByArgs['orderBy'] }
        : { orderBy?: StreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stream model
   */
  readonly fields: StreamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StreamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Stream$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Stream$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends Stream$userArgs<ExtArgs> = {}>(args?: Subset<T, Stream$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stream model
   */ 
  interface StreamFieldRefs {
    readonly id: FieldRef<"Stream", 'String'>
    readonly createdAt: FieldRef<"Stream", 'DateTime'>
    readonly updatedAt: FieldRef<"Stream", 'DateTime'>
    readonly name: FieldRef<"Stream", 'String'>
    readonly countOnline: FieldRef<"Stream", 'Int'>
    readonly tag: FieldRef<"Stream", 'String[]'>
    readonly theHighestOnline: FieldRef<"Stream", 'Int'>
    readonly theAverageOnline: FieldRef<"Stream", 'Int'>
    readonly qualityUrls: FieldRef<"Stream", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Stream findUnique
   */
  export type StreamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream findUniqueOrThrow
   */
  export type StreamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream findFirst
   */
  export type StreamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream findFirstOrThrow
   */
  export type StreamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Stream to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Streams.
     */
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream findMany
   */
  export type StreamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter, which Streams to fetch.
     */
    where?: StreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Streams to fetch.
     */
    orderBy?: StreamOrderByWithRelationInput | StreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Streams.
     */
    cursor?: StreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Streams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Streams.
     */
    skip?: number
    distinct?: StreamScalarFieldEnum | StreamScalarFieldEnum[]
  }

  /**
   * Stream create
   */
  export type StreamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The data needed to create a Stream.
     */
    data: XOR<StreamCreateInput, StreamUncheckedCreateInput>
  }

  /**
   * Stream createMany
   */
  export type StreamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Streams.
     */
    data: StreamCreateManyInput | StreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stream createManyAndReturn
   */
  export type StreamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Streams.
     */
    data: StreamCreateManyInput | StreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stream update
   */
  export type StreamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The data needed to update a Stream.
     */
    data: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
    /**
     * Choose, which Stream to update.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream updateMany
   */
  export type StreamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Streams.
     */
    data: XOR<StreamUpdateManyMutationInput, StreamUncheckedUpdateManyInput>
    /**
     * Filter which Streams to update
     */
    where?: StreamWhereInput
  }

  /**
   * Stream upsert
   */
  export type StreamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * The filter to search for the Stream to update in case it exists.
     */
    where: StreamWhereUniqueInput
    /**
     * In case the Stream found by the `where` argument doesn't exist, create a new Stream with this data.
     */
    create: XOR<StreamCreateInput, StreamUncheckedCreateInput>
    /**
     * In case the Stream was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StreamUpdateInput, StreamUncheckedUpdateInput>
  }

  /**
   * Stream delete
   */
  export type StreamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    /**
     * Filter which Stream to delete.
     */
    where: StreamWhereUniqueInput
  }

  /**
   * Stream deleteMany
   */
  export type StreamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Streams to delete
     */
    where?: StreamWhereInput
  }

  /**
   * Stream.categories
   */
  export type Stream$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Stream.user
   */
  export type Stream$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Stream without action
   */
  export type StreamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
  }


  /**
   * Model StreamStats
   */

  export type AggregateStreamStats = {
    _count: StreamStatsCountAggregateOutputType | null
    _avg: StreamStatsAvgAggregateOutputType | null
    _sum: StreamStatsSumAggregateOutputType | null
    _min: StreamStatsMinAggregateOutputType | null
    _max: StreamStatsMaxAggregateOutputType | null
  }

  export type StreamStatsAvgAggregateOutputType = {
    duration: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamStatsSumAggregateOutputType = {
    duration: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
  }

  export type StreamStatsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    whenEnded: Date | null
    duration: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
    userId: string | null
  }

  export type StreamStatsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    whenEnded: Date | null
    duration: number | null
    theHighestOnline: number | null
    theAverageOnline: number | null
    userId: string | null
  }

  export type StreamStatsCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    whenEnded: number
    duration: number
    tag: number
    theHighestOnline: number
    theAverageOnline: number
    userId: number
    _all: number
  }


  export type StreamStatsAvgAggregateInputType = {
    duration?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamStatsSumAggregateInputType = {
    duration?: true
    theHighestOnline?: true
    theAverageOnline?: true
  }

  export type StreamStatsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    whenEnded?: true
    duration?: true
    theHighestOnline?: true
    theAverageOnline?: true
    userId?: true
  }

  export type StreamStatsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    whenEnded?: true
    duration?: true
    theHighestOnline?: true
    theAverageOnline?: true
    userId?: true
  }

  export type StreamStatsCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    whenEnded?: true
    duration?: true
    tag?: true
    theHighestOnline?: true
    theAverageOnline?: true
    userId?: true
    _all?: true
  }

  export type StreamStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StreamStats to aggregate.
     */
    where?: StreamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamStats to fetch.
     */
    orderBy?: StreamStatsOrderByWithRelationInput | StreamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StreamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StreamStats
    **/
    _count?: true | StreamStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StreamStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StreamStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StreamStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StreamStatsMaxAggregateInputType
  }

  export type GetStreamStatsAggregateType<T extends StreamStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateStreamStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStreamStats[P]>
      : GetScalarType<T[P], AggregateStreamStats[P]>
  }




  export type StreamStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StreamStatsWhereInput
    orderBy?: StreamStatsOrderByWithAggregationInput | StreamStatsOrderByWithAggregationInput[]
    by: StreamStatsScalarFieldEnum[] | StreamStatsScalarFieldEnum
    having?: StreamStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StreamStatsCountAggregateInputType | true
    _avg?: StreamStatsAvgAggregateInputType
    _sum?: StreamStatsSumAggregateInputType
    _min?: StreamStatsMinAggregateInputType
    _max?: StreamStatsMaxAggregateInputType
  }

  export type StreamStatsGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    whenEnded: Date
    duration: number
    tag: string[]
    theHighestOnline: number
    theAverageOnline: number
    userId: string
    _count: StreamStatsCountAggregateOutputType | null
    _avg: StreamStatsAvgAggregateOutputType | null
    _sum: StreamStatsSumAggregateOutputType | null
    _min: StreamStatsMinAggregateOutputType | null
    _max: StreamStatsMaxAggregateOutputType | null
  }

  type GetStreamStatsGroupByPayload<T extends StreamStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StreamStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StreamStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StreamStatsGroupByOutputType[P]>
            : GetScalarType<T[P], StreamStatsGroupByOutputType[P]>
        }
      >
    >


  export type StreamStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    whenEnded?: boolean
    duration?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    userId?: boolean
    categories?: boolean | StreamStats$categoriesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StreamStatsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["streamStats"]>

  export type StreamStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    whenEnded?: boolean
    duration?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["streamStats"]>

  export type StreamStatsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    whenEnded?: boolean
    duration?: boolean
    tag?: boolean
    theHighestOnline?: boolean
    theAverageOnline?: boolean
    userId?: boolean
  }

  export type StreamStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | StreamStats$categoriesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StreamStatsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StreamStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StreamStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StreamStats"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      whenEnded: Date
      duration: number
      tag: string[]
      theHighestOnline: number
      theAverageOnline: number
      userId: string
    }, ExtArgs["result"]["streamStats"]>
    composites: {}
  }

  type StreamStatsGetPayload<S extends boolean | null | undefined | StreamStatsDefaultArgs> = $Result.GetResult<Prisma.$StreamStatsPayload, S>

  type StreamStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StreamStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StreamStatsCountAggregateInputType | true
    }

  export interface StreamStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StreamStats'], meta: { name: 'StreamStats' } }
    /**
     * Find zero or one StreamStats that matches the filter.
     * @param {StreamStatsFindUniqueArgs} args - Arguments to find a StreamStats
     * @example
     * // Get one StreamStats
     * const streamStats = await prisma.streamStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StreamStatsFindUniqueArgs>(args: SelectSubset<T, StreamStatsFindUniqueArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StreamStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StreamStatsFindUniqueOrThrowArgs} args - Arguments to find a StreamStats
     * @example
     * // Get one StreamStats
     * const streamStats = await prisma.streamStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StreamStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, StreamStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StreamStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsFindFirstArgs} args - Arguments to find a StreamStats
     * @example
     * // Get one StreamStats
     * const streamStats = await prisma.streamStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StreamStatsFindFirstArgs>(args?: SelectSubset<T, StreamStatsFindFirstArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StreamStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsFindFirstOrThrowArgs} args - Arguments to find a StreamStats
     * @example
     * // Get one StreamStats
     * const streamStats = await prisma.streamStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StreamStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, StreamStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StreamStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StreamStats
     * const streamStats = await prisma.streamStats.findMany()
     * 
     * // Get first 10 StreamStats
     * const streamStats = await prisma.streamStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const streamStatsWithIdOnly = await prisma.streamStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StreamStatsFindManyArgs>(args?: SelectSubset<T, StreamStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StreamStats.
     * @param {StreamStatsCreateArgs} args - Arguments to create a StreamStats.
     * @example
     * // Create one StreamStats
     * const StreamStats = await prisma.streamStats.create({
     *   data: {
     *     // ... data to create a StreamStats
     *   }
     * })
     * 
     */
    create<T extends StreamStatsCreateArgs>(args: SelectSubset<T, StreamStatsCreateArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StreamStats.
     * @param {StreamStatsCreateManyArgs} args - Arguments to create many StreamStats.
     * @example
     * // Create many StreamStats
     * const streamStats = await prisma.streamStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StreamStatsCreateManyArgs>(args?: SelectSubset<T, StreamStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StreamStats and returns the data saved in the database.
     * @param {StreamStatsCreateManyAndReturnArgs} args - Arguments to create many StreamStats.
     * @example
     * // Create many StreamStats
     * const streamStats = await prisma.streamStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StreamStats and only return the `id`
     * const streamStatsWithIdOnly = await prisma.streamStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StreamStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, StreamStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StreamStats.
     * @param {StreamStatsDeleteArgs} args - Arguments to delete one StreamStats.
     * @example
     * // Delete one StreamStats
     * const StreamStats = await prisma.streamStats.delete({
     *   where: {
     *     // ... filter to delete one StreamStats
     *   }
     * })
     * 
     */
    delete<T extends StreamStatsDeleteArgs>(args: SelectSubset<T, StreamStatsDeleteArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StreamStats.
     * @param {StreamStatsUpdateArgs} args - Arguments to update one StreamStats.
     * @example
     * // Update one StreamStats
     * const streamStats = await prisma.streamStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StreamStatsUpdateArgs>(args: SelectSubset<T, StreamStatsUpdateArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StreamStats.
     * @param {StreamStatsDeleteManyArgs} args - Arguments to filter StreamStats to delete.
     * @example
     * // Delete a few StreamStats
     * const { count } = await prisma.streamStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StreamStatsDeleteManyArgs>(args?: SelectSubset<T, StreamStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StreamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StreamStats
     * const streamStats = await prisma.streamStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StreamStatsUpdateManyArgs>(args: SelectSubset<T, StreamStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StreamStats.
     * @param {StreamStatsUpsertArgs} args - Arguments to update or create a StreamStats.
     * @example
     * // Update or create a StreamStats
     * const streamStats = await prisma.streamStats.upsert({
     *   create: {
     *     // ... data to create a StreamStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StreamStats we want to update
     *   }
     * })
     */
    upsert<T extends StreamStatsUpsertArgs>(args: SelectSubset<T, StreamStatsUpsertArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StreamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsCountArgs} args - Arguments to filter StreamStats to count.
     * @example
     * // Count the number of StreamStats
     * const count = await prisma.streamStats.count({
     *   where: {
     *     // ... the filter for the StreamStats we want to count
     *   }
     * })
    **/
    count<T extends StreamStatsCountArgs>(
      args?: Subset<T, StreamStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StreamStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StreamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StreamStatsAggregateArgs>(args: Subset<T, StreamStatsAggregateArgs>): Prisma.PrismaPromise<GetStreamStatsAggregateType<T>>

    /**
     * Group by StreamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StreamStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StreamStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StreamStatsGroupByArgs['orderBy'] }
        : { orderBy?: StreamStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StreamStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStreamStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StreamStats model
   */
  readonly fields: StreamStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StreamStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StreamStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends StreamStats$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, StreamStats$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StreamStats model
   */ 
  interface StreamStatsFieldRefs {
    readonly id: FieldRef<"StreamStats", 'String'>
    readonly createdAt: FieldRef<"StreamStats", 'DateTime'>
    readonly updatedAt: FieldRef<"StreamStats", 'DateTime'>
    readonly name: FieldRef<"StreamStats", 'String'>
    readonly whenEnded: FieldRef<"StreamStats", 'DateTime'>
    readonly duration: FieldRef<"StreamStats", 'Int'>
    readonly tag: FieldRef<"StreamStats", 'String[]'>
    readonly theHighestOnline: FieldRef<"StreamStats", 'Int'>
    readonly theAverageOnline: FieldRef<"StreamStats", 'Int'>
    readonly userId: FieldRef<"StreamStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StreamStats findUnique
   */
  export type StreamStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter, which StreamStats to fetch.
     */
    where: StreamStatsWhereUniqueInput
  }

  /**
   * StreamStats findUniqueOrThrow
   */
  export type StreamStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter, which StreamStats to fetch.
     */
    where: StreamStatsWhereUniqueInput
  }

  /**
   * StreamStats findFirst
   */
  export type StreamStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter, which StreamStats to fetch.
     */
    where?: StreamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamStats to fetch.
     */
    orderBy?: StreamStatsOrderByWithRelationInput | StreamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StreamStats.
     */
    cursor?: StreamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StreamStats.
     */
    distinct?: StreamStatsScalarFieldEnum | StreamStatsScalarFieldEnum[]
  }

  /**
   * StreamStats findFirstOrThrow
   */
  export type StreamStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter, which StreamStats to fetch.
     */
    where?: StreamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamStats to fetch.
     */
    orderBy?: StreamStatsOrderByWithRelationInput | StreamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StreamStats.
     */
    cursor?: StreamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StreamStats.
     */
    distinct?: StreamStatsScalarFieldEnum | StreamStatsScalarFieldEnum[]
  }

  /**
   * StreamStats findMany
   */
  export type StreamStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter, which StreamStats to fetch.
     */
    where?: StreamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StreamStats to fetch.
     */
    orderBy?: StreamStatsOrderByWithRelationInput | StreamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StreamStats.
     */
    cursor?: StreamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StreamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StreamStats.
     */
    skip?: number
    distinct?: StreamStatsScalarFieldEnum | StreamStatsScalarFieldEnum[]
  }

  /**
   * StreamStats create
   */
  export type StreamStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a StreamStats.
     */
    data: XOR<StreamStatsCreateInput, StreamStatsUncheckedCreateInput>
  }

  /**
   * StreamStats createMany
   */
  export type StreamStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StreamStats.
     */
    data: StreamStatsCreateManyInput | StreamStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StreamStats createManyAndReturn
   */
  export type StreamStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StreamStats.
     */
    data: StreamStatsCreateManyInput | StreamStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StreamStats update
   */
  export type StreamStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a StreamStats.
     */
    data: XOR<StreamStatsUpdateInput, StreamStatsUncheckedUpdateInput>
    /**
     * Choose, which StreamStats to update.
     */
    where: StreamStatsWhereUniqueInput
  }

  /**
   * StreamStats updateMany
   */
  export type StreamStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StreamStats.
     */
    data: XOR<StreamStatsUpdateManyMutationInput, StreamStatsUncheckedUpdateManyInput>
    /**
     * Filter which StreamStats to update
     */
    where?: StreamStatsWhereInput
  }

  /**
   * StreamStats upsert
   */
  export type StreamStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the StreamStats to update in case it exists.
     */
    where: StreamStatsWhereUniqueInput
    /**
     * In case the StreamStats found by the `where` argument doesn't exist, create a new StreamStats with this data.
     */
    create: XOR<StreamStatsCreateInput, StreamStatsUncheckedCreateInput>
    /**
     * In case the StreamStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StreamStatsUpdateInput, StreamStatsUncheckedUpdateInput>
  }

  /**
   * StreamStats delete
   */
  export type StreamStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    /**
     * Filter which StreamStats to delete.
     */
    where: StreamStatsWhereUniqueInput
  }

  /**
   * StreamStats deleteMany
   */
  export type StreamStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StreamStats to delete
     */
    where?: StreamStatsWhereInput
  }

  /**
   * StreamStats.categories
   */
  export type StreamStats$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * StreamStats without action
   */
  export type StreamStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
  }


  /**
   * Model Emote
   */

  export type AggregateEmote = {
    _count: EmoteCountAggregateOutputType | null
    _min: EmoteMinAggregateOutputType | null
    _max: EmoteMaxAggregateOutputType | null
  }

  export type EmoteMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
    tag: string | null
    name: string | null
    userId: string | null
  }

  export type EmoteMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
    tag: string | null
    name: string | null
    userId: string | null
  }

  export type EmoteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    image: number
    tag: number
    name: number
    userId: number
    _all: number
  }


  export type EmoteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    tag?: true
    name?: true
    userId?: true
  }

  export type EmoteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    tag?: true
    name?: true
    userId?: true
  }

  export type EmoteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    tag?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type EmoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emote to aggregate.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emotes
    **/
    _count?: true | EmoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmoteMaxAggregateInputType
  }

  export type GetEmoteAggregateType<T extends EmoteAggregateArgs> = {
        [P in keyof T & keyof AggregateEmote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmote[P]>
      : GetScalarType<T[P], AggregateEmote[P]>
  }




  export type EmoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmoteWhereInput
    orderBy?: EmoteOrderByWithAggregationInput | EmoteOrderByWithAggregationInput[]
    by: EmoteScalarFieldEnum[] | EmoteScalarFieldEnum
    having?: EmoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmoteCountAggregateInputType | true
    _min?: EmoteMinAggregateInputType
    _max?: EmoteMaxAggregateInputType
  }

  export type EmoteGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    image: string
    tag: string
    name: string
    userId: string
    _count: EmoteCountAggregateOutputType | null
    _min: EmoteMinAggregateOutputType | null
    _max: EmoteMaxAggregateOutputType | null
  }

  type GetEmoteGroupByPayload<T extends EmoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmoteGroupByOutputType[P]>
            : GetScalarType<T[P], EmoteGroupByOutputType[P]>
        }
      >
    >


  export type EmoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    tag?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emote"]>

  export type EmoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    tag?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emote"]>

  export type EmoteSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    tag?: boolean
    name?: boolean
    userId?: boolean
  }

  export type EmoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Emote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      image: string
      tag: string
      name: string
      userId: string
    }, ExtArgs["result"]["emote"]>
    composites: {}
  }

  type EmoteGetPayload<S extends boolean | null | undefined | EmoteDefaultArgs> = $Result.GetResult<Prisma.$EmotePayload, S>

  type EmoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmoteCountAggregateInputType | true
    }

  export interface EmoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Emote'], meta: { name: 'Emote' } }
    /**
     * Find zero or one Emote that matches the filter.
     * @param {EmoteFindUniqueArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmoteFindUniqueArgs>(args: SelectSubset<T, EmoteFindUniqueArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Emote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmoteFindUniqueOrThrowArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmoteFindUniqueOrThrowArgs>(args: SelectSubset<T, EmoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Emote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindFirstArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmoteFindFirstArgs>(args?: SelectSubset<T, EmoteFindFirstArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Emote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindFirstOrThrowArgs} args - Arguments to find a Emote
     * @example
     * // Get one Emote
     * const emote = await prisma.emote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmoteFindFirstOrThrowArgs>(args?: SelectSubset<T, EmoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Emotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emotes
     * const emotes = await prisma.emote.findMany()
     * 
     * // Get first 10 Emotes
     * const emotes = await prisma.emote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emoteWithIdOnly = await prisma.emote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmoteFindManyArgs>(args?: SelectSubset<T, EmoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Emote.
     * @param {EmoteCreateArgs} args - Arguments to create a Emote.
     * @example
     * // Create one Emote
     * const Emote = await prisma.emote.create({
     *   data: {
     *     // ... data to create a Emote
     *   }
     * })
     * 
     */
    create<T extends EmoteCreateArgs>(args: SelectSubset<T, EmoteCreateArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Emotes.
     * @param {EmoteCreateManyArgs} args - Arguments to create many Emotes.
     * @example
     * // Create many Emotes
     * const emote = await prisma.emote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmoteCreateManyArgs>(args?: SelectSubset<T, EmoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Emotes and returns the data saved in the database.
     * @param {EmoteCreateManyAndReturnArgs} args - Arguments to create many Emotes.
     * @example
     * // Create many Emotes
     * const emote = await prisma.emote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Emotes and only return the `id`
     * const emoteWithIdOnly = await prisma.emote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmoteCreateManyAndReturnArgs>(args?: SelectSubset<T, EmoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Emote.
     * @param {EmoteDeleteArgs} args - Arguments to delete one Emote.
     * @example
     * // Delete one Emote
     * const Emote = await prisma.emote.delete({
     *   where: {
     *     // ... filter to delete one Emote
     *   }
     * })
     * 
     */
    delete<T extends EmoteDeleteArgs>(args: SelectSubset<T, EmoteDeleteArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Emote.
     * @param {EmoteUpdateArgs} args - Arguments to update one Emote.
     * @example
     * // Update one Emote
     * const emote = await prisma.emote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmoteUpdateArgs>(args: SelectSubset<T, EmoteUpdateArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Emotes.
     * @param {EmoteDeleteManyArgs} args - Arguments to filter Emotes to delete.
     * @example
     * // Delete a few Emotes
     * const { count } = await prisma.emote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmoteDeleteManyArgs>(args?: SelectSubset<T, EmoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emotes
     * const emote = await prisma.emote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmoteUpdateManyArgs>(args: SelectSubset<T, EmoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Emote.
     * @param {EmoteUpsertArgs} args - Arguments to update or create a Emote.
     * @example
     * // Update or create a Emote
     * const emote = await prisma.emote.upsert({
     *   create: {
     *     // ... data to create a Emote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Emote we want to update
     *   }
     * })
     */
    upsert<T extends EmoteUpsertArgs>(args: SelectSubset<T, EmoteUpsertArgs<ExtArgs>>): Prisma__EmoteClient<$Result.GetResult<Prisma.$EmotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Emotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteCountArgs} args - Arguments to filter Emotes to count.
     * @example
     * // Count the number of Emotes
     * const count = await prisma.emote.count({
     *   where: {
     *     // ... the filter for the Emotes we want to count
     *   }
     * })
    **/
    count<T extends EmoteCountArgs>(
      args?: Subset<T, EmoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Emote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmoteAggregateArgs>(args: Subset<T, EmoteAggregateArgs>): Prisma.PrismaPromise<GetEmoteAggregateType<T>>

    /**
     * Group by Emote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmoteGroupByArgs['orderBy'] }
        : { orderBy?: EmoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Emote model
   */
  readonly fields: EmoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Emote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Emote model
   */ 
  interface EmoteFieldRefs {
    readonly id: FieldRef<"Emote", 'String'>
    readonly createdAt: FieldRef<"Emote", 'DateTime'>
    readonly updatedAt: FieldRef<"Emote", 'DateTime'>
    readonly image: FieldRef<"Emote", 'String'>
    readonly tag: FieldRef<"Emote", 'String'>
    readonly name: FieldRef<"Emote", 'String'>
    readonly userId: FieldRef<"Emote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Emote findUnique
   */
  export type EmoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote findUniqueOrThrow
   */
  export type EmoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote findFirst
   */
  export type EmoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emotes.
     */
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote findFirstOrThrow
   */
  export type EmoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emote to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emotes.
     */
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote findMany
   */
  export type EmoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter, which Emotes to fetch.
     */
    where?: EmoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emotes to fetch.
     */
    orderBy?: EmoteOrderByWithRelationInput | EmoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emotes.
     */
    cursor?: EmoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emotes.
     */
    skip?: number
    distinct?: EmoteScalarFieldEnum | EmoteScalarFieldEnum[]
  }

  /**
   * Emote create
   */
  export type EmoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Emote.
     */
    data: XOR<EmoteCreateInput, EmoteUncheckedCreateInput>
  }

  /**
   * Emote createMany
   */
  export type EmoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emotes.
     */
    data: EmoteCreateManyInput | EmoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Emote createManyAndReturn
   */
  export type EmoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Emotes.
     */
    data: EmoteCreateManyInput | EmoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Emote update
   */
  export type EmoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Emote.
     */
    data: XOR<EmoteUpdateInput, EmoteUncheckedUpdateInput>
    /**
     * Choose, which Emote to update.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote updateMany
   */
  export type EmoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emotes.
     */
    data: XOR<EmoteUpdateManyMutationInput, EmoteUncheckedUpdateManyInput>
    /**
     * Filter which Emotes to update
     */
    where?: EmoteWhereInput
  }

  /**
   * Emote upsert
   */
  export type EmoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Emote to update in case it exists.
     */
    where: EmoteWhereUniqueInput
    /**
     * In case the Emote found by the `where` argument doesn't exist, create a new Emote with this data.
     */
    create: XOR<EmoteCreateInput, EmoteUncheckedCreateInput>
    /**
     * In case the Emote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmoteUpdateInput, EmoteUncheckedUpdateInput>
  }

  /**
   * Emote delete
   */
  export type EmoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
    /**
     * Filter which Emote to delete.
     */
    where: EmoteWhereUniqueInput
  }

  /**
   * Emote deleteMany
   */
  export type EmoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emotes to delete
     */
    where?: EmoteWhereInput
  }

  /**
   * Emote without action
   */
  export type EmoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emote
     */
    select?: EmoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmoteInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    streamStatsId: string | null
    streamId: string | null
    name: string | null
    image: string | null
    description: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    streamStatsId: string | null
    streamId: string | null
    name: string | null
    image: string | null
    description: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    streamStatsId: number
    streamId: number
    name: number
    image: number
    description: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamStatsId?: true
    streamId?: true
    name?: true
    image?: true
    description?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamStatsId?: true
    streamId?: true
    name?: true
    image?: true
    description?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    streamStatsId?: true
    streamId?: true
    name?: true
    image?: true
    description?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    streamStatsId: string | null
    streamId: string | null
    name: string
    image: string
    description: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamStatsId?: boolean
    streamId?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    StreamStats?: boolean | Category$StreamStatsArgs<ExtArgs>
    Stream?: boolean | Category$StreamArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamStatsId?: boolean
    streamId?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
    StreamStats?: boolean | Category$StreamStatsArgs<ExtArgs>
    Stream?: boolean | Category$StreamArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    streamStatsId?: boolean
    streamId?: boolean
    name?: boolean
    image?: boolean
    description?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StreamStats?: boolean | Category$StreamStatsArgs<ExtArgs>
    Stream?: boolean | Category$StreamArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StreamStats?: boolean | Category$StreamStatsArgs<ExtArgs>
    Stream?: boolean | Category$StreamArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      StreamStats: Prisma.$StreamStatsPayload<ExtArgs> | null
      Stream: Prisma.$StreamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      streamStatsId: string | null
      streamId: string | null
      name: string
      image: string
      description: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    StreamStats<T extends Category$StreamStatsArgs<ExtArgs> = {}>(args?: Subset<T, Category$StreamStatsArgs<ExtArgs>>): Prisma__StreamStatsClient<$Result.GetResult<Prisma.$StreamStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Stream<T extends Category$StreamArgs<ExtArgs> = {}>(args?: Subset<T, Category$StreamArgs<ExtArgs>>): Prisma__StreamClient<$Result.GetResult<Prisma.$StreamPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly streamStatsId: FieldRef<"Category", 'String'>
    readonly streamId: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly image: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.StreamStats
   */
  export type Category$StreamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StreamStats
     */
    select?: StreamStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamStatsInclude<ExtArgs> | null
    where?: StreamStatsWhereInput
  }

  /**
   * Category.Stream
   */
  export type Category$StreamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stream
     */
    select?: StreamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StreamInclude<ExtArgs> | null
    where?: StreamWhereInput
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    pinnedMessageId: string | null
    userId: string | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    pinnedMessageId: string | null
    userId: string | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    pinnedMessageId: number
    userId: number
    _all: number
  }


  export type ChatMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    pinnedMessageId?: true
    userId?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    pinnedMessageId?: true
    userId?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    pinnedMessageId?: true
    userId?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithAggregationInput | ChatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    pinnedMessageId: string | null
    userId: string | null
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pinnedMessageId?: boolean
    userId?: boolean
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    pinnedMessage?: boolean | Chat$pinnedMessageArgs<ExtArgs>
    User?: boolean | Chat$UserArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pinnedMessageId?: boolean
    userId?: boolean
    pinnedMessage?: boolean | Chat$pinnedMessageArgs<ExtArgs>
    User?: boolean | Chat$UserArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pinnedMessageId?: boolean
    userId?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    pinnedMessage?: boolean | Chat$pinnedMessageArgs<ExtArgs>
    User?: boolean | Chat$UserArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pinnedMessage?: boolean | Chat$pinnedMessageArgs<ExtArgs>
    User?: boolean | Chat$UserArgs<ExtArgs>
  }

  export type $ChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chat"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      pinnedMessage: Prisma.$MessagePayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      pinnedMessageId: string | null
      userId: string | null
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }

  type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = $Result.GetResult<Prisma.$ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatFindUniqueArgs>(args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatFindFirstArgs>(args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatFindManyArgs>(args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
     */
    create<T extends ChatCreateArgs>(args: SelectSubset<T, ChatCreateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chats.
     * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatCreateManyArgs>(args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chats and returns the data saved in the database.
     * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chats and only return the `id`
     * const chatWithIdOnly = await prisma.chat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
     */
    delete<T extends ChatDeleteArgs>(args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatUpdateArgs>(args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatDeleteManyArgs>(args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatUpdateManyArgs>(args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
     */
    upsert<T extends ChatUpsertArgs>(args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends Chat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    pinnedMessage<T extends Chat$pinnedMessageArgs<ExtArgs> = {}>(args?: Subset<T, Chat$pinnedMessageArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    User<T extends Chat$UserArgs<ExtArgs> = {}>(args?: Subset<T, Chat$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chat model
   */ 
  interface ChatFieldRefs {
    readonly id: FieldRef<"Chat", 'String'>
    readonly createdAt: FieldRef<"Chat", 'DateTime'>
    readonly updatedAt: FieldRef<"Chat", 'DateTime'>
    readonly pinnedMessageId: FieldRef<"Chat", 'String'>
    readonly userId: FieldRef<"Chat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Chat findUnique
   */
  export type ChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findFirst
   */
  export type ChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }

  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chat createManyAndReturn
   */
  export type ChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }

  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }

  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }

  /**
   * Chat.messages
   */
  export type Chat$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Chat.pinnedMessage
   */
  export type Chat$pinnedMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
  }

  /**
   * Chat.User
   */
  export type Chat$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Chat without action
   */
  export type ChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatId: string | null
    senderId: string | null
    replyMessageId: string | null
    content: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    chatId: string | null
    senderId: string | null
    replyMessageId: string | null
    content: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    chatId: number
    senderId: number
    replyMessageId: number
    content: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    chatId?: true
    senderId?: true
    replyMessageId?: true
    content?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    chatId?: true
    senderId?: true
    replyMessageId?: true
    content?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    chatId?: true
    senderId?: true
    replyMessageId?: true
    content?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    chatId: string
    senderId: string
    replyMessageId: string | null
    content: string
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatId?: boolean
    senderId?: boolean
    replyMessageId?: boolean
    content?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Message$replyArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    pinnedInChats?: boolean | Message$pinnedInChatsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatId?: boolean
    senderId?: boolean
    replyMessageId?: boolean
    content?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Message$replyArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatId?: boolean
    senderId?: boolean
    replyMessageId?: boolean
    content?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Message$replyArgs<ExtArgs>
    replies?: boolean | Message$repliesArgs<ExtArgs>
    pinnedInChats?: boolean | Message$pinnedInChatsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    reply?: boolean | Message$replyArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      chat: Prisma.$ChatPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
      reply: Prisma.$MessagePayload<ExtArgs> | null
      replies: Prisma.$MessagePayload<ExtArgs>[]
      pinnedInChats: Prisma.$ChatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      chatId: string
      senderId: string
      replyMessageId: string | null
      content: string
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat<T extends ChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatDefaultArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reply<T extends Message$replyArgs<ExtArgs> = {}>(args?: Subset<T, Message$replyArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends Message$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Message$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    pinnedInChats<T extends Message$pinnedInChatsArgs<ExtArgs> = {}>(args?: Subset<T, Message$pinnedInChatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
    readonly chatId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly replyMessageId: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message.reply
   */
  export type Message$replyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
  }

  /**
   * Message.replies
   */
  export type Message$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message.pinnedInChats
   */
  export type Message$pinnedInChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    link: string | null
    forUserId: string | null
    fromUserId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    link: string | null
    forUserId: string | null
    fromUserId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    content: number
    link: number
    forUserId: number
    fromUserId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    link?: true
    forUserId?: true
    fromUserId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    link?: true
    forUserId?: true
    fromUserId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    link?: true
    forUserId?: true
    fromUserId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    content: string
    link: string | null
    forUserId: string
    fromUserId: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    link?: boolean
    forUserId?: boolean
    fromUserId?: boolean
    forUser?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    link?: boolean
    forUserId?: boolean
    fromUserId?: boolean
    forUser?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    link?: boolean
    forUserId?: boolean
    fromUserId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forUser?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forUser?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      forUser: Prisma.$UserPayload<ExtArgs>
      fromUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      content: string
      link: string | null
      forUserId: string
      fromUserId: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    forUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fromUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly forUserId: FieldRef<"Notification", 'String'>
    readonly fromUserId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type AccountSumAggregateOutputType = {
    expiresAt: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    type: number
    provider: number
    refreshToken: number
    accessToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expiresAt?: true
  }

  export type AccountSumAggregateInputType = {
    expiresAt?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    type: string
    provider: string
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    User?: boolean | Account$UserArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    User?: boolean | Account$UserArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Account$UserArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Account$UserArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      provider: string
      refreshToken: string | null
      accessToken: string | null
      expiresAt: number
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Account$UserArgs<ExtArgs> = {}>(args?: Subset<T, Account$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly expiresAt: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly userId: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.User
   */
  export type Account$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    type: number
    expiresIn: number
    createdAt: number
    _all: number
  }


  export type TokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date
    createdAt: Date
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }


  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      type: $Enums.TokenType
      expiresIn: Date
      createdAt: Date
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'String'>
    readonly email: FieldRef<"Token", 'String'>
    readonly token: FieldRef<"Token", 'String'>
    readonly type: FieldRef<"Token", 'TokenType'>
    readonly expiresIn: FieldRef<"Token", 'DateTime'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    description: 'description',
    banner: 'banner',
    isVerified: 'isVerified',
    isTwoFactorEnabled: 'isTwoFactorEnabled',
    color: 'color',
    countFollowers: 'countFollowers',
    streamId: 'streamId',
    method: 'method',
    balance: 'balance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FollowerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    streamerId: 'streamerId'
  };

  export type FollowerScalarFieldEnum = (typeof FollowerScalarFieldEnum)[keyof typeof FollowerScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    subscriberId: 'subscriberId',
    subscribedId: 'subscribedId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const UserSubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    price: 'price',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSubscriptionScalarFieldEnum = (typeof UserSubscriptionScalarFieldEnum)[keyof typeof UserSubscriptionScalarFieldEnum]


  export const ModeratorScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    streamerId: 'streamerId'
  };

  export type ModeratorScalarFieldEnum = (typeof ModeratorScalarFieldEnum)[keyof typeof ModeratorScalarFieldEnum]


  export const DescriptionPartScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    image: 'image',
    description: 'description',
    url: 'url'
  };

  export type DescriptionPartScalarFieldEnum = (typeof DescriptionPartScalarFieldEnum)[keyof typeof DescriptionPartScalarFieldEnum]


  export const BanScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    moderatorId: 'moderatorId',
    streamerId: 'streamerId',
    reason: 'reason',
    action: 'action',
    expiresAt: 'expiresAt'
  };

  export type BanScalarFieldEnum = (typeof BanScalarFieldEnum)[keyof typeof BanScalarFieldEnum]


  export const StreamerCurrencyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    image: 'image',
    userId: 'userId'
  };

  export type StreamerCurrencyScalarFieldEnum = (typeof StreamerCurrencyScalarFieldEnum)[keyof typeof StreamerCurrencyScalarFieldEnum]


  export const CurrencyBalanceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    streamerCurrencyId: 'streamerCurrencyId',
    count: 'count',
    userId: 'userId'
  };

  export type CurrencyBalanceScalarFieldEnum = (typeof CurrencyBalanceScalarFieldEnum)[keyof typeof CurrencyBalanceScalarFieldEnum]


  export const UserRewardScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    image: 'image',
    description: 'description',
    name: 'name',
    price: 'price'
  };

  export type UserRewardScalarFieldEnum = (typeof UserRewardScalarFieldEnum)[keyof typeof UserRewardScalarFieldEnum]


  export const BuyerRewardScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    rewardId: 'rewardId'
  };

  export type BuyerRewardScalarFieldEnum = (typeof BuyerRewardScalarFieldEnum)[keyof typeof BuyerRewardScalarFieldEnum]


  export const StreamScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    countOnline: 'countOnline',
    tag: 'tag',
    theHighestOnline: 'theHighestOnline',
    theAverageOnline: 'theAverageOnline',
    qualityUrls: 'qualityUrls'
  };

  export type StreamScalarFieldEnum = (typeof StreamScalarFieldEnum)[keyof typeof StreamScalarFieldEnum]


  export const StreamStatsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    whenEnded: 'whenEnded',
    duration: 'duration',
    tag: 'tag',
    theHighestOnline: 'theHighestOnline',
    theAverageOnline: 'theAverageOnline',
    userId: 'userId'
  };

  export type StreamStatsScalarFieldEnum = (typeof StreamStatsScalarFieldEnum)[keyof typeof StreamStatsScalarFieldEnum]


  export const EmoteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    image: 'image',
    tag: 'tag',
    name: 'name',
    userId: 'userId'
  };

  export type EmoteScalarFieldEnum = (typeof EmoteScalarFieldEnum)[keyof typeof EmoteScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    streamStatsId: 'streamStatsId',
    streamId: 'streamId',
    name: 'name',
    image: 'image',
    description: 'description'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    pinnedMessageId: 'pinnedMessageId',
    userId: 'userId'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    chatId: 'chatId',
    senderId: 'senderId',
    replyMessageId: 'replyMessageId',
    content: 'content'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    content: 'content',
    link: 'link',
    forUserId: 'forUserId',
    fromUserId: 'fromUserId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    provider: 'provider',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    type: 'type',
    expiresIn: 'expiresIn',
    createdAt: 'createdAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AuthMethod'
   */
  export type EnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod'>
    


  /**
   * Reference to a field of type 'AuthMethod[]'
   */
  export type ListEnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'banAction'
   */
  export type EnumbanActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'banAction'>
    


  /**
   * Reference to a field of type 'banAction[]'
   */
  export type ListEnumbanActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'banAction[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    description?: StringFilter<"User"> | string
    banner?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    color?: StringFilter<"User"> | string
    countFollowers?: IntFilter<"User"> | number
    streamId?: StringNullableFilter<"User"> | string | null
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    balance?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    descriptionParts?: DescriptionPartListRelationFilter
    following?: FollowerListRelationFilter
    followers?: FollowerListRelationFilter
    bans?: BanListRelationFilter
    issuedBans?: BanListRelationFilter
    userModerators?: ModeratorListRelationFilter
    appointedModerators?: ModeratorListRelationFilter
    streamerCurrency?: StreamerCurrencyListRelationFilter
    currencyBalance?: CurrencyBalanceListRelationFilter
    userRewards?: UserRewardListRelationFilter
    boughtRewards?: BuyerRewardListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    subscribers?: SubscriptionListRelationFilter
    Emote?: EmoteListRelationFilter
    Stream?: XOR<StreamNullableRelationFilter, StreamWhereInput> | null
    StreamStats?: StreamStatsListRelationFilter
    chat?: ChatListRelationFilter
    Message?: MessageListRelationFilter
    receivedNotification?: NotificationListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    account?: AccountListRelationFilter
    UserSubscription?: UserSubscriptionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    color?: SortOrder
    countFollowers?: SortOrder
    streamId?: SortOrderInput | SortOrder
    method?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    descriptionParts?: DescriptionPartOrderByRelationAggregateInput
    following?: FollowerOrderByRelationAggregateInput
    followers?: FollowerOrderByRelationAggregateInput
    bans?: BanOrderByRelationAggregateInput
    issuedBans?: BanOrderByRelationAggregateInput
    userModerators?: ModeratorOrderByRelationAggregateInput
    appointedModerators?: ModeratorOrderByRelationAggregateInput
    streamerCurrency?: StreamerCurrencyOrderByRelationAggregateInput
    currencyBalance?: CurrencyBalanceOrderByRelationAggregateInput
    userRewards?: UserRewardOrderByRelationAggregateInput
    boughtRewards?: BuyerRewardOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    subscribers?: SubscriptionOrderByRelationAggregateInput
    Emote?: EmoteOrderByRelationAggregateInput
    Stream?: StreamOrderByWithRelationInput
    StreamStats?: StreamStatsOrderByRelationAggregateInput
    chat?: ChatOrderByRelationAggregateInput
    Message?: MessageOrderByRelationAggregateInput
    receivedNotification?: NotificationOrderByRelationAggregateInput
    sentNotifications?: NotificationOrderByRelationAggregateInput
    account?: AccountOrderByRelationAggregateInput
    UserSubscription?: UserSubscriptionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    streamId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    description?: StringFilter<"User"> | string
    banner?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    color?: StringFilter<"User"> | string
    countFollowers?: IntFilter<"User"> | number
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    balance?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    descriptionParts?: DescriptionPartListRelationFilter
    following?: FollowerListRelationFilter
    followers?: FollowerListRelationFilter
    bans?: BanListRelationFilter
    issuedBans?: BanListRelationFilter
    userModerators?: ModeratorListRelationFilter
    appointedModerators?: ModeratorListRelationFilter
    streamerCurrency?: StreamerCurrencyListRelationFilter
    currencyBalance?: CurrencyBalanceListRelationFilter
    userRewards?: UserRewardListRelationFilter
    boughtRewards?: BuyerRewardListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    subscribers?: SubscriptionListRelationFilter
    Emote?: EmoteListRelationFilter
    Stream?: XOR<StreamNullableRelationFilter, StreamWhereInput> | null
    StreamStats?: StreamStatsListRelationFilter
    chat?: ChatListRelationFilter
    Message?: MessageListRelationFilter
    receivedNotification?: NotificationListRelationFilter
    sentNotifications?: NotificationListRelationFilter
    account?: AccountListRelationFilter
    UserSubscription?: UserSubscriptionListRelationFilter
  }, "id" | "email" | "streamId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    color?: SortOrder
    countFollowers?: SortOrder
    streamId?: SortOrderInput | SortOrder
    method?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringWithAggregatesFilter<"User"> | string
    description?: StringWithAggregatesFilter<"User"> | string
    banner?: StringWithAggregatesFilter<"User"> | string
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    color?: StringWithAggregatesFilter<"User"> | string
    countFollowers?: IntWithAggregatesFilter<"User"> | number
    streamId?: StringNullableWithAggregatesFilter<"User"> | string | null
    method?: EnumAuthMethodWithAggregatesFilter<"User"> | $Enums.AuthMethod
    balance?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FollowerWhereInput = {
    AND?: FollowerWhereInput | FollowerWhereInput[]
    OR?: FollowerWhereInput[]
    NOT?: FollowerWhereInput | FollowerWhereInput[]
    id?: StringFilter<"Follower"> | string
    createdAt?: DateTimeFilter<"Follower"> | Date | string
    updatedAt?: DateTimeFilter<"Follower"> | Date | string
    userId?: StringFilter<"Follower"> | string
    streamerId?: StringFilter<"Follower"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FollowerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
    user?: UserOrderByWithRelationInput
    streamer?: UserOrderByWithRelationInput
  }

  export type FollowerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FollowerWhereInput | FollowerWhereInput[]
    OR?: FollowerWhereInput[]
    NOT?: FollowerWhereInput | FollowerWhereInput[]
    createdAt?: DateTimeFilter<"Follower"> | Date | string
    updatedAt?: DateTimeFilter<"Follower"> | Date | string
    userId?: StringFilter<"Follower"> | string
    streamerId?: StringFilter<"Follower"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FollowerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
    _count?: FollowerCountOrderByAggregateInput
    _max?: FollowerMaxOrderByAggregateInput
    _min?: FollowerMinOrderByAggregateInput
  }

  export type FollowerScalarWhereWithAggregatesInput = {
    AND?: FollowerScalarWhereWithAggregatesInput | FollowerScalarWhereWithAggregatesInput[]
    OR?: FollowerScalarWhereWithAggregatesInput[]
    NOT?: FollowerScalarWhereWithAggregatesInput | FollowerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follower"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Follower"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Follower"> | Date | string
    userId?: StringWithAggregatesFilter<"Follower"> | string
    streamerId?: StringWithAggregatesFilter<"Follower"> | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    subscriberId?: StringFilter<"Subscription"> | string
    subscribedId?: StringFilter<"Subscription"> | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    subscriber?: XOR<UserRelationFilter, UserWhereInput>
    subscribed?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    subscribedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriber?: UserOrderByWithRelationInput
    subscribed?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    subscriberId?: StringFilter<"Subscription"> | string
    subscribedId?: StringFilter<"Subscription"> | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    subscriber?: XOR<UserRelationFilter, UserWhereInput>
    subscribed?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    subscribedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    subscriberId?: StringWithAggregatesFilter<"Subscription"> | string
    subscribedId?: StringWithAggregatesFilter<"Subscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type UserSubscriptionWhereInput = {
    AND?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    OR?: UserSubscriptionWhereInput[]
    NOT?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    id?: StringFilter<"UserSubscription"> | string
    userId?: StringFilter<"UserSubscription"> | string
    price?: IntFilter<"UserSubscription"> | number
    icon?: StringFilter<"UserSubscription"> | string
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    OR?: UserSubscriptionWhereInput[]
    NOT?: UserSubscriptionWhereInput | UserSubscriptionWhereInput[]
    userId?: StringFilter<"UserSubscription"> | string
    price?: IntFilter<"UserSubscription"> | number
    icon?: StringFilter<"UserSubscription"> | string
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSubscriptionCountOrderByAggregateInput
    _avg?: UserSubscriptionAvgOrderByAggregateInput
    _max?: UserSubscriptionMaxOrderByAggregateInput
    _min?: UserSubscriptionMinOrderByAggregateInput
    _sum?: UserSubscriptionSumOrderByAggregateInput
  }

  export type UserSubscriptionScalarWhereWithAggregatesInput = {
    AND?: UserSubscriptionScalarWhereWithAggregatesInput | UserSubscriptionScalarWhereWithAggregatesInput[]
    OR?: UserSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: UserSubscriptionScalarWhereWithAggregatesInput | UserSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSubscription"> | string
    userId?: StringWithAggregatesFilter<"UserSubscription"> | string
    price?: IntWithAggregatesFilter<"UserSubscription"> | number
    icon?: StringWithAggregatesFilter<"UserSubscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSubscription"> | Date | string
  }

  export type ModeratorWhereInput = {
    AND?: ModeratorWhereInput | ModeratorWhereInput[]
    OR?: ModeratorWhereInput[]
    NOT?: ModeratorWhereInput | ModeratorWhereInput[]
    id?: StringFilter<"Moderator"> | string
    createdAt?: DateTimeFilter<"Moderator"> | Date | string
    updatedAt?: DateTimeFilter<"Moderator"> | Date | string
    userId?: StringFilter<"Moderator"> | string
    streamerId?: StringFilter<"Moderator"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
    issuedBans?: BanListRelationFilter
  }

  export type ModeratorOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
    user?: UserOrderByWithRelationInput
    streamer?: UserOrderByWithRelationInput
    issuedBans?: BanOrderByRelationAggregateInput
  }

  export type ModeratorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ModeratorWhereInput | ModeratorWhereInput[]
    OR?: ModeratorWhereInput[]
    NOT?: ModeratorWhereInput | ModeratorWhereInput[]
    createdAt?: DateTimeFilter<"Moderator"> | Date | string
    updatedAt?: DateTimeFilter<"Moderator"> | Date | string
    userId?: StringFilter<"Moderator"> | string
    streamerId?: StringFilter<"Moderator"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
    issuedBans?: BanListRelationFilter
  }, "id">

  export type ModeratorOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
    _count?: ModeratorCountOrderByAggregateInput
    _max?: ModeratorMaxOrderByAggregateInput
    _min?: ModeratorMinOrderByAggregateInput
  }

  export type ModeratorScalarWhereWithAggregatesInput = {
    AND?: ModeratorScalarWhereWithAggregatesInput | ModeratorScalarWhereWithAggregatesInput[]
    OR?: ModeratorScalarWhereWithAggregatesInput[]
    NOT?: ModeratorScalarWhereWithAggregatesInput | ModeratorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Moderator"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Moderator"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Moderator"> | Date | string
    userId?: StringWithAggregatesFilter<"Moderator"> | string
    streamerId?: StringWithAggregatesFilter<"Moderator"> | string
  }

  export type DescriptionPartWhereInput = {
    AND?: DescriptionPartWhereInput | DescriptionPartWhereInput[]
    OR?: DescriptionPartWhereInput[]
    NOT?: DescriptionPartWhereInput | DescriptionPartWhereInput[]
    id?: StringFilter<"DescriptionPart"> | string
    createdAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    updatedAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    userId?: StringFilter<"DescriptionPart"> | string
    image?: StringFilter<"DescriptionPart"> | string
    description?: StringFilter<"DescriptionPart"> | string
    url?: StringFilter<"DescriptionPart"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DescriptionPartOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    url?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DescriptionPartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DescriptionPartWhereInput | DescriptionPartWhereInput[]
    OR?: DescriptionPartWhereInput[]
    NOT?: DescriptionPartWhereInput | DescriptionPartWhereInput[]
    createdAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    updatedAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    userId?: StringFilter<"DescriptionPart"> | string
    image?: StringFilter<"DescriptionPart"> | string
    description?: StringFilter<"DescriptionPart"> | string
    url?: StringFilter<"DescriptionPart"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DescriptionPartOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    url?: SortOrder
    _count?: DescriptionPartCountOrderByAggregateInput
    _max?: DescriptionPartMaxOrderByAggregateInput
    _min?: DescriptionPartMinOrderByAggregateInput
  }

  export type DescriptionPartScalarWhereWithAggregatesInput = {
    AND?: DescriptionPartScalarWhereWithAggregatesInput | DescriptionPartScalarWhereWithAggregatesInput[]
    OR?: DescriptionPartScalarWhereWithAggregatesInput[]
    NOT?: DescriptionPartScalarWhereWithAggregatesInput | DescriptionPartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DescriptionPart"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DescriptionPart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DescriptionPart"> | Date | string
    userId?: StringWithAggregatesFilter<"DescriptionPart"> | string
    image?: StringWithAggregatesFilter<"DescriptionPart"> | string
    description?: StringWithAggregatesFilter<"DescriptionPart"> | string
    url?: StringWithAggregatesFilter<"DescriptionPart"> | string
  }

  export type BanWhereInput = {
    AND?: BanWhereInput | BanWhereInput[]
    OR?: BanWhereInput[]
    NOT?: BanWhereInput | BanWhereInput[]
    id?: StringFilter<"Ban"> | string
    createdAt?: DateTimeFilter<"Ban"> | Date | string
    updatedAt?: DateTimeFilter<"Ban"> | Date | string
    userId?: StringFilter<"Ban"> | string
    moderatorId?: StringFilter<"Ban"> | string
    streamerId?: StringFilter<"Ban"> | string
    reason?: StringFilter<"Ban"> | string
    action?: EnumbanActionFilter<"Ban"> | $Enums.banAction
    expiresAt?: DateTimeNullableFilter<"Ban"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    moderator?: XOR<ModeratorRelationFilter, ModeratorWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BanOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    moderatorId?: SortOrder
    streamerId?: SortOrder
    reason?: SortOrder
    action?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    moderator?: ModeratorOrderByWithRelationInput
    streamer?: UserOrderByWithRelationInput
  }

  export type BanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BanWhereInput | BanWhereInput[]
    OR?: BanWhereInput[]
    NOT?: BanWhereInput | BanWhereInput[]
    createdAt?: DateTimeFilter<"Ban"> | Date | string
    updatedAt?: DateTimeFilter<"Ban"> | Date | string
    userId?: StringFilter<"Ban"> | string
    moderatorId?: StringFilter<"Ban"> | string
    streamerId?: StringFilter<"Ban"> | string
    reason?: StringFilter<"Ban"> | string
    action?: EnumbanActionFilter<"Ban"> | $Enums.banAction
    expiresAt?: DateTimeNullableFilter<"Ban"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    moderator?: XOR<ModeratorRelationFilter, ModeratorWhereInput>
    streamer?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BanOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    moderatorId?: SortOrder
    streamerId?: SortOrder
    reason?: SortOrder
    action?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: BanCountOrderByAggregateInput
    _max?: BanMaxOrderByAggregateInput
    _min?: BanMinOrderByAggregateInput
  }

  export type BanScalarWhereWithAggregatesInput = {
    AND?: BanScalarWhereWithAggregatesInput | BanScalarWhereWithAggregatesInput[]
    OR?: BanScalarWhereWithAggregatesInput[]
    NOT?: BanScalarWhereWithAggregatesInput | BanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ban"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ban"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ban"> | Date | string
    userId?: StringWithAggregatesFilter<"Ban"> | string
    moderatorId?: StringWithAggregatesFilter<"Ban"> | string
    streamerId?: StringWithAggregatesFilter<"Ban"> | string
    reason?: StringWithAggregatesFilter<"Ban"> | string
    action?: EnumbanActionWithAggregatesFilter<"Ban"> | $Enums.banAction
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Ban"> | Date | string | null
  }

  export type StreamerCurrencyWhereInput = {
    AND?: StreamerCurrencyWhereInput | StreamerCurrencyWhereInput[]
    OR?: StreamerCurrencyWhereInput[]
    NOT?: StreamerCurrencyWhereInput | StreamerCurrencyWhereInput[]
    id?: StringFilter<"StreamerCurrency"> | string
    createdAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    updatedAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    name?: StringFilter<"StreamerCurrency"> | string
    image?: StringFilter<"StreamerCurrency"> | string
    userId?: StringFilter<"StreamerCurrency"> | string
    currencyBalances?: CurrencyBalanceListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StreamerCurrencyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    currencyBalances?: CurrencyBalanceOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type StreamerCurrencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StreamerCurrencyWhereInput | StreamerCurrencyWhereInput[]
    OR?: StreamerCurrencyWhereInput[]
    NOT?: StreamerCurrencyWhereInput | StreamerCurrencyWhereInput[]
    createdAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    updatedAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    name?: StringFilter<"StreamerCurrency"> | string
    image?: StringFilter<"StreamerCurrency"> | string
    userId?: StringFilter<"StreamerCurrency"> | string
    currencyBalances?: CurrencyBalanceListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type StreamerCurrencyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    _count?: StreamerCurrencyCountOrderByAggregateInput
    _max?: StreamerCurrencyMaxOrderByAggregateInput
    _min?: StreamerCurrencyMinOrderByAggregateInput
  }

  export type StreamerCurrencyScalarWhereWithAggregatesInput = {
    AND?: StreamerCurrencyScalarWhereWithAggregatesInput | StreamerCurrencyScalarWhereWithAggregatesInput[]
    OR?: StreamerCurrencyScalarWhereWithAggregatesInput[]
    NOT?: StreamerCurrencyScalarWhereWithAggregatesInput | StreamerCurrencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StreamerCurrency"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StreamerCurrency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StreamerCurrency"> | Date | string
    name?: StringWithAggregatesFilter<"StreamerCurrency"> | string
    image?: StringWithAggregatesFilter<"StreamerCurrency"> | string
    userId?: StringWithAggregatesFilter<"StreamerCurrency"> | string
  }

  export type CurrencyBalanceWhereInput = {
    AND?: CurrencyBalanceWhereInput | CurrencyBalanceWhereInput[]
    OR?: CurrencyBalanceWhereInput[]
    NOT?: CurrencyBalanceWhereInput | CurrencyBalanceWhereInput[]
    id?: StringFilter<"CurrencyBalance"> | string
    createdAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    updatedAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    streamerCurrencyId?: StringNullableFilter<"CurrencyBalance"> | string | null
    count?: IntFilter<"CurrencyBalance"> | number
    userId?: StringFilter<"CurrencyBalance"> | string
    streamerCurrency?: XOR<StreamerCurrencyNullableRelationFilter, StreamerCurrencyWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CurrencyBalanceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamerCurrencyId?: SortOrderInput | SortOrder
    count?: SortOrder
    userId?: SortOrder
    streamerCurrency?: StreamerCurrencyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CurrencyBalanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CurrencyBalanceWhereInput | CurrencyBalanceWhereInput[]
    OR?: CurrencyBalanceWhereInput[]
    NOT?: CurrencyBalanceWhereInput | CurrencyBalanceWhereInput[]
    createdAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    updatedAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    streamerCurrencyId?: StringNullableFilter<"CurrencyBalance"> | string | null
    count?: IntFilter<"CurrencyBalance"> | number
    userId?: StringFilter<"CurrencyBalance"> | string
    streamerCurrency?: XOR<StreamerCurrencyNullableRelationFilter, StreamerCurrencyWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CurrencyBalanceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamerCurrencyId?: SortOrderInput | SortOrder
    count?: SortOrder
    userId?: SortOrder
    _count?: CurrencyBalanceCountOrderByAggregateInput
    _avg?: CurrencyBalanceAvgOrderByAggregateInput
    _max?: CurrencyBalanceMaxOrderByAggregateInput
    _min?: CurrencyBalanceMinOrderByAggregateInput
    _sum?: CurrencyBalanceSumOrderByAggregateInput
  }

  export type CurrencyBalanceScalarWhereWithAggregatesInput = {
    AND?: CurrencyBalanceScalarWhereWithAggregatesInput | CurrencyBalanceScalarWhereWithAggregatesInput[]
    OR?: CurrencyBalanceScalarWhereWithAggregatesInput[]
    NOT?: CurrencyBalanceScalarWhereWithAggregatesInput | CurrencyBalanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CurrencyBalance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CurrencyBalance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CurrencyBalance"> | Date | string
    streamerCurrencyId?: StringNullableWithAggregatesFilter<"CurrencyBalance"> | string | null
    count?: IntWithAggregatesFilter<"CurrencyBalance"> | number
    userId?: StringWithAggregatesFilter<"CurrencyBalance"> | string
  }

  export type UserRewardWhereInput = {
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    id?: StringFilter<"UserReward"> | string
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    userId?: StringFilter<"UserReward"> | string
    image?: StringFilter<"UserReward"> | string
    description?: StringFilter<"UserReward"> | string
    name?: StringFilter<"UserReward"> | string
    price?: IntFilter<"UserReward"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    BuyerRewards?: BuyerRewardListRelationFilter
  }

  export type UserRewardOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    name?: SortOrder
    price?: SortOrder
    user?: UserOrderByWithRelationInput
    BuyerRewards?: BuyerRewardOrderByRelationAggregateInput
  }

  export type UserRewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    userId?: StringFilter<"UserReward"> | string
    image?: StringFilter<"UserReward"> | string
    description?: StringFilter<"UserReward"> | string
    name?: StringFilter<"UserReward"> | string
    price?: IntFilter<"UserReward"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    BuyerRewards?: BuyerRewardListRelationFilter
  }, "id">

  export type UserRewardOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    name?: SortOrder
    price?: SortOrder
    _count?: UserRewardCountOrderByAggregateInput
    _avg?: UserRewardAvgOrderByAggregateInput
    _max?: UserRewardMaxOrderByAggregateInput
    _min?: UserRewardMinOrderByAggregateInput
    _sum?: UserRewardSumOrderByAggregateInput
  }

  export type UserRewardScalarWhereWithAggregatesInput = {
    AND?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    OR?: UserRewardScalarWhereWithAggregatesInput[]
    NOT?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserReward"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    userId?: StringWithAggregatesFilter<"UserReward"> | string
    image?: StringWithAggregatesFilter<"UserReward"> | string
    description?: StringWithAggregatesFilter<"UserReward"> | string
    name?: StringWithAggregatesFilter<"UserReward"> | string
    price?: IntWithAggregatesFilter<"UserReward"> | number
  }

  export type BuyerRewardWhereInput = {
    AND?: BuyerRewardWhereInput | BuyerRewardWhereInput[]
    OR?: BuyerRewardWhereInput[]
    NOT?: BuyerRewardWhereInput | BuyerRewardWhereInput[]
    id?: StringFilter<"BuyerReward"> | string
    createdAt?: DateTimeFilter<"BuyerReward"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerReward"> | Date | string
    userId?: StringFilter<"BuyerReward"> | string
    rewardId?: StringFilter<"BuyerReward"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    reward?: XOR<UserRewardRelationFilter, UserRewardWhereInput>
  }

  export type BuyerRewardOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    rewardId?: SortOrder
    user?: UserOrderByWithRelationInput
    reward?: UserRewardOrderByWithRelationInput
  }

  export type BuyerRewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuyerRewardWhereInput | BuyerRewardWhereInput[]
    OR?: BuyerRewardWhereInput[]
    NOT?: BuyerRewardWhereInput | BuyerRewardWhereInput[]
    createdAt?: DateTimeFilter<"BuyerReward"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerReward"> | Date | string
    userId?: StringFilter<"BuyerReward"> | string
    rewardId?: StringFilter<"BuyerReward"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    reward?: XOR<UserRewardRelationFilter, UserRewardWhereInput>
  }, "id">

  export type BuyerRewardOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    rewardId?: SortOrder
    _count?: BuyerRewardCountOrderByAggregateInput
    _max?: BuyerRewardMaxOrderByAggregateInput
    _min?: BuyerRewardMinOrderByAggregateInput
  }

  export type BuyerRewardScalarWhereWithAggregatesInput = {
    AND?: BuyerRewardScalarWhereWithAggregatesInput | BuyerRewardScalarWhereWithAggregatesInput[]
    OR?: BuyerRewardScalarWhereWithAggregatesInput[]
    NOT?: BuyerRewardScalarWhereWithAggregatesInput | BuyerRewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BuyerReward"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BuyerReward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BuyerReward"> | Date | string
    userId?: StringWithAggregatesFilter<"BuyerReward"> | string
    rewardId?: StringWithAggregatesFilter<"BuyerReward"> | string
  }

  export type StreamWhereInput = {
    AND?: StreamWhereInput | StreamWhereInput[]
    OR?: StreamWhereInput[]
    NOT?: StreamWhereInput | StreamWhereInput[]
    id?: StringFilter<"Stream"> | string
    createdAt?: DateTimeFilter<"Stream"> | Date | string
    updatedAt?: DateTimeFilter<"Stream"> | Date | string
    name?: StringFilter<"Stream"> | string
    countOnline?: IntFilter<"Stream"> | number
    tag?: StringNullableListFilter<"Stream">
    theHighestOnline?: IntFilter<"Stream"> | number
    theAverageOnline?: IntFilter<"Stream"> | number
    qualityUrls?: JsonFilter<"Stream">
    categories?: CategoryListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type StreamOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    countOnline?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    qualityUrls?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type StreamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StreamWhereInput | StreamWhereInput[]
    OR?: StreamWhereInput[]
    NOT?: StreamWhereInput | StreamWhereInput[]
    createdAt?: DateTimeFilter<"Stream"> | Date | string
    updatedAt?: DateTimeFilter<"Stream"> | Date | string
    name?: StringFilter<"Stream"> | string
    countOnline?: IntFilter<"Stream"> | number
    tag?: StringNullableListFilter<"Stream">
    theHighestOnline?: IntFilter<"Stream"> | number
    theAverageOnline?: IntFilter<"Stream"> | number
    qualityUrls?: JsonFilter<"Stream">
    categories?: CategoryListRelationFilter
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type StreamOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    countOnline?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    qualityUrls?: SortOrder
    _count?: StreamCountOrderByAggregateInput
    _avg?: StreamAvgOrderByAggregateInput
    _max?: StreamMaxOrderByAggregateInput
    _min?: StreamMinOrderByAggregateInput
    _sum?: StreamSumOrderByAggregateInput
  }

  export type StreamScalarWhereWithAggregatesInput = {
    AND?: StreamScalarWhereWithAggregatesInput | StreamScalarWhereWithAggregatesInput[]
    OR?: StreamScalarWhereWithAggregatesInput[]
    NOT?: StreamScalarWhereWithAggregatesInput | StreamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stream"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Stream"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stream"> | Date | string
    name?: StringWithAggregatesFilter<"Stream"> | string
    countOnline?: IntWithAggregatesFilter<"Stream"> | number
    tag?: StringNullableListFilter<"Stream">
    theHighestOnline?: IntWithAggregatesFilter<"Stream"> | number
    theAverageOnline?: IntWithAggregatesFilter<"Stream"> | number
    qualityUrls?: JsonWithAggregatesFilter<"Stream">
  }

  export type StreamStatsWhereInput = {
    AND?: StreamStatsWhereInput | StreamStatsWhereInput[]
    OR?: StreamStatsWhereInput[]
    NOT?: StreamStatsWhereInput | StreamStatsWhereInput[]
    id?: StringFilter<"StreamStats"> | string
    createdAt?: DateTimeFilter<"StreamStats"> | Date | string
    updatedAt?: DateTimeFilter<"StreamStats"> | Date | string
    name?: StringFilter<"StreamStats"> | string
    whenEnded?: DateTimeFilter<"StreamStats"> | Date | string
    duration?: IntFilter<"StreamStats"> | number
    tag?: StringNullableListFilter<"StreamStats">
    theHighestOnline?: IntFilter<"StreamStats"> | number
    theAverageOnline?: IntFilter<"StreamStats"> | number
    userId?: StringFilter<"StreamStats"> | string
    categories?: CategoryListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StreamStatsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    whenEnded?: SortOrder
    duration?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    userId?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type StreamStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StreamStatsWhereInput | StreamStatsWhereInput[]
    OR?: StreamStatsWhereInput[]
    NOT?: StreamStatsWhereInput | StreamStatsWhereInput[]
    createdAt?: DateTimeFilter<"StreamStats"> | Date | string
    updatedAt?: DateTimeFilter<"StreamStats"> | Date | string
    name?: StringFilter<"StreamStats"> | string
    whenEnded?: DateTimeFilter<"StreamStats"> | Date | string
    duration?: IntFilter<"StreamStats"> | number
    tag?: StringNullableListFilter<"StreamStats">
    theHighestOnline?: IntFilter<"StreamStats"> | number
    theAverageOnline?: IntFilter<"StreamStats"> | number
    userId?: StringFilter<"StreamStats"> | string
    categories?: CategoryListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type StreamStatsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    whenEnded?: SortOrder
    duration?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    userId?: SortOrder
    _count?: StreamStatsCountOrderByAggregateInput
    _avg?: StreamStatsAvgOrderByAggregateInput
    _max?: StreamStatsMaxOrderByAggregateInput
    _min?: StreamStatsMinOrderByAggregateInput
    _sum?: StreamStatsSumOrderByAggregateInput
  }

  export type StreamStatsScalarWhereWithAggregatesInput = {
    AND?: StreamStatsScalarWhereWithAggregatesInput | StreamStatsScalarWhereWithAggregatesInput[]
    OR?: StreamStatsScalarWhereWithAggregatesInput[]
    NOT?: StreamStatsScalarWhereWithAggregatesInput | StreamStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StreamStats"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StreamStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StreamStats"> | Date | string
    name?: StringWithAggregatesFilter<"StreamStats"> | string
    whenEnded?: DateTimeWithAggregatesFilter<"StreamStats"> | Date | string
    duration?: IntWithAggregatesFilter<"StreamStats"> | number
    tag?: StringNullableListFilter<"StreamStats">
    theHighestOnline?: IntWithAggregatesFilter<"StreamStats"> | number
    theAverageOnline?: IntWithAggregatesFilter<"StreamStats"> | number
    userId?: StringWithAggregatesFilter<"StreamStats"> | string
  }

  export type EmoteWhereInput = {
    AND?: EmoteWhereInput | EmoteWhereInput[]
    OR?: EmoteWhereInput[]
    NOT?: EmoteWhereInput | EmoteWhereInput[]
    id?: StringFilter<"Emote"> | string
    createdAt?: DateTimeFilter<"Emote"> | Date | string
    updatedAt?: DateTimeFilter<"Emote"> | Date | string
    image?: StringFilter<"Emote"> | string
    tag?: StringFilter<"Emote"> | string
    name?: StringFilter<"Emote"> | string
    userId?: StringFilter<"Emote"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EmoteOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EmoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tag?: string
    AND?: EmoteWhereInput | EmoteWhereInput[]
    OR?: EmoteWhereInput[]
    NOT?: EmoteWhereInput | EmoteWhereInput[]
    createdAt?: DateTimeFilter<"Emote"> | Date | string
    updatedAt?: DateTimeFilter<"Emote"> | Date | string
    image?: StringFilter<"Emote"> | string
    name?: StringFilter<"Emote"> | string
    userId?: StringFilter<"Emote"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "tag">

  export type EmoteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: EmoteCountOrderByAggregateInput
    _max?: EmoteMaxOrderByAggregateInput
    _min?: EmoteMinOrderByAggregateInput
  }

  export type EmoteScalarWhereWithAggregatesInput = {
    AND?: EmoteScalarWhereWithAggregatesInput | EmoteScalarWhereWithAggregatesInput[]
    OR?: EmoteScalarWhereWithAggregatesInput[]
    NOT?: EmoteScalarWhereWithAggregatesInput | EmoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Emote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Emote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Emote"> | Date | string
    image?: StringWithAggregatesFilter<"Emote"> | string
    tag?: StringWithAggregatesFilter<"Emote"> | string
    name?: StringWithAggregatesFilter<"Emote"> | string
    userId?: StringWithAggregatesFilter<"Emote"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    streamStatsId?: StringNullableFilter<"Category"> | string | null
    streamId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    image?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    StreamStats?: XOR<StreamStatsNullableRelationFilter, StreamStatsWhereInput> | null
    Stream?: XOR<StreamNullableRelationFilter, StreamWhereInput> | null
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamStatsId?: SortOrderInput | SortOrder
    streamId?: SortOrderInput | SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    StreamStats?: StreamStatsOrderByWithRelationInput
    Stream?: StreamOrderByWithRelationInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    streamStatsId?: StringNullableFilter<"Category"> | string | null
    streamId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    image?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    StreamStats?: XOR<StreamStatsNullableRelationFilter, StreamStatsWhereInput> | null
    Stream?: XOR<StreamNullableRelationFilter, StreamWhereInput> | null
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamStatsId?: SortOrderInput | SortOrder
    streamId?: SortOrderInput | SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    streamStatsId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    streamId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    name?: StringWithAggregatesFilter<"Category"> | string
    image?: StringWithAggregatesFilter<"Category"> | string
    description?: StringWithAggregatesFilter<"Category"> | string
  }

  export type ChatWhereInput = {
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    id?: StringFilter<"Chat"> | string
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    pinnedMessageId?: StringNullableFilter<"Chat"> | string | null
    userId?: StringNullableFilter<"Chat"> | string | null
    messages?: MessageListRelationFilter
    pinnedMessage?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pinnedMessageId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    messages?: MessageOrderByRelationAggregateInput
    pinnedMessage?: MessageOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type ChatWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    pinnedMessageId?: StringNullableFilter<"Chat"> | string | null
    userId?: StringNullableFilter<"Chat"> | string | null
    messages?: MessageListRelationFilter
    pinnedMessage?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pinnedMessageId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: ChatCountOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    OR?: ChatScalarWhereWithAggregatesInput[]
    NOT?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chat"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
    pinnedMessageId?: StringNullableWithAggregatesFilter<"Chat"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Chat"> | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    replyMessageId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
    reply?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    pinnedInChats?: ChatListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatId?: SortOrder
    senderId?: SortOrder
    replyMessageId?: SortOrderInput | SortOrder
    content?: SortOrder
    chat?: ChatOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    reply?: MessageOrderByWithRelationInput
    replies?: MessageOrderByRelationAggregateInput
    pinnedInChats?: ChatOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    replyMessageId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
    sender?: XOR<UserRelationFilter, UserWhereInput>
    reply?: XOR<MessageNullableRelationFilter, MessageWhereInput> | null
    replies?: MessageListRelationFilter
    pinnedInChats?: ChatListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatId?: SortOrder
    senderId?: SortOrder
    replyMessageId?: SortOrderInput | SortOrder
    content?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    chatId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    replyMessageId?: StringNullableWithAggregatesFilter<"Message"> | string | null
    content?: StringWithAggregatesFilter<"Message"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    content?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    forUserId?: StringFilter<"Notification"> | string
    fromUserId?: StringFilter<"Notification"> | string
    forUser?: XOR<UserRelationFilter, UserWhereInput>
    fromUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    link?: SortOrderInput | SortOrder
    forUserId?: SortOrder
    fromUserId?: SortOrder
    forUser?: UserOrderByWithRelationInput
    fromUser?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    content?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    forUserId?: StringFilter<"Notification"> | string
    fromUserId?: StringFilter<"Notification"> | string
    forUser?: XOR<UserRelationFilter, UserWhereInput>
    fromUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    link?: SortOrderInput | SortOrder
    forUserId?: SortOrder
    fromUserId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    content?: StringWithAggregatesFilter<"Notification"> | string
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    forUserId?: StringWithAggregatesFilter<"Notification"> | string
    fromUserId?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expiresAt?: IntWithAggregatesFilter<"Account"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: StringFilter<"Token"> | string
    email?: StringFilter<"Token"> | string
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    email?: StringFilter<"Token"> | string
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }, "id">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Token"> | string
    email?: StringWithAggregatesFilter<"Token"> | string
    token?: StringWithAggregatesFilter<"Token"> | string
    type?: EnumTokenTypeWithAggregatesFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowerCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFollowingInput
    streamer: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowerUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
  }

  export type FollowerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFollowingNestedInput
    streamer?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowerCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
  }

  export type FollowerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriber: UserCreateNestedOneWithoutSubscriptionsInput
    subscribed: UserCreateNestedOneWithoutSubscribersInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    subscriberId: string
    subscribedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriber?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    subscribed?: UserUpdateOneRequiredWithoutSubscribersNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: StringFieldUpdateOperationsInput | string
    subscribedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    subscriberId: string
    subscribedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: StringFieldUpdateOperationsInput | string
    subscribedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionCreateInput = {
    id?: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserSubscriptionInput
  }

  export type UserSubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserSubscriptionNestedInput
  }

  export type UserSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionCreateManyInput = {
    id?: string
    userId: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModeratorCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAppointedModeratorsInput
    streamer: UserCreateNestedOneWithoutUserModeratorsInput
    issuedBans?: BanCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
    issuedBans?: BanUncheckedCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointedModeratorsNestedInput
    streamer?: UserUpdateOneRequiredWithoutUserModeratorsNestedInput
    issuedBans?: BanUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    issuedBans?: BanUncheckedUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
  }

  export type ModeratorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModeratorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionPartCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description: string
    url: string
    user: UserCreateNestedOneWithoutDescriptionPartsInput
  }

  export type DescriptionPartUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    image: string
    description: string
    url: string
  }

  export type DescriptionPartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDescriptionPartsNestedInput
  }

  export type DescriptionPartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionPartCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    image: string
    description: string
    url: string
  }

  export type DescriptionPartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionPartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BanCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutBansInput
    moderator: ModeratorCreateNestedOneWithoutIssuedBansInput
    streamer: UserCreateNestedOneWithoutIssuedBansInput
  }

  export type BanUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    moderatorId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBansNestedInput
    moderator?: ModeratorUpdateOneRequiredWithoutIssuedBansNestedInput
    streamer?: UserUpdateOneRequiredWithoutIssuedBansNestedInput
  }

  export type BanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    moderatorId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StreamerCurrencyCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    currencyBalances?: CurrencyBalanceCreateNestedManyWithoutStreamerCurrencyInput
    user: UserCreateNestedOneWithoutStreamerCurrencyInput
  }

  export type StreamerCurrencyUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    userId: string
    currencyBalances?: CurrencyBalanceUncheckedCreateNestedManyWithoutStreamerCurrencyInput
  }

  export type StreamerCurrencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    currencyBalances?: CurrencyBalanceUpdateManyWithoutStreamerCurrencyNestedInput
    user?: UserUpdateOneRequiredWithoutStreamerCurrencyNestedInput
  }

  export type StreamerCurrencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    currencyBalances?: CurrencyBalanceUncheckedUpdateManyWithoutStreamerCurrencyNestedInput
  }

  export type StreamerCurrencyCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    userId: string
  }

  export type StreamerCurrencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type StreamerCurrencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyBalanceCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    count?: number
    streamerCurrency?: StreamerCurrencyCreateNestedOneWithoutCurrencyBalancesInput
    user: UserCreateNestedOneWithoutCurrencyBalanceInput
  }

  export type CurrencyBalanceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerCurrencyId?: string | null
    count?: number
    userId: string
  }

  export type CurrencyBalanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    streamerCurrency?: StreamerCurrencyUpdateOneWithoutCurrencyBalancesNestedInput
    user?: UserUpdateOneRequiredWithoutCurrencyBalanceNestedInput
  }

  export type CurrencyBalanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyBalanceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerCurrencyId?: string | null
    count?: number
    userId: string
  }

  export type CurrencyBalanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
  }

  export type CurrencyBalanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRewardCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string
    description: string
    name: string
    price: number
    user: UserCreateNestedOneWithoutUserRewardsInput
    BuyerRewards?: BuyerRewardCreateNestedManyWithoutRewardInput
  }

  export type UserRewardUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    image?: string
    description: string
    name: string
    price: number
    BuyerRewards?: BuyerRewardUncheckedCreateNestedManyWithoutRewardInput
  }

  export type UserRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserRewardsNestedInput
    BuyerRewards?: BuyerRewardUpdateManyWithoutRewardNestedInput
  }

  export type UserRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    BuyerRewards?: BuyerRewardUncheckedUpdateManyWithoutRewardNestedInput
  }

  export type UserRewardCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    image?: string
    description: string
    name: string
    price: number
  }

  export type UserRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type UserRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BuyerRewardCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBoughtRewardsInput
    reward: UserRewardCreateNestedOneWithoutBuyerRewardsInput
  }

  export type BuyerRewardUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    rewardId: string
  }

  export type BuyerRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBoughtRewardsNestedInput
    reward?: UserRewardUpdateOneRequiredWithoutBuyerRewardsNestedInput
  }

  export type BuyerRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerRewardCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    rewardId: string
  }

  export type BuyerRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    rewardId?: StringFieldUpdateOperationsInput | string
  }

  export type StreamCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutStreamInput
    user?: UserCreateNestedOneWithoutStreamInput
  }

  export type StreamUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutStreamInput
    user?: UserUncheckedCreateNestedOneWithoutStreamInput
  }

  export type StreamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutStreamNestedInput
    user?: UserUpdateOneWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutStreamNestedInput
    user?: UserUncheckedUpdateOneWithoutStreamNestedInput
  }

  export type StreamCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
  }

  export type StreamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
  }

  export type StreamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
  }

  export type StreamStatsCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    categories?: CategoryCreateNestedManyWithoutStreamStatsInput
    user: UserCreateNestedOneWithoutStreamStatsInput
  }

  export type StreamStatsUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    userId: string
    categories?: CategoryUncheckedCreateNestedManyWithoutStreamStatsInput
  }

  export type StreamStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUpdateManyWithoutStreamStatsNestedInput
    user?: UserUpdateOneRequiredWithoutStreamStatsNestedInput
  }

  export type StreamStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutStreamStatsNestedInput
  }

  export type StreamStatsCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    userId: string
  }

  export type StreamStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
  }

  export type StreamStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
    user: UserCreateNestedOneWithoutEmoteInput
  }

  export type EmoteUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
    userId: string
  }

  export type EmoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmoteNestedInput
  }

  export type EmoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
    userId: string
  }

  export type EmoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    description: string
    StreamStats?: StreamStatsCreateNestedOneWithoutCategoriesInput
    Stream?: StreamCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamStatsId?: string | null
    streamId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    StreamStats?: StreamStatsUpdateOneWithoutCategoriesNestedInput
    Stream?: StreamUpdateOneWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamStatsId?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamStatsId?: string | null
    streamId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamStatsId?: NullableStringFieldUpdateOperationsInput | string | null
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ChatCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChatInput
    pinnedMessage?: MessageCreateNestedOneWithoutPinnedInChatsInput
    User?: UserCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessageId?: string | null
    userId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChatNestedInput
    pinnedMessage?: MessageUpdateOneWithoutPinnedInChatsNestedInput
    User?: UserUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessageId?: string | null
    userId?: string | null
  }

  export type ChatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessageInput
    reply?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    replyMessageId?: string | null
    content: string
    replies?: MessageUncheckedCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatUncheckedCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessageNestedInput
    reply?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    replies?: MessageUncheckedUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    replyMessageId?: string | null
    content: string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUser: UserCreateNestedOneWithoutReceivedNotificationInput
    fromUser: UserCreateNestedOneWithoutSentNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUserId: string
    fromUserId: string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUser?: UserUpdateOneRequiredWithoutReceivedNotificationNestedInput
    fromUser?: UserUpdateOneRequiredWithoutSentNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUserId?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUserId: string
    fromUserId: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUserId?: StringFieldUpdateOperationsInput | string
    fromUserId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TokenCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DescriptionPartListRelationFilter = {
    every?: DescriptionPartWhereInput
    some?: DescriptionPartWhereInput
    none?: DescriptionPartWhereInput
  }

  export type FollowerListRelationFilter = {
    every?: FollowerWhereInput
    some?: FollowerWhereInput
    none?: FollowerWhereInput
  }

  export type BanListRelationFilter = {
    every?: BanWhereInput
    some?: BanWhereInput
    none?: BanWhereInput
  }

  export type ModeratorListRelationFilter = {
    every?: ModeratorWhereInput
    some?: ModeratorWhereInput
    none?: ModeratorWhereInput
  }

  export type StreamerCurrencyListRelationFilter = {
    every?: StreamerCurrencyWhereInput
    some?: StreamerCurrencyWhereInput
    none?: StreamerCurrencyWhereInput
  }

  export type CurrencyBalanceListRelationFilter = {
    every?: CurrencyBalanceWhereInput
    some?: CurrencyBalanceWhereInput
    none?: CurrencyBalanceWhereInput
  }

  export type UserRewardListRelationFilter = {
    every?: UserRewardWhereInput
    some?: UserRewardWhereInput
    none?: UserRewardWhereInput
  }

  export type BuyerRewardListRelationFilter = {
    every?: BuyerRewardWhereInput
    some?: BuyerRewardWhereInput
    none?: BuyerRewardWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type EmoteListRelationFilter = {
    every?: EmoteWhereInput
    some?: EmoteWhereInput
    none?: EmoteWhereInput
  }

  export type StreamNullableRelationFilter = {
    is?: StreamWhereInput | null
    isNot?: StreamWhereInput | null
  }

  export type StreamStatsListRelationFilter = {
    every?: StreamStatsWhereInput
    some?: StreamStatsWhereInput
    none?: StreamStatsWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type UserSubscriptionListRelationFilter = {
    every?: UserSubscriptionWhereInput
    some?: UserSubscriptionWhereInput
    none?: UserSubscriptionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DescriptionPartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModeratorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StreamerCurrencyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CurrencyBalanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyerRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StreamStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    color?: SortOrder
    countFollowers?: SortOrder
    streamId?: SortOrder
    method?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    countFollowers?: SortOrder
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    color?: SortOrder
    countFollowers?: SortOrder
    streamId?: SortOrder
    method?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    banner?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    color?: SortOrder
    countFollowers?: SortOrder
    streamId?: SortOrder
    method?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    countFollowers?: SortOrder
    balance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FollowerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type FollowerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type FollowerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    subscribedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    subscribedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    subscriberId?: SortOrder
    subscribedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type UserSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSubscriptionSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ModeratorCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type ModeratorMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type ModeratorMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    streamerId?: SortOrder
  }

  export type DescriptionPartCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type DescriptionPartMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type DescriptionPartMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type EnumbanActionFilter<$PrismaModel = never> = {
    equals?: $Enums.banAction | EnumbanActionFieldRefInput<$PrismaModel>
    in?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    not?: NestedEnumbanActionFilter<$PrismaModel> | $Enums.banAction
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ModeratorRelationFilter = {
    is?: ModeratorWhereInput
    isNot?: ModeratorWhereInput
  }

  export type BanCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    moderatorId?: SortOrder
    streamerId?: SortOrder
    reason?: SortOrder
    action?: SortOrder
    expiresAt?: SortOrder
  }

  export type BanMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    moderatorId?: SortOrder
    streamerId?: SortOrder
    reason?: SortOrder
    action?: SortOrder
    expiresAt?: SortOrder
  }

  export type BanMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    moderatorId?: SortOrder
    streamerId?: SortOrder
    reason?: SortOrder
    action?: SortOrder
    expiresAt?: SortOrder
  }

  export type EnumbanActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.banAction | EnumbanActionFieldRefInput<$PrismaModel>
    in?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    not?: NestedEnumbanActionWithAggregatesFilter<$PrismaModel> | $Enums.banAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumbanActionFilter<$PrismaModel>
    _max?: NestedEnumbanActionFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StreamerCurrencyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type StreamerCurrencyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type StreamerCurrencyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type StreamerCurrencyNullableRelationFilter = {
    is?: StreamerCurrencyWhereInput | null
    isNot?: StreamerCurrencyWhereInput | null
  }

  export type CurrencyBalanceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamerCurrencyId?: SortOrder
    count?: SortOrder
    userId?: SortOrder
  }

  export type CurrencyBalanceAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type CurrencyBalanceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamerCurrencyId?: SortOrder
    count?: SortOrder
    userId?: SortOrder
  }

  export type CurrencyBalanceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamerCurrencyId?: SortOrder
    count?: SortOrder
    userId?: SortOrder
  }

  export type CurrencyBalanceSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type UserRewardCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type UserRewardAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type UserRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type UserRewardMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    description?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type UserRewardSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type UserRewardRelationFilter = {
    is?: UserRewardWhereInput
    isNot?: UserRewardWhereInput
  }

  export type BuyerRewardCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    rewardId?: SortOrder
  }

  export type BuyerRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    rewardId?: SortOrder
  }

  export type BuyerRewardMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    rewardId?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StreamCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    countOnline?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    qualityUrls?: SortOrder
  }

  export type StreamAvgOrderByAggregateInput = {
    countOnline?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }

  export type StreamMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    countOnline?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }

  export type StreamMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    countOnline?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }

  export type StreamSumOrderByAggregateInput = {
    countOnline?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type StreamStatsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    whenEnded?: SortOrder
    duration?: SortOrder
    tag?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    userId?: SortOrder
  }

  export type StreamStatsAvgOrderByAggregateInput = {
    duration?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }

  export type StreamStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    whenEnded?: SortOrder
    duration?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    userId?: SortOrder
  }

  export type StreamStatsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    whenEnded?: SortOrder
    duration?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
    userId?: SortOrder
  }

  export type StreamStatsSumOrderByAggregateInput = {
    duration?: SortOrder
    theHighestOnline?: SortOrder
    theAverageOnline?: SortOrder
  }

  export type EmoteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type EmoteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type EmoteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StreamStatsNullableRelationFilter = {
    is?: StreamStatsWhereInput | null
    isNot?: StreamStatsWhereInput | null
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamStatsId?: SortOrder
    streamId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamStatsId?: SortOrder
    streamId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    streamStatsId?: SortOrder
    streamId?: SortOrder
    name?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type MessageNullableRelationFilter = {
    is?: MessageWhereInput | null
    isNot?: MessageWhereInput | null
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pinnedMessageId?: SortOrder
    userId?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pinnedMessageId?: SortOrder
    userId?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pinnedMessageId?: SortOrder
    userId?: SortOrder
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatId?: SortOrder
    senderId?: SortOrder
    replyMessageId?: SortOrder
    content?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatId?: SortOrder
    senderId?: SortOrder
    replyMessageId?: SortOrder
    content?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatId?: SortOrder
    senderId?: SortOrder
    replyMessageId?: SortOrder
    content?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    link?: SortOrder
    forUserId?: SortOrder
    fromUserId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    link?: SortOrder
    forUserId?: SortOrder
    fromUserId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    link?: SortOrder
    forUserId?: SortOrder
    fromUserId?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type DescriptionPartCreateNestedManyWithoutUserInput = {
    create?: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput> | DescriptionPartCreateWithoutUserInput[] | DescriptionPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DescriptionPartCreateOrConnectWithoutUserInput | DescriptionPartCreateOrConnectWithoutUserInput[]
    createMany?: DescriptionPartCreateManyUserInputEnvelope
    connect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
  }

  export type FollowerCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput> | FollowerCreateWithoutUserInput[] | FollowerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutUserInput | FollowerCreateOrConnectWithoutUserInput[]
    createMany?: FollowerCreateManyUserInputEnvelope
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
  }

  export type FollowerCreateNestedManyWithoutStreamerInput = {
    create?: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput> | FollowerCreateWithoutStreamerInput[] | FollowerUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutStreamerInput | FollowerCreateOrConnectWithoutStreamerInput[]
    createMany?: FollowerCreateManyStreamerInputEnvelope
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
  }

  export type BanCreateNestedManyWithoutUserInput = {
    create?: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput> | BanCreateWithoutUserInput[] | BanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BanCreateOrConnectWithoutUserInput | BanCreateOrConnectWithoutUserInput[]
    createMany?: BanCreateManyUserInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type BanCreateNestedManyWithoutStreamerInput = {
    create?: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput> | BanCreateWithoutStreamerInput[] | BanUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: BanCreateOrConnectWithoutStreamerInput | BanCreateOrConnectWithoutStreamerInput[]
    createMany?: BanCreateManyStreamerInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type ModeratorCreateNestedManyWithoutStreamerInput = {
    create?: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput> | ModeratorCreateWithoutStreamerInput[] | ModeratorUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutStreamerInput | ModeratorCreateOrConnectWithoutStreamerInput[]
    createMany?: ModeratorCreateManyStreamerInputEnvelope
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
  }

  export type ModeratorCreateNestedManyWithoutUserInput = {
    create?: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput> | ModeratorCreateWithoutUserInput[] | ModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutUserInput | ModeratorCreateOrConnectWithoutUserInput[]
    createMany?: ModeratorCreateManyUserInputEnvelope
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
  }

  export type StreamerCurrencyCreateNestedManyWithoutUserInput = {
    create?: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput> | StreamerCurrencyCreateWithoutUserInput[] | StreamerCurrencyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutUserInput | StreamerCurrencyCreateOrConnectWithoutUserInput[]
    createMany?: StreamerCurrencyCreateManyUserInputEnvelope
    connect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
  }

  export type CurrencyBalanceCreateNestedManyWithoutUserInput = {
    create?: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput> | CurrencyBalanceCreateWithoutUserInput[] | CurrencyBalanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutUserInput | CurrencyBalanceCreateOrConnectWithoutUserInput[]
    createMany?: CurrencyBalanceCreateManyUserInputEnvelope
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
  }

  export type UserRewardCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type BuyerRewardCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput> | BuyerRewardCreateWithoutUserInput[] | BuyerRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutUserInput | BuyerRewardCreateOrConnectWithoutUserInput[]
    createMany?: BuyerRewardCreateManyUserInputEnvelope
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput> | SubscriptionCreateWithoutSubscriberInput[] | SubscriptionUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriberInput | SubscriptionCreateOrConnectWithoutSubscriberInput[]
    createMany?: SubscriptionCreateManySubscriberInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutSubscribedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput> | SubscriptionCreateWithoutSubscribedInput[] | SubscriptionUncheckedCreateWithoutSubscribedInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscribedInput | SubscriptionCreateOrConnectWithoutSubscribedInput[]
    createMany?: SubscriptionCreateManySubscribedInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EmoteCreateNestedManyWithoutUserInput = {
    create?: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput> | EmoteCreateWithoutUserInput[] | EmoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmoteCreateOrConnectWithoutUserInput | EmoteCreateOrConnectWithoutUserInput[]
    createMany?: EmoteCreateManyUserInputEnvelope
    connect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
  }

  export type StreamCreateNestedOneWithoutUserInput = {
    create?: XOR<StreamCreateWithoutUserInput, StreamUncheckedCreateWithoutUserInput>
    connectOrCreate?: StreamCreateOrConnectWithoutUserInput
    connect?: StreamWhereUniqueInput
  }

  export type StreamStatsCreateNestedManyWithoutUserInput = {
    create?: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput> | StreamStatsCreateWithoutUserInput[] | StreamStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamStatsCreateOrConnectWithoutUserInput | StreamStatsCreateOrConnectWithoutUserInput[]
    createMany?: StreamStatsCreateManyUserInputEnvelope
    connect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutForUserInput = {
    create?: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput> | NotificationCreateWithoutForUserInput[] | NotificationUncheckedCreateWithoutForUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutForUserInput | NotificationCreateOrConnectWithoutForUserInput[]
    createMany?: NotificationCreateManyForUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutFromUserInput = {
    create?: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput> | NotificationCreateWithoutFromUserInput[] | NotificationUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFromUserInput | NotificationCreateOrConnectWithoutFromUserInput[]
    createMany?: NotificationCreateManyFromUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type UserSubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput> | UserSubscriptionCreateWithoutUserInput[] | UserSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput | UserSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: UserSubscriptionCreateManyUserInputEnvelope
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
  }

  export type DescriptionPartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput> | DescriptionPartCreateWithoutUserInput[] | DescriptionPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DescriptionPartCreateOrConnectWithoutUserInput | DescriptionPartCreateOrConnectWithoutUserInput[]
    createMany?: DescriptionPartCreateManyUserInputEnvelope
    connect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
  }

  export type FollowerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput> | FollowerCreateWithoutUserInput[] | FollowerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutUserInput | FollowerCreateOrConnectWithoutUserInput[]
    createMany?: FollowerCreateManyUserInputEnvelope
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
  }

  export type FollowerUncheckedCreateNestedManyWithoutStreamerInput = {
    create?: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput> | FollowerCreateWithoutStreamerInput[] | FollowerUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutStreamerInput | FollowerCreateOrConnectWithoutStreamerInput[]
    createMany?: FollowerCreateManyStreamerInputEnvelope
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
  }

  export type BanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput> | BanCreateWithoutUserInput[] | BanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BanCreateOrConnectWithoutUserInput | BanCreateOrConnectWithoutUserInput[]
    createMany?: BanCreateManyUserInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type BanUncheckedCreateNestedManyWithoutStreamerInput = {
    create?: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput> | BanCreateWithoutStreamerInput[] | BanUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: BanCreateOrConnectWithoutStreamerInput | BanCreateOrConnectWithoutStreamerInput[]
    createMany?: BanCreateManyStreamerInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type ModeratorUncheckedCreateNestedManyWithoutStreamerInput = {
    create?: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput> | ModeratorCreateWithoutStreamerInput[] | ModeratorUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutStreamerInput | ModeratorCreateOrConnectWithoutStreamerInput[]
    createMany?: ModeratorCreateManyStreamerInputEnvelope
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
  }

  export type ModeratorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput> | ModeratorCreateWithoutUserInput[] | ModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutUserInput | ModeratorCreateOrConnectWithoutUserInput[]
    createMany?: ModeratorCreateManyUserInputEnvelope
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
  }

  export type StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput> | StreamerCurrencyCreateWithoutUserInput[] | StreamerCurrencyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutUserInput | StreamerCurrencyCreateOrConnectWithoutUserInput[]
    createMany?: StreamerCurrencyCreateManyUserInputEnvelope
    connect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
  }

  export type CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput> | CurrencyBalanceCreateWithoutUserInput[] | CurrencyBalanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutUserInput | CurrencyBalanceCreateOrConnectWithoutUserInput[]
    createMany?: CurrencyBalanceCreateManyUserInputEnvelope
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
  }

  export type UserRewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type BuyerRewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput> | BuyerRewardCreateWithoutUserInput[] | BuyerRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutUserInput | BuyerRewardCreateOrConnectWithoutUserInput[]
    createMany?: BuyerRewardCreateManyUserInputEnvelope
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput> | SubscriptionCreateWithoutSubscriberInput[] | SubscriptionUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriberInput | SubscriptionCreateOrConnectWithoutSubscriberInput[]
    createMany?: SubscriptionCreateManySubscriberInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput> | SubscriptionCreateWithoutSubscribedInput[] | SubscriptionUncheckedCreateWithoutSubscribedInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscribedInput | SubscriptionCreateOrConnectWithoutSubscribedInput[]
    createMany?: SubscriptionCreateManySubscribedInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EmoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput> | EmoteCreateWithoutUserInput[] | EmoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmoteCreateOrConnectWithoutUserInput | EmoteCreateOrConnectWithoutUserInput[]
    createMany?: EmoteCreateManyUserInputEnvelope
    connect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
  }

  export type StreamStatsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput> | StreamStatsCreateWithoutUserInput[] | StreamStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamStatsCreateOrConnectWithoutUserInput | StreamStatsCreateOrConnectWithoutUserInput[]
    createMany?: StreamStatsCreateManyUserInputEnvelope
    connect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutForUserInput = {
    create?: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput> | NotificationCreateWithoutForUserInput[] | NotificationUncheckedCreateWithoutForUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutForUserInput | NotificationCreateOrConnectWithoutForUserInput[]
    createMany?: NotificationCreateManyForUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput> | NotificationCreateWithoutFromUserInput[] | NotificationUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFromUserInput | NotificationCreateOrConnectWithoutFromUserInput[]
    createMany?: NotificationCreateManyFromUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type UserSubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput> | UserSubscriptionCreateWithoutUserInput[] | UserSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput | UserSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: UserSubscriptionCreateManyUserInputEnvelope
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAuthMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthMethod
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DescriptionPartUpdateManyWithoutUserNestedInput = {
    create?: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput> | DescriptionPartCreateWithoutUserInput[] | DescriptionPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DescriptionPartCreateOrConnectWithoutUserInput | DescriptionPartCreateOrConnectWithoutUserInput[]
    upsert?: DescriptionPartUpsertWithWhereUniqueWithoutUserInput | DescriptionPartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DescriptionPartCreateManyUserInputEnvelope
    set?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    disconnect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    delete?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    connect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    update?: DescriptionPartUpdateWithWhereUniqueWithoutUserInput | DescriptionPartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DescriptionPartUpdateManyWithWhereWithoutUserInput | DescriptionPartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DescriptionPartScalarWhereInput | DescriptionPartScalarWhereInput[]
  }

  export type FollowerUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput> | FollowerCreateWithoutUserInput[] | FollowerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutUserInput | FollowerCreateOrConnectWithoutUserInput[]
    upsert?: FollowerUpsertWithWhereUniqueWithoutUserInput | FollowerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowerCreateManyUserInputEnvelope
    set?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    disconnect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    delete?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    update?: FollowerUpdateWithWhereUniqueWithoutUserInput | FollowerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowerUpdateManyWithWhereWithoutUserInput | FollowerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
  }

  export type FollowerUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput> | FollowerCreateWithoutStreamerInput[] | FollowerUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutStreamerInput | FollowerCreateOrConnectWithoutStreamerInput[]
    upsert?: FollowerUpsertWithWhereUniqueWithoutStreamerInput | FollowerUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: FollowerCreateManyStreamerInputEnvelope
    set?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    disconnect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    delete?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    update?: FollowerUpdateWithWhereUniqueWithoutStreamerInput | FollowerUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: FollowerUpdateManyWithWhereWithoutStreamerInput | FollowerUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
  }

  export type BanUpdateManyWithoutUserNestedInput = {
    create?: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput> | BanCreateWithoutUserInput[] | BanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BanCreateOrConnectWithoutUserInput | BanCreateOrConnectWithoutUserInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutUserInput | BanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BanCreateManyUserInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutUserInput | BanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BanUpdateManyWithWhereWithoutUserInput | BanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type BanUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput> | BanCreateWithoutStreamerInput[] | BanUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: BanCreateOrConnectWithoutStreamerInput | BanCreateOrConnectWithoutStreamerInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutStreamerInput | BanUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: BanCreateManyStreamerInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutStreamerInput | BanUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: BanUpdateManyWithWhereWithoutStreamerInput | BanUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type ModeratorUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput> | ModeratorCreateWithoutStreamerInput[] | ModeratorUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutStreamerInput | ModeratorCreateOrConnectWithoutStreamerInput[]
    upsert?: ModeratorUpsertWithWhereUniqueWithoutStreamerInput | ModeratorUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: ModeratorCreateManyStreamerInputEnvelope
    set?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    disconnect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    delete?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    update?: ModeratorUpdateWithWhereUniqueWithoutStreamerInput | ModeratorUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: ModeratorUpdateManyWithWhereWithoutStreamerInput | ModeratorUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
  }

  export type ModeratorUpdateManyWithoutUserNestedInput = {
    create?: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput> | ModeratorCreateWithoutUserInput[] | ModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutUserInput | ModeratorCreateOrConnectWithoutUserInput[]
    upsert?: ModeratorUpsertWithWhereUniqueWithoutUserInput | ModeratorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ModeratorCreateManyUserInputEnvelope
    set?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    disconnect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    delete?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    update?: ModeratorUpdateWithWhereUniqueWithoutUserInput | ModeratorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ModeratorUpdateManyWithWhereWithoutUserInput | ModeratorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
  }

  export type StreamerCurrencyUpdateManyWithoutUserNestedInput = {
    create?: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput> | StreamerCurrencyCreateWithoutUserInput[] | StreamerCurrencyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutUserInput | StreamerCurrencyCreateOrConnectWithoutUserInput[]
    upsert?: StreamerCurrencyUpsertWithWhereUniqueWithoutUserInput | StreamerCurrencyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StreamerCurrencyCreateManyUserInputEnvelope
    set?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    disconnect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    delete?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    connect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    update?: StreamerCurrencyUpdateWithWhereUniqueWithoutUserInput | StreamerCurrencyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StreamerCurrencyUpdateManyWithWhereWithoutUserInput | StreamerCurrencyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StreamerCurrencyScalarWhereInput | StreamerCurrencyScalarWhereInput[]
  }

  export type CurrencyBalanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput> | CurrencyBalanceCreateWithoutUserInput[] | CurrencyBalanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutUserInput | CurrencyBalanceCreateOrConnectWithoutUserInput[]
    upsert?: CurrencyBalanceUpsertWithWhereUniqueWithoutUserInput | CurrencyBalanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CurrencyBalanceCreateManyUserInputEnvelope
    set?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    disconnect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    delete?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    update?: CurrencyBalanceUpdateWithWhereUniqueWithoutUserInput | CurrencyBalanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CurrencyBalanceUpdateManyWithWhereWithoutUserInput | CurrencyBalanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
  }

  export type UserRewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type BuyerRewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput> | BuyerRewardCreateWithoutUserInput[] | BuyerRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutUserInput | BuyerRewardCreateOrConnectWithoutUserInput[]
    upsert?: BuyerRewardUpsertWithWhereUniqueWithoutUserInput | BuyerRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyerRewardCreateManyUserInputEnvelope
    set?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    disconnect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    delete?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    update?: BuyerRewardUpdateWithWhereUniqueWithoutUserInput | BuyerRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyerRewardUpdateManyWithWhereWithoutUserInput | BuyerRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput> | SubscriptionCreateWithoutSubscriberInput[] | SubscriptionUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriberInput | SubscriptionCreateOrConnectWithoutSubscriberInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscriberInput | SubscriptionUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: SubscriptionCreateManySubscriberInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscriberInput | SubscriptionUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscriberInput | SubscriptionUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutSubscribedNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput> | SubscriptionCreateWithoutSubscribedInput[] | SubscriptionUncheckedCreateWithoutSubscribedInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscribedInput | SubscriptionCreateOrConnectWithoutSubscribedInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscribedInput | SubscriptionUpsertWithWhereUniqueWithoutSubscribedInput[]
    createMany?: SubscriptionCreateManySubscribedInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscribedInput | SubscriptionUpdateWithWhereUniqueWithoutSubscribedInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscribedInput | SubscriptionUpdateManyWithWhereWithoutSubscribedInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type EmoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput> | EmoteCreateWithoutUserInput[] | EmoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmoteCreateOrConnectWithoutUserInput | EmoteCreateOrConnectWithoutUserInput[]
    upsert?: EmoteUpsertWithWhereUniqueWithoutUserInput | EmoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmoteCreateManyUserInputEnvelope
    set?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    disconnect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    delete?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    connect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    update?: EmoteUpdateWithWhereUniqueWithoutUserInput | EmoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmoteUpdateManyWithWhereWithoutUserInput | EmoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmoteScalarWhereInput | EmoteScalarWhereInput[]
  }

  export type StreamUpdateOneWithoutUserNestedInput = {
    create?: XOR<StreamCreateWithoutUserInput, StreamUncheckedCreateWithoutUserInput>
    connectOrCreate?: StreamCreateOrConnectWithoutUserInput
    upsert?: StreamUpsertWithoutUserInput
    disconnect?: StreamWhereInput | boolean
    delete?: StreamWhereInput | boolean
    connect?: StreamWhereUniqueInput
    update?: XOR<XOR<StreamUpdateToOneWithWhereWithoutUserInput, StreamUpdateWithoutUserInput>, StreamUncheckedUpdateWithoutUserInput>
  }

  export type StreamStatsUpdateManyWithoutUserNestedInput = {
    create?: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput> | StreamStatsCreateWithoutUserInput[] | StreamStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamStatsCreateOrConnectWithoutUserInput | StreamStatsCreateOrConnectWithoutUserInput[]
    upsert?: StreamStatsUpsertWithWhereUniqueWithoutUserInput | StreamStatsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StreamStatsCreateManyUserInputEnvelope
    set?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    disconnect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    delete?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    connect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    update?: StreamStatsUpdateWithWhereUniqueWithoutUserInput | StreamStatsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StreamStatsUpdateManyWithWhereWithoutUserInput | StreamStatsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StreamStatsScalarWhereInput | StreamStatsScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutForUserNestedInput = {
    create?: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput> | NotificationCreateWithoutForUserInput[] | NotificationUncheckedCreateWithoutForUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutForUserInput | NotificationCreateOrConnectWithoutForUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutForUserInput | NotificationUpsertWithWhereUniqueWithoutForUserInput[]
    createMany?: NotificationCreateManyForUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutForUserInput | NotificationUpdateWithWhereUniqueWithoutForUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutForUserInput | NotificationUpdateManyWithWhereWithoutForUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput> | NotificationCreateWithoutFromUserInput[] | NotificationUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFromUserInput | NotificationCreateOrConnectWithoutFromUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutFromUserInput | NotificationUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: NotificationCreateManyFromUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutFromUserInput | NotificationUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutFromUserInput | NotificationUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type UserSubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput> | UserSubscriptionCreateWithoutUserInput[] | UserSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput | UserSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: UserSubscriptionUpsertWithWhereUniqueWithoutUserInput | UserSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSubscriptionCreateManyUserInputEnvelope
    set?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    disconnect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    delete?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    update?: UserSubscriptionUpdateWithWhereUniqueWithoutUserInput | UserSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSubscriptionUpdateManyWithWhereWithoutUserInput | UserSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DescriptionPartUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput> | DescriptionPartCreateWithoutUserInput[] | DescriptionPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DescriptionPartCreateOrConnectWithoutUserInput | DescriptionPartCreateOrConnectWithoutUserInput[]
    upsert?: DescriptionPartUpsertWithWhereUniqueWithoutUserInput | DescriptionPartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DescriptionPartCreateManyUserInputEnvelope
    set?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    disconnect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    delete?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    connect?: DescriptionPartWhereUniqueInput | DescriptionPartWhereUniqueInput[]
    update?: DescriptionPartUpdateWithWhereUniqueWithoutUserInput | DescriptionPartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DescriptionPartUpdateManyWithWhereWithoutUserInput | DescriptionPartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DescriptionPartScalarWhereInput | DescriptionPartScalarWhereInput[]
  }

  export type FollowerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput> | FollowerCreateWithoutUserInput[] | FollowerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutUserInput | FollowerCreateOrConnectWithoutUserInput[]
    upsert?: FollowerUpsertWithWhereUniqueWithoutUserInput | FollowerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowerCreateManyUserInputEnvelope
    set?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    disconnect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    delete?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    update?: FollowerUpdateWithWhereUniqueWithoutUserInput | FollowerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowerUpdateManyWithWhereWithoutUserInput | FollowerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
  }

  export type FollowerUncheckedUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput> | FollowerCreateWithoutStreamerInput[] | FollowerUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: FollowerCreateOrConnectWithoutStreamerInput | FollowerCreateOrConnectWithoutStreamerInput[]
    upsert?: FollowerUpsertWithWhereUniqueWithoutStreamerInput | FollowerUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: FollowerCreateManyStreamerInputEnvelope
    set?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    disconnect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    delete?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    connect?: FollowerWhereUniqueInput | FollowerWhereUniqueInput[]
    update?: FollowerUpdateWithWhereUniqueWithoutStreamerInput | FollowerUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: FollowerUpdateManyWithWhereWithoutStreamerInput | FollowerUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
  }

  export type BanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput> | BanCreateWithoutUserInput[] | BanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BanCreateOrConnectWithoutUserInput | BanCreateOrConnectWithoutUserInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutUserInput | BanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BanCreateManyUserInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutUserInput | BanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BanUpdateManyWithWhereWithoutUserInput | BanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type BanUncheckedUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput> | BanCreateWithoutStreamerInput[] | BanUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: BanCreateOrConnectWithoutStreamerInput | BanCreateOrConnectWithoutStreamerInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutStreamerInput | BanUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: BanCreateManyStreamerInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutStreamerInput | BanUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: BanUpdateManyWithWhereWithoutStreamerInput | BanUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type ModeratorUncheckedUpdateManyWithoutStreamerNestedInput = {
    create?: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput> | ModeratorCreateWithoutStreamerInput[] | ModeratorUncheckedCreateWithoutStreamerInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutStreamerInput | ModeratorCreateOrConnectWithoutStreamerInput[]
    upsert?: ModeratorUpsertWithWhereUniqueWithoutStreamerInput | ModeratorUpsertWithWhereUniqueWithoutStreamerInput[]
    createMany?: ModeratorCreateManyStreamerInputEnvelope
    set?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    disconnect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    delete?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    update?: ModeratorUpdateWithWhereUniqueWithoutStreamerInput | ModeratorUpdateWithWhereUniqueWithoutStreamerInput[]
    updateMany?: ModeratorUpdateManyWithWhereWithoutStreamerInput | ModeratorUpdateManyWithWhereWithoutStreamerInput[]
    deleteMany?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
  }

  export type ModeratorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput> | ModeratorCreateWithoutUserInput[] | ModeratorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ModeratorCreateOrConnectWithoutUserInput | ModeratorCreateOrConnectWithoutUserInput[]
    upsert?: ModeratorUpsertWithWhereUniqueWithoutUserInput | ModeratorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ModeratorCreateManyUserInputEnvelope
    set?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    disconnect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    delete?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    connect?: ModeratorWhereUniqueInput | ModeratorWhereUniqueInput[]
    update?: ModeratorUpdateWithWhereUniqueWithoutUserInput | ModeratorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ModeratorUpdateManyWithWhereWithoutUserInput | ModeratorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
  }

  export type StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput> | StreamerCurrencyCreateWithoutUserInput[] | StreamerCurrencyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutUserInput | StreamerCurrencyCreateOrConnectWithoutUserInput[]
    upsert?: StreamerCurrencyUpsertWithWhereUniqueWithoutUserInput | StreamerCurrencyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StreamerCurrencyCreateManyUserInputEnvelope
    set?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    disconnect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    delete?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    connect?: StreamerCurrencyWhereUniqueInput | StreamerCurrencyWhereUniqueInput[]
    update?: StreamerCurrencyUpdateWithWhereUniqueWithoutUserInput | StreamerCurrencyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StreamerCurrencyUpdateManyWithWhereWithoutUserInput | StreamerCurrencyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StreamerCurrencyScalarWhereInput | StreamerCurrencyScalarWhereInput[]
  }

  export type CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput> | CurrencyBalanceCreateWithoutUserInput[] | CurrencyBalanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutUserInput | CurrencyBalanceCreateOrConnectWithoutUserInput[]
    upsert?: CurrencyBalanceUpsertWithWhereUniqueWithoutUserInput | CurrencyBalanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CurrencyBalanceCreateManyUserInputEnvelope
    set?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    disconnect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    delete?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    update?: CurrencyBalanceUpdateWithWhereUniqueWithoutUserInput | CurrencyBalanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CurrencyBalanceUpdateManyWithWhereWithoutUserInput | CurrencyBalanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
  }

  export type UserRewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type BuyerRewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput> | BuyerRewardCreateWithoutUserInput[] | BuyerRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutUserInput | BuyerRewardCreateOrConnectWithoutUserInput[]
    upsert?: BuyerRewardUpsertWithWhereUniqueWithoutUserInput | BuyerRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyerRewardCreateManyUserInputEnvelope
    set?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    disconnect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    delete?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    update?: BuyerRewardUpdateWithWhereUniqueWithoutUserInput | BuyerRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyerRewardUpdateManyWithWhereWithoutUserInput | BuyerRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput> | SubscriptionCreateWithoutSubscriberInput[] | SubscriptionUncheckedCreateWithoutSubscriberInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriberInput | SubscriptionCreateOrConnectWithoutSubscriberInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscriberInput | SubscriptionUpsertWithWhereUniqueWithoutSubscriberInput[]
    createMany?: SubscriptionCreateManySubscriberInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscriberInput | SubscriptionUpdateWithWhereUniqueWithoutSubscriberInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscriberInput | SubscriptionUpdateManyWithWhereWithoutSubscriberInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput> | SubscriptionCreateWithoutSubscribedInput[] | SubscriptionUncheckedCreateWithoutSubscribedInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscribedInput | SubscriptionCreateOrConnectWithoutSubscribedInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutSubscribedInput | SubscriptionUpsertWithWhereUniqueWithoutSubscribedInput[]
    createMany?: SubscriptionCreateManySubscribedInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutSubscribedInput | SubscriptionUpdateWithWhereUniqueWithoutSubscribedInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutSubscribedInput | SubscriptionUpdateManyWithWhereWithoutSubscribedInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type EmoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput> | EmoteCreateWithoutUserInput[] | EmoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmoteCreateOrConnectWithoutUserInput | EmoteCreateOrConnectWithoutUserInput[]
    upsert?: EmoteUpsertWithWhereUniqueWithoutUserInput | EmoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmoteCreateManyUserInputEnvelope
    set?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    disconnect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    delete?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    connect?: EmoteWhereUniqueInput | EmoteWhereUniqueInput[]
    update?: EmoteUpdateWithWhereUniqueWithoutUserInput | EmoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmoteUpdateManyWithWhereWithoutUserInput | EmoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmoteScalarWhereInput | EmoteScalarWhereInput[]
  }

  export type StreamStatsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput> | StreamStatsCreateWithoutUserInput[] | StreamStatsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StreamStatsCreateOrConnectWithoutUserInput | StreamStatsCreateOrConnectWithoutUserInput[]
    upsert?: StreamStatsUpsertWithWhereUniqueWithoutUserInput | StreamStatsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StreamStatsCreateManyUserInputEnvelope
    set?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    disconnect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    delete?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    connect?: StreamStatsWhereUniqueInput | StreamStatsWhereUniqueInput[]
    update?: StreamStatsUpdateWithWhereUniqueWithoutUserInput | StreamStatsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StreamStatsUpdateManyWithWhereWithoutUserInput | StreamStatsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StreamStatsScalarWhereInput | StreamStatsScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutForUserNestedInput = {
    create?: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput> | NotificationCreateWithoutForUserInput[] | NotificationUncheckedCreateWithoutForUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutForUserInput | NotificationCreateOrConnectWithoutForUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutForUserInput | NotificationUpsertWithWhereUniqueWithoutForUserInput[]
    createMany?: NotificationCreateManyForUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutForUserInput | NotificationUpdateWithWhereUniqueWithoutForUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutForUserInput | NotificationUpdateManyWithWhereWithoutForUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput> | NotificationCreateWithoutFromUserInput[] | NotificationUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutFromUserInput | NotificationCreateOrConnectWithoutFromUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutFromUserInput | NotificationUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: NotificationCreateManyFromUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutFromUserInput | NotificationUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutFromUserInput | NotificationUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput> | UserSubscriptionCreateWithoutUserInput[] | UserSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSubscriptionCreateOrConnectWithoutUserInput | UserSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: UserSubscriptionUpsertWithWhereUniqueWithoutUserInput | UserSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSubscriptionCreateManyUserInputEnvelope
    set?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    disconnect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    delete?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    connect?: UserSubscriptionWhereUniqueInput | UserSubscriptionWhereUniqueInput[]
    update?: UserSubscriptionUpdateWithWhereUniqueWithoutUserInput | UserSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSubscriptionUpdateManyWithWhereWithoutUserInput | UserSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubscribersInput = {
    create?: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscribersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubscribersNestedInput = {
    create?: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscribersInput
    upsert?: UserUpsertWithoutSubscribersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscribersInput, UserUpdateWithoutSubscribersInput>, UserUncheckedUpdateWithoutSubscribersInput>
  }

  export type UserCreateNestedOneWithoutUserSubscriptionInput = {
    create?: XOR<UserCreateWithoutUserSubscriptionInput, UserUncheckedCreateWithoutUserSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutUserSubscriptionInput, UserUncheckedCreateWithoutUserSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSubscriptionInput
    upsert?: UserUpsertWithoutUserSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSubscriptionInput, UserUpdateWithoutUserSubscriptionInput>, UserUncheckedUpdateWithoutUserSubscriptionInput>
  }

  export type UserCreateNestedOneWithoutAppointedModeratorsInput = {
    create?: XOR<UserCreateWithoutAppointedModeratorsInput, UserUncheckedCreateWithoutAppointedModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointedModeratorsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserModeratorsInput = {
    create?: XOR<UserCreateWithoutUserModeratorsInput, UserUncheckedCreateWithoutUserModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserModeratorsInput
    connect?: UserWhereUniqueInput
  }

  export type BanCreateNestedManyWithoutModeratorInput = {
    create?: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput> | BanCreateWithoutModeratorInput[] | BanUncheckedCreateWithoutModeratorInput[]
    connectOrCreate?: BanCreateOrConnectWithoutModeratorInput | BanCreateOrConnectWithoutModeratorInput[]
    createMany?: BanCreateManyModeratorInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type BanUncheckedCreateNestedManyWithoutModeratorInput = {
    create?: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput> | BanCreateWithoutModeratorInput[] | BanUncheckedCreateWithoutModeratorInput[]
    connectOrCreate?: BanCreateOrConnectWithoutModeratorInput | BanCreateOrConnectWithoutModeratorInput[]
    createMany?: BanCreateManyModeratorInputEnvelope
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAppointedModeratorsNestedInput = {
    create?: XOR<UserCreateWithoutAppointedModeratorsInput, UserUncheckedCreateWithoutAppointedModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointedModeratorsInput
    upsert?: UserUpsertWithoutAppointedModeratorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointedModeratorsInput, UserUpdateWithoutAppointedModeratorsInput>, UserUncheckedUpdateWithoutAppointedModeratorsInput>
  }

  export type UserUpdateOneRequiredWithoutUserModeratorsNestedInput = {
    create?: XOR<UserCreateWithoutUserModeratorsInput, UserUncheckedCreateWithoutUserModeratorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserModeratorsInput
    upsert?: UserUpsertWithoutUserModeratorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserModeratorsInput, UserUpdateWithoutUserModeratorsInput>, UserUncheckedUpdateWithoutUserModeratorsInput>
  }

  export type BanUpdateManyWithoutModeratorNestedInput = {
    create?: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput> | BanCreateWithoutModeratorInput[] | BanUncheckedCreateWithoutModeratorInput[]
    connectOrCreate?: BanCreateOrConnectWithoutModeratorInput | BanCreateOrConnectWithoutModeratorInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutModeratorInput | BanUpsertWithWhereUniqueWithoutModeratorInput[]
    createMany?: BanCreateManyModeratorInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutModeratorInput | BanUpdateWithWhereUniqueWithoutModeratorInput[]
    updateMany?: BanUpdateManyWithWhereWithoutModeratorInput | BanUpdateManyWithWhereWithoutModeratorInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type BanUncheckedUpdateManyWithoutModeratorNestedInput = {
    create?: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput> | BanCreateWithoutModeratorInput[] | BanUncheckedCreateWithoutModeratorInput[]
    connectOrCreate?: BanCreateOrConnectWithoutModeratorInput | BanCreateOrConnectWithoutModeratorInput[]
    upsert?: BanUpsertWithWhereUniqueWithoutModeratorInput | BanUpsertWithWhereUniqueWithoutModeratorInput[]
    createMany?: BanCreateManyModeratorInputEnvelope
    set?: BanWhereUniqueInput | BanWhereUniqueInput[]
    disconnect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    delete?: BanWhereUniqueInput | BanWhereUniqueInput[]
    connect?: BanWhereUniqueInput | BanWhereUniqueInput[]
    update?: BanUpdateWithWhereUniqueWithoutModeratorInput | BanUpdateWithWhereUniqueWithoutModeratorInput[]
    updateMany?: BanUpdateManyWithWhereWithoutModeratorInput | BanUpdateManyWithWhereWithoutModeratorInput[]
    deleteMany?: BanScalarWhereInput | BanScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDescriptionPartsInput = {
    create?: XOR<UserCreateWithoutDescriptionPartsInput, UserUncheckedCreateWithoutDescriptionPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDescriptionPartsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDescriptionPartsNestedInput = {
    create?: XOR<UserCreateWithoutDescriptionPartsInput, UserUncheckedCreateWithoutDescriptionPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDescriptionPartsInput
    upsert?: UserUpsertWithoutDescriptionPartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDescriptionPartsInput, UserUpdateWithoutDescriptionPartsInput>, UserUncheckedUpdateWithoutDescriptionPartsInput>
  }

  export type UserCreateNestedOneWithoutBansInput = {
    create?: XOR<UserCreateWithoutBansInput, UserUncheckedCreateWithoutBansInput>
    connectOrCreate?: UserCreateOrConnectWithoutBansInput
    connect?: UserWhereUniqueInput
  }

  export type ModeratorCreateNestedOneWithoutIssuedBansInput = {
    create?: XOR<ModeratorCreateWithoutIssuedBansInput, ModeratorUncheckedCreateWithoutIssuedBansInput>
    connectOrCreate?: ModeratorCreateOrConnectWithoutIssuedBansInput
    connect?: ModeratorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutIssuedBansInput = {
    create?: XOR<UserCreateWithoutIssuedBansInput, UserUncheckedCreateWithoutIssuedBansInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuedBansInput
    connect?: UserWhereUniqueInput
  }

  export type EnumbanActionFieldUpdateOperationsInput = {
    set?: $Enums.banAction
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutBansNestedInput = {
    create?: XOR<UserCreateWithoutBansInput, UserUncheckedCreateWithoutBansInput>
    connectOrCreate?: UserCreateOrConnectWithoutBansInput
    upsert?: UserUpsertWithoutBansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBansInput, UserUpdateWithoutBansInput>, UserUncheckedUpdateWithoutBansInput>
  }

  export type ModeratorUpdateOneRequiredWithoutIssuedBansNestedInput = {
    create?: XOR<ModeratorCreateWithoutIssuedBansInput, ModeratorUncheckedCreateWithoutIssuedBansInput>
    connectOrCreate?: ModeratorCreateOrConnectWithoutIssuedBansInput
    upsert?: ModeratorUpsertWithoutIssuedBansInput
    connect?: ModeratorWhereUniqueInput
    update?: XOR<XOR<ModeratorUpdateToOneWithWhereWithoutIssuedBansInput, ModeratorUpdateWithoutIssuedBansInput>, ModeratorUncheckedUpdateWithoutIssuedBansInput>
  }

  export type UserUpdateOneRequiredWithoutIssuedBansNestedInput = {
    create?: XOR<UserCreateWithoutIssuedBansInput, UserUncheckedCreateWithoutIssuedBansInput>
    connectOrCreate?: UserCreateOrConnectWithoutIssuedBansInput
    upsert?: UserUpsertWithoutIssuedBansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutIssuedBansInput, UserUpdateWithoutIssuedBansInput>, UserUncheckedUpdateWithoutIssuedBansInput>
  }

  export type CurrencyBalanceCreateNestedManyWithoutStreamerCurrencyInput = {
    create?: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput> | CurrencyBalanceCreateWithoutStreamerCurrencyInput[] | CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput | CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput[]
    createMany?: CurrencyBalanceCreateManyStreamerCurrencyInputEnvelope
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStreamerCurrencyInput = {
    create?: XOR<UserCreateWithoutStreamerCurrencyInput, UserUncheckedCreateWithoutStreamerCurrencyInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamerCurrencyInput
    connect?: UserWhereUniqueInput
  }

  export type CurrencyBalanceUncheckedCreateNestedManyWithoutStreamerCurrencyInput = {
    create?: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput> | CurrencyBalanceCreateWithoutStreamerCurrencyInput[] | CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput | CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput[]
    createMany?: CurrencyBalanceCreateManyStreamerCurrencyInputEnvelope
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
  }

  export type CurrencyBalanceUpdateManyWithoutStreamerCurrencyNestedInput = {
    create?: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput> | CurrencyBalanceCreateWithoutStreamerCurrencyInput[] | CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput | CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput[]
    upsert?: CurrencyBalanceUpsertWithWhereUniqueWithoutStreamerCurrencyInput | CurrencyBalanceUpsertWithWhereUniqueWithoutStreamerCurrencyInput[]
    createMany?: CurrencyBalanceCreateManyStreamerCurrencyInputEnvelope
    set?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    disconnect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    delete?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    update?: CurrencyBalanceUpdateWithWhereUniqueWithoutStreamerCurrencyInput | CurrencyBalanceUpdateWithWhereUniqueWithoutStreamerCurrencyInput[]
    updateMany?: CurrencyBalanceUpdateManyWithWhereWithoutStreamerCurrencyInput | CurrencyBalanceUpdateManyWithWhereWithoutStreamerCurrencyInput[]
    deleteMany?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStreamerCurrencyNestedInput = {
    create?: XOR<UserCreateWithoutStreamerCurrencyInput, UserUncheckedCreateWithoutStreamerCurrencyInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamerCurrencyInput
    upsert?: UserUpsertWithoutStreamerCurrencyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStreamerCurrencyInput, UserUpdateWithoutStreamerCurrencyInput>, UserUncheckedUpdateWithoutStreamerCurrencyInput>
  }

  export type CurrencyBalanceUncheckedUpdateManyWithoutStreamerCurrencyNestedInput = {
    create?: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput> | CurrencyBalanceCreateWithoutStreamerCurrencyInput[] | CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput[]
    connectOrCreate?: CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput | CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput[]
    upsert?: CurrencyBalanceUpsertWithWhereUniqueWithoutStreamerCurrencyInput | CurrencyBalanceUpsertWithWhereUniqueWithoutStreamerCurrencyInput[]
    createMany?: CurrencyBalanceCreateManyStreamerCurrencyInputEnvelope
    set?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    disconnect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    delete?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    connect?: CurrencyBalanceWhereUniqueInput | CurrencyBalanceWhereUniqueInput[]
    update?: CurrencyBalanceUpdateWithWhereUniqueWithoutStreamerCurrencyInput | CurrencyBalanceUpdateWithWhereUniqueWithoutStreamerCurrencyInput[]
    updateMany?: CurrencyBalanceUpdateManyWithWhereWithoutStreamerCurrencyInput | CurrencyBalanceUpdateManyWithWhereWithoutStreamerCurrencyInput[]
    deleteMany?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
  }

  export type StreamerCurrencyCreateNestedOneWithoutCurrencyBalancesInput = {
    create?: XOR<StreamerCurrencyCreateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedCreateWithoutCurrencyBalancesInput>
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutCurrencyBalancesInput
    connect?: StreamerCurrencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCurrencyBalanceInput = {
    create?: XOR<UserCreateWithoutCurrencyBalanceInput, UserUncheckedCreateWithoutCurrencyBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrencyBalanceInput
    connect?: UserWhereUniqueInput
  }

  export type StreamerCurrencyUpdateOneWithoutCurrencyBalancesNestedInput = {
    create?: XOR<StreamerCurrencyCreateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedCreateWithoutCurrencyBalancesInput>
    connectOrCreate?: StreamerCurrencyCreateOrConnectWithoutCurrencyBalancesInput
    upsert?: StreamerCurrencyUpsertWithoutCurrencyBalancesInput
    disconnect?: StreamerCurrencyWhereInput | boolean
    delete?: StreamerCurrencyWhereInput | boolean
    connect?: StreamerCurrencyWhereUniqueInput
    update?: XOR<XOR<StreamerCurrencyUpdateToOneWithWhereWithoutCurrencyBalancesInput, StreamerCurrencyUpdateWithoutCurrencyBalancesInput>, StreamerCurrencyUncheckedUpdateWithoutCurrencyBalancesInput>
  }

  export type UserUpdateOneRequiredWithoutCurrencyBalanceNestedInput = {
    create?: XOR<UserCreateWithoutCurrencyBalanceInput, UserUncheckedCreateWithoutCurrencyBalanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrencyBalanceInput
    upsert?: UserUpsertWithoutCurrencyBalanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCurrencyBalanceInput, UserUpdateWithoutCurrencyBalanceInput>, UserUncheckedUpdateWithoutCurrencyBalanceInput>
  }

  export type UserCreateNestedOneWithoutUserRewardsInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type BuyerRewardCreateNestedManyWithoutRewardInput = {
    create?: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput> | BuyerRewardCreateWithoutRewardInput[] | BuyerRewardUncheckedCreateWithoutRewardInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutRewardInput | BuyerRewardCreateOrConnectWithoutRewardInput[]
    createMany?: BuyerRewardCreateManyRewardInputEnvelope
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
  }

  export type BuyerRewardUncheckedCreateNestedManyWithoutRewardInput = {
    create?: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput> | BuyerRewardCreateWithoutRewardInput[] | BuyerRewardUncheckedCreateWithoutRewardInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutRewardInput | BuyerRewardCreateOrConnectWithoutRewardInput[]
    createMany?: BuyerRewardCreateManyRewardInputEnvelope
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUserRewardsNestedInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    upsert?: UserUpsertWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRewardsInput, UserUpdateWithoutUserRewardsInput>, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type BuyerRewardUpdateManyWithoutRewardNestedInput = {
    create?: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput> | BuyerRewardCreateWithoutRewardInput[] | BuyerRewardUncheckedCreateWithoutRewardInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutRewardInput | BuyerRewardCreateOrConnectWithoutRewardInput[]
    upsert?: BuyerRewardUpsertWithWhereUniqueWithoutRewardInput | BuyerRewardUpsertWithWhereUniqueWithoutRewardInput[]
    createMany?: BuyerRewardCreateManyRewardInputEnvelope
    set?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    disconnect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    delete?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    update?: BuyerRewardUpdateWithWhereUniqueWithoutRewardInput | BuyerRewardUpdateWithWhereUniqueWithoutRewardInput[]
    updateMany?: BuyerRewardUpdateManyWithWhereWithoutRewardInput | BuyerRewardUpdateManyWithWhereWithoutRewardInput[]
    deleteMany?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
  }

  export type BuyerRewardUncheckedUpdateManyWithoutRewardNestedInput = {
    create?: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput> | BuyerRewardCreateWithoutRewardInput[] | BuyerRewardUncheckedCreateWithoutRewardInput[]
    connectOrCreate?: BuyerRewardCreateOrConnectWithoutRewardInput | BuyerRewardCreateOrConnectWithoutRewardInput[]
    upsert?: BuyerRewardUpsertWithWhereUniqueWithoutRewardInput | BuyerRewardUpsertWithWhereUniqueWithoutRewardInput[]
    createMany?: BuyerRewardCreateManyRewardInputEnvelope
    set?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    disconnect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    delete?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    connect?: BuyerRewardWhereUniqueInput | BuyerRewardWhereUniqueInput[]
    update?: BuyerRewardUpdateWithWhereUniqueWithoutRewardInput | BuyerRewardUpdateWithWhereUniqueWithoutRewardInput[]
    updateMany?: BuyerRewardUpdateManyWithWhereWithoutRewardInput | BuyerRewardUpdateManyWithWhereWithoutRewardInput[]
    deleteMany?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBoughtRewardsInput = {
    create?: XOR<UserCreateWithoutBoughtRewardsInput, UserUncheckedCreateWithoutBoughtRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserRewardCreateNestedOneWithoutBuyerRewardsInput = {
    create?: XOR<UserRewardCreateWithoutBuyerRewardsInput, UserRewardUncheckedCreateWithoutBuyerRewardsInput>
    connectOrCreate?: UserRewardCreateOrConnectWithoutBuyerRewardsInput
    connect?: UserRewardWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBoughtRewardsNestedInput = {
    create?: XOR<UserCreateWithoutBoughtRewardsInput, UserUncheckedCreateWithoutBoughtRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtRewardsInput
    upsert?: UserUpsertWithoutBoughtRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoughtRewardsInput, UserUpdateWithoutBoughtRewardsInput>, UserUncheckedUpdateWithoutBoughtRewardsInput>
  }

  export type UserRewardUpdateOneRequiredWithoutBuyerRewardsNestedInput = {
    create?: XOR<UserRewardCreateWithoutBuyerRewardsInput, UserRewardUncheckedCreateWithoutBuyerRewardsInput>
    connectOrCreate?: UserRewardCreateOrConnectWithoutBuyerRewardsInput
    upsert?: UserRewardUpsertWithoutBuyerRewardsInput
    connect?: UserRewardWhereUniqueInput
    update?: XOR<XOR<UserRewardUpdateToOneWithWhereWithoutBuyerRewardsInput, UserRewardUpdateWithoutBuyerRewardsInput>, UserRewardUncheckedUpdateWithoutBuyerRewardsInput>
  }

  export type StreamCreatetagInput = {
    set: string[]
  }

  export type CategoryCreateNestedManyWithoutStreamInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput> | CategoryCreateWithoutStreamInput[] | CategoryUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput | CategoryCreateOrConnectWithoutStreamInput[]
    createMany?: CategoryCreateManyStreamInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStreamInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryUncheckedCreateNestedManyWithoutStreamInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput> | CategoryCreateWithoutStreamInput[] | CategoryUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput | CategoryCreateOrConnectWithoutStreamInput[]
    createMany?: CategoryCreateManyStreamInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutStreamInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput
    connect?: UserWhereUniqueInput
  }

  export type StreamUpdatetagInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CategoryUpdateManyWithoutStreamNestedInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput> | CategoryCreateWithoutStreamInput[] | CategoryUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput | CategoryCreateOrConnectWithoutStreamInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStreamInput | CategoryUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: CategoryCreateManyStreamInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStreamInput | CategoryUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStreamInput | CategoryUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutStreamNestedInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput
    upsert?: UserUpsertWithoutStreamInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStreamInput, UserUpdateWithoutStreamInput>, UserUncheckedUpdateWithoutStreamInput>
  }

  export type CategoryUncheckedUpdateManyWithoutStreamNestedInput = {
    create?: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput> | CategoryCreateWithoutStreamInput[] | CategoryUncheckedCreateWithoutStreamInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamInput | CategoryCreateOrConnectWithoutStreamInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStreamInput | CategoryUpsertWithWhereUniqueWithoutStreamInput[]
    createMany?: CategoryCreateManyStreamInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStreamInput | CategoryUpdateWithWhereUniqueWithoutStreamInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStreamInput | CategoryUpdateManyWithWhereWithoutStreamInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutStreamNestedInput = {
    create?: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamInput
    upsert?: UserUpsertWithoutStreamInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStreamInput, UserUpdateWithoutStreamInput>, UserUncheckedUpdateWithoutStreamInput>
  }

  export type StreamStatsCreatetagInput = {
    set: string[]
  }

  export type CategoryCreateNestedManyWithoutStreamStatsInput = {
    create?: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput> | CategoryCreateWithoutStreamStatsInput[] | CategoryUncheckedCreateWithoutStreamStatsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamStatsInput | CategoryCreateOrConnectWithoutStreamStatsInput[]
    createMany?: CategoryCreateManyStreamStatsInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStreamStatsInput = {
    create?: XOR<UserCreateWithoutStreamStatsInput, UserUncheckedCreateWithoutStreamStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamStatsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryUncheckedCreateNestedManyWithoutStreamStatsInput = {
    create?: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput> | CategoryCreateWithoutStreamStatsInput[] | CategoryUncheckedCreateWithoutStreamStatsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamStatsInput | CategoryCreateOrConnectWithoutStreamStatsInput[]
    createMany?: CategoryCreateManyStreamStatsInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type StreamStatsUpdatetagInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CategoryUpdateManyWithoutStreamStatsNestedInput = {
    create?: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput> | CategoryCreateWithoutStreamStatsInput[] | CategoryUncheckedCreateWithoutStreamStatsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamStatsInput | CategoryCreateOrConnectWithoutStreamStatsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStreamStatsInput | CategoryUpsertWithWhereUniqueWithoutStreamStatsInput[]
    createMany?: CategoryCreateManyStreamStatsInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStreamStatsInput | CategoryUpdateWithWhereUniqueWithoutStreamStatsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStreamStatsInput | CategoryUpdateManyWithWhereWithoutStreamStatsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStreamStatsNestedInput = {
    create?: XOR<UserCreateWithoutStreamStatsInput, UserUncheckedCreateWithoutStreamStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStreamStatsInput
    upsert?: UserUpsertWithoutStreamStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStreamStatsInput, UserUpdateWithoutStreamStatsInput>, UserUncheckedUpdateWithoutStreamStatsInput>
  }

  export type CategoryUncheckedUpdateManyWithoutStreamStatsNestedInput = {
    create?: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput> | CategoryCreateWithoutStreamStatsInput[] | CategoryUncheckedCreateWithoutStreamStatsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutStreamStatsInput | CategoryCreateOrConnectWithoutStreamStatsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutStreamStatsInput | CategoryUpsertWithWhereUniqueWithoutStreamStatsInput[]
    createMany?: CategoryCreateManyStreamStatsInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutStreamStatsInput | CategoryUpdateWithWhereUniqueWithoutStreamStatsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutStreamStatsInput | CategoryUpdateManyWithWhereWithoutStreamStatsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmoteInput = {
    create?: XOR<UserCreateWithoutEmoteInput, UserUncheckedCreateWithoutEmoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmoteInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmoteNestedInput = {
    create?: XOR<UserCreateWithoutEmoteInput, UserUncheckedCreateWithoutEmoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmoteInput
    upsert?: UserUpsertWithoutEmoteInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmoteInput, UserUpdateWithoutEmoteInput>, UserUncheckedUpdateWithoutEmoteInput>
  }

  export type StreamStatsCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<StreamStatsCreateWithoutCategoriesInput, StreamStatsUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StreamStatsCreateOrConnectWithoutCategoriesInput
    connect?: StreamStatsWhereUniqueInput
  }

  export type StreamCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<StreamCreateWithoutCategoriesInput, StreamUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StreamCreateOrConnectWithoutCategoriesInput
    connect?: StreamWhereUniqueInput
  }

  export type StreamStatsUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<StreamStatsCreateWithoutCategoriesInput, StreamStatsUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StreamStatsCreateOrConnectWithoutCategoriesInput
    upsert?: StreamStatsUpsertWithoutCategoriesInput
    disconnect?: StreamStatsWhereInput | boolean
    delete?: StreamStatsWhereInput | boolean
    connect?: StreamStatsWhereUniqueInput
    update?: XOR<XOR<StreamStatsUpdateToOneWithWhereWithoutCategoriesInput, StreamStatsUpdateWithoutCategoriesInput>, StreamStatsUncheckedUpdateWithoutCategoriesInput>
  }

  export type StreamUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<StreamCreateWithoutCategoriesInput, StreamUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: StreamCreateOrConnectWithoutCategoriesInput
    upsert?: StreamUpsertWithoutCategoriesInput
    disconnect?: StreamWhereInput | boolean
    delete?: StreamWhereInput | boolean
    connect?: StreamWhereUniqueInput
    update?: XOR<XOR<StreamUpdateToOneWithWhereWithoutCategoriesInput, StreamUpdateWithoutCategoriesInput>, StreamUncheckedUpdateWithoutCategoriesInput>
  }

  export type MessageCreateNestedManyWithoutChatInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedOneWithoutPinnedInChatsInput = {
    create?: XOR<MessageCreateWithoutPinnedInChatsInput, MessageUncheckedCreateWithoutPinnedInChatsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutPinnedInChatsInput
    connect?: MessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatInput = {
    create?: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatInput
    connect?: UserWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatInput | MessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatInput | MessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatInput | MessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateOneWithoutPinnedInChatsNestedInput = {
    create?: XOR<MessageCreateWithoutPinnedInChatsInput, MessageUncheckedCreateWithoutPinnedInChatsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutPinnedInChatsInput
    upsert?: MessageUpsertWithoutPinnedInChatsInput
    disconnect?: MessageWhereInput | boolean
    delete?: MessageWhereInput | boolean
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutPinnedInChatsInput, MessageUpdateWithoutPinnedInChatsInput>, MessageUncheckedUpdateWithoutPinnedInChatsInput>
  }

  export type UserUpdateOneWithoutChatNestedInput = {
    create?: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatInput
    upsert?: UserUpsertWithoutChatInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatInput, UserUpdateWithoutChatInput>, UserUncheckedUpdateWithoutChatInput>
  }

  export type MessageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput> | MessageCreateWithoutChatInput[] | MessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatInput | MessageCreateOrConnectWithoutChatInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatInput | MessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: MessageCreateManyChatInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatInput | MessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatInput | MessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    connect?: ChatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessageInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutRepliesInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    connect?: MessageWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutReplyInput = {
    create?: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput> | MessageCreateWithoutReplyInput[] | MessageUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyInput | MessageCreateOrConnectWithoutReplyInput[]
    createMany?: MessageCreateManyReplyInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutPinnedMessageInput = {
    create?: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput> | ChatCreateWithoutPinnedMessageInput[] | ChatUncheckedCreateWithoutPinnedMessageInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutPinnedMessageInput | ChatCreateOrConnectWithoutPinnedMessageInput[]
    createMany?: ChatCreateManyPinnedMessageInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReplyInput = {
    create?: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput> | MessageCreateWithoutReplyInput[] | MessageUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyInput | MessageCreateOrConnectWithoutReplyInput[]
    createMany?: MessageCreateManyReplyInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutPinnedMessageInput = {
    create?: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput> | ChatCreateWithoutPinnedMessageInput[] | ChatUncheckedCreateWithoutPinnedMessageInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutPinnedMessageInput | ChatCreateOrConnectWithoutPinnedMessageInput[]
    createMany?: ChatCreateManyPinnedMessageInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    upsert?: ChatUpsertWithoutMessagesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutMessagesInput, ChatUpdateWithoutMessagesInput>, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    upsert?: UserUpsertWithoutMessageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageInput, UserUpdateWithoutMessageInput>, UserUncheckedUpdateWithoutMessageInput>
  }

  export type MessageUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: MessageCreateOrConnectWithoutRepliesInput
    upsert?: MessageUpsertWithoutRepliesInput
    disconnect?: MessageWhereInput | boolean
    delete?: MessageWhereInput | boolean
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutRepliesInput, MessageUpdateWithoutRepliesInput>, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateManyWithoutReplyNestedInput = {
    create?: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput> | MessageCreateWithoutReplyInput[] | MessageUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyInput | MessageCreateOrConnectWithoutReplyInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyInput | MessageUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: MessageCreateManyReplyInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyInput | MessageUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyInput | MessageUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutPinnedMessageNestedInput = {
    create?: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput> | ChatCreateWithoutPinnedMessageInput[] | ChatUncheckedCreateWithoutPinnedMessageInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutPinnedMessageInput | ChatCreateOrConnectWithoutPinnedMessageInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutPinnedMessageInput | ChatUpsertWithWhereUniqueWithoutPinnedMessageInput[]
    createMany?: ChatCreateManyPinnedMessageInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutPinnedMessageInput | ChatUpdateWithWhereUniqueWithoutPinnedMessageInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutPinnedMessageInput | ChatUpdateManyWithWhereWithoutPinnedMessageInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReplyNestedInput = {
    create?: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput> | MessageCreateWithoutReplyInput[] | MessageUncheckedCreateWithoutReplyInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReplyInput | MessageCreateOrConnectWithoutReplyInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReplyInput | MessageUpsertWithWhereUniqueWithoutReplyInput[]
    createMany?: MessageCreateManyReplyInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReplyInput | MessageUpdateWithWhereUniqueWithoutReplyInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReplyInput | MessageUpdateManyWithWhereWithoutReplyInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput = {
    create?: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput> | ChatCreateWithoutPinnedMessageInput[] | ChatUncheckedCreateWithoutPinnedMessageInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutPinnedMessageInput | ChatCreateOrConnectWithoutPinnedMessageInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutPinnedMessageInput | ChatUpsertWithWhereUniqueWithoutPinnedMessageInput[]
    createMany?: ChatCreateManyPinnedMessageInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutPinnedMessageInput | ChatUpdateWithWhereUniqueWithoutPinnedMessageInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutPinnedMessageInput | ChatUpdateManyWithWhereWithoutPinnedMessageInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReceivedNotificationInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationInput, UserUncheckedCreateWithoutReceivedNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentNotificationsInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReceivedNotificationNestedInput = {
    create?: XOR<UserCreateWithoutReceivedNotificationInput, UserUncheckedCreateWithoutReceivedNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedNotificationInput
    upsert?: UserUpsertWithoutReceivedNotificationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedNotificationInput, UserUpdateWithoutReceivedNotificationInput>, UserUncheckedUpdateWithoutReceivedNotificationInput>
  }

  export type UserUpdateOneRequiredWithoutSentNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentNotificationsInput
    upsert?: UserUpsertWithoutSentNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentNotificationsInput, UserUpdateWithoutSentNotificationsInput>, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumbanActionFilter<$PrismaModel = never> = {
    equals?: $Enums.banAction | EnumbanActionFieldRefInput<$PrismaModel>
    in?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    not?: NestedEnumbanActionFilter<$PrismaModel> | $Enums.banAction
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumbanActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.banAction | EnumbanActionFieldRefInput<$PrismaModel>
    in?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.banAction[] | ListEnumbanActionFieldRefInput<$PrismaModel>
    not?: NestedEnumbanActionWithAggregatesFilter<$PrismaModel> | $Enums.banAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumbanActionFilter<$PrismaModel>
    _max?: NestedEnumbanActionFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type DescriptionPartCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description: string
    url: string
  }

  export type DescriptionPartUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description: string
    url: string
  }

  export type DescriptionPartCreateOrConnectWithoutUserInput = {
    where: DescriptionPartWhereUniqueInput
    create: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput>
  }

  export type DescriptionPartCreateManyUserInputEnvelope = {
    data: DescriptionPartCreateManyUserInput | DescriptionPartCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowerCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamer: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowerUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerId: string
  }

  export type FollowerCreateOrConnectWithoutUserInput = {
    where: FollowerWhereUniqueInput
    create: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput>
  }

  export type FollowerCreateManyUserInputEnvelope = {
    data: FollowerCreateManyUserInput | FollowerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowerCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowerUncheckedCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FollowerCreateOrConnectWithoutStreamerInput = {
    where: FollowerWhereUniqueInput
    create: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput>
  }

  export type FollowerCreateManyStreamerInputEnvelope = {
    data: FollowerCreateManyStreamerInput | FollowerCreateManyStreamerInput[]
    skipDuplicates?: boolean
  }

  export type BanCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
    moderator: ModeratorCreateNestedOneWithoutIssuedBansInput
    streamer: UserCreateNestedOneWithoutIssuedBansInput
  }

  export type BanUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    moderatorId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanCreateOrConnectWithoutUserInput = {
    where: BanWhereUniqueInput
    create: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput>
  }

  export type BanCreateManyUserInputEnvelope = {
    data: BanCreateManyUserInput | BanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BanCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutBansInput
    moderator: ModeratorCreateNestedOneWithoutIssuedBansInput
  }

  export type BanUncheckedCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    moderatorId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanCreateOrConnectWithoutStreamerInput = {
    where: BanWhereUniqueInput
    create: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput>
  }

  export type BanCreateManyStreamerInputEnvelope = {
    data: BanCreateManyStreamerInput | BanCreateManyStreamerInput[]
    skipDuplicates?: boolean
  }

  export type ModeratorCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAppointedModeratorsInput
    issuedBans?: BanCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorUncheckedCreateWithoutStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    issuedBans?: BanUncheckedCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorCreateOrConnectWithoutStreamerInput = {
    where: ModeratorWhereUniqueInput
    create: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput>
  }

  export type ModeratorCreateManyStreamerInputEnvelope = {
    data: ModeratorCreateManyStreamerInput | ModeratorCreateManyStreamerInput[]
    skipDuplicates?: boolean
  }

  export type ModeratorCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamer: UserCreateNestedOneWithoutUserModeratorsInput
    issuedBans?: BanCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerId: string
    issuedBans?: BanUncheckedCreateNestedManyWithoutModeratorInput
  }

  export type ModeratorCreateOrConnectWithoutUserInput = {
    where: ModeratorWhereUniqueInput
    create: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput>
  }

  export type ModeratorCreateManyUserInputEnvelope = {
    data: ModeratorCreateManyUserInput | ModeratorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StreamerCurrencyCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    currencyBalances?: CurrencyBalanceCreateNestedManyWithoutStreamerCurrencyInput
  }

  export type StreamerCurrencyUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    currencyBalances?: CurrencyBalanceUncheckedCreateNestedManyWithoutStreamerCurrencyInput
  }

  export type StreamerCurrencyCreateOrConnectWithoutUserInput = {
    where: StreamerCurrencyWhereUniqueInput
    create: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput>
  }

  export type StreamerCurrencyCreateManyUserInputEnvelope = {
    data: StreamerCurrencyCreateManyUserInput | StreamerCurrencyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CurrencyBalanceCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    count?: number
    streamerCurrency?: StreamerCurrencyCreateNestedOneWithoutCurrencyBalancesInput
  }

  export type CurrencyBalanceUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerCurrencyId?: string | null
    count?: number
  }

  export type CurrencyBalanceCreateOrConnectWithoutUserInput = {
    where: CurrencyBalanceWhereUniqueInput
    create: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput>
  }

  export type CurrencyBalanceCreateManyUserInputEnvelope = {
    data: CurrencyBalanceCreateManyUserInput | CurrencyBalanceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRewardCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string
    description: string
    name: string
    price: number
    BuyerRewards?: BuyerRewardCreateNestedManyWithoutRewardInput
  }

  export type UserRewardUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string
    description: string
    name: string
    price: number
    BuyerRewards?: BuyerRewardUncheckedCreateNestedManyWithoutRewardInput
  }

  export type UserRewardCreateOrConnectWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardCreateManyUserInputEnvelope = {
    data: UserRewardCreateManyUserInput | UserRewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BuyerRewardCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reward: UserRewardCreateNestedOneWithoutBuyerRewardsInput
  }

  export type BuyerRewardUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rewardId: string
  }

  export type BuyerRewardCreateOrConnectWithoutUserInput = {
    where: BuyerRewardWhereUniqueInput
    create: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput>
  }

  export type BuyerRewardCreateManyUserInputEnvelope = {
    data: BuyerRewardCreateManyUserInput | BuyerRewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutSubscriberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscribed: UserCreateNestedOneWithoutSubscribersInput
  }

  export type SubscriptionUncheckedCreateWithoutSubscriberInput = {
    id?: string
    subscribedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutSubscriberInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput>
  }

  export type SubscriptionCreateManySubscriberInputEnvelope = {
    data: SubscriptionCreateManySubscriberInput | SubscriptionCreateManySubscriberInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutSubscribedInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriber: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutSubscribedInput = {
    id?: string
    subscriberId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutSubscribedInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput>
  }

  export type SubscriptionCreateManySubscribedInputEnvelope = {
    data: SubscriptionCreateManySubscribedInput | SubscriptionCreateManySubscribedInput[]
    skipDuplicates?: boolean
  }

  export type EmoteCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
  }

  export type EmoteUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
  }

  export type EmoteCreateOrConnectWithoutUserInput = {
    where: EmoteWhereUniqueInput
    create: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput>
  }

  export type EmoteCreateManyUserInputEnvelope = {
    data: EmoteCreateManyUserInput | EmoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StreamCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    categories?: CategoryCreateNestedManyWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedCreateNestedManyWithoutStreamInput
  }

  export type StreamCreateOrConnectWithoutUserInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutUserInput, StreamUncheckedCreateWithoutUserInput>
  }

  export type StreamStatsCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    categories?: CategoryCreateNestedManyWithoutStreamStatsInput
  }

  export type StreamStatsUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    categories?: CategoryUncheckedCreateNestedManyWithoutStreamStatsInput
  }

  export type StreamStatsCreateOrConnectWithoutUserInput = {
    where: StreamStatsWhereUniqueInput
    create: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput>
  }

  export type StreamStatsCreateManyUserInputEnvelope = {
    data: StreamStatsCreateManyUserInput | StreamStatsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChatInput
    pinnedMessage?: MessageCreateNestedOneWithoutPinnedInChatsInput
  }

  export type ChatUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessageId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutUserInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatCreateManyUserInputEnvelope = {
    data: ChatCreateManyUserInput | ChatCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
    reply?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    replyMessageId?: string | null
    content: string
    replies?: MessageUncheckedCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatUncheckedCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutForUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    fromUser: UserCreateNestedOneWithoutSentNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutForUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    fromUserId: string
  }

  export type NotificationCreateOrConnectWithoutForUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput>
  }

  export type NotificationCreateManyForUserInputEnvelope = {
    data: NotificationCreateManyForUserInput | NotificationCreateManyForUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutFromUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUser: UserCreateNestedOneWithoutReceivedNotificationInput
  }

  export type NotificationUncheckedCreateWithoutFromUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUserId: string
  }

  export type NotificationCreateOrConnectWithoutFromUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput>
  }

  export type NotificationCreateManyFromUserInputEnvelope = {
    data: NotificationCreateManyFromUserInput | NotificationCreateManyFromUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSubscriptionCreateWithoutUserInput = {
    id?: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionCreateOrConnectWithoutUserInput = {
    where: UserSubscriptionWhereUniqueInput
    create: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type UserSubscriptionCreateManyUserInputEnvelope = {
    data: UserSubscriptionCreateManyUserInput | UserSubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DescriptionPartUpsertWithWhereUniqueWithoutUserInput = {
    where: DescriptionPartWhereUniqueInput
    update: XOR<DescriptionPartUpdateWithoutUserInput, DescriptionPartUncheckedUpdateWithoutUserInput>
    create: XOR<DescriptionPartCreateWithoutUserInput, DescriptionPartUncheckedCreateWithoutUserInput>
  }

  export type DescriptionPartUpdateWithWhereUniqueWithoutUserInput = {
    where: DescriptionPartWhereUniqueInput
    data: XOR<DescriptionPartUpdateWithoutUserInput, DescriptionPartUncheckedUpdateWithoutUserInput>
  }

  export type DescriptionPartUpdateManyWithWhereWithoutUserInput = {
    where: DescriptionPartScalarWhereInput
    data: XOR<DescriptionPartUpdateManyMutationInput, DescriptionPartUncheckedUpdateManyWithoutUserInput>
  }

  export type DescriptionPartScalarWhereInput = {
    AND?: DescriptionPartScalarWhereInput | DescriptionPartScalarWhereInput[]
    OR?: DescriptionPartScalarWhereInput[]
    NOT?: DescriptionPartScalarWhereInput | DescriptionPartScalarWhereInput[]
    id?: StringFilter<"DescriptionPart"> | string
    createdAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    updatedAt?: DateTimeFilter<"DescriptionPart"> | Date | string
    userId?: StringFilter<"DescriptionPart"> | string
    image?: StringFilter<"DescriptionPart"> | string
    description?: StringFilter<"DescriptionPart"> | string
    url?: StringFilter<"DescriptionPart"> | string
  }

  export type FollowerUpsertWithWhereUniqueWithoutUserInput = {
    where: FollowerWhereUniqueInput
    update: XOR<FollowerUpdateWithoutUserInput, FollowerUncheckedUpdateWithoutUserInput>
    create: XOR<FollowerCreateWithoutUserInput, FollowerUncheckedCreateWithoutUserInput>
  }

  export type FollowerUpdateWithWhereUniqueWithoutUserInput = {
    where: FollowerWhereUniqueInput
    data: XOR<FollowerUpdateWithoutUserInput, FollowerUncheckedUpdateWithoutUserInput>
  }

  export type FollowerUpdateManyWithWhereWithoutUserInput = {
    where: FollowerScalarWhereInput
    data: XOR<FollowerUpdateManyMutationInput, FollowerUncheckedUpdateManyWithoutUserInput>
  }

  export type FollowerScalarWhereInput = {
    AND?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
    OR?: FollowerScalarWhereInput[]
    NOT?: FollowerScalarWhereInput | FollowerScalarWhereInput[]
    id?: StringFilter<"Follower"> | string
    createdAt?: DateTimeFilter<"Follower"> | Date | string
    updatedAt?: DateTimeFilter<"Follower"> | Date | string
    userId?: StringFilter<"Follower"> | string
    streamerId?: StringFilter<"Follower"> | string
  }

  export type FollowerUpsertWithWhereUniqueWithoutStreamerInput = {
    where: FollowerWhereUniqueInput
    update: XOR<FollowerUpdateWithoutStreamerInput, FollowerUncheckedUpdateWithoutStreamerInput>
    create: XOR<FollowerCreateWithoutStreamerInput, FollowerUncheckedCreateWithoutStreamerInput>
  }

  export type FollowerUpdateWithWhereUniqueWithoutStreamerInput = {
    where: FollowerWhereUniqueInput
    data: XOR<FollowerUpdateWithoutStreamerInput, FollowerUncheckedUpdateWithoutStreamerInput>
  }

  export type FollowerUpdateManyWithWhereWithoutStreamerInput = {
    where: FollowerScalarWhereInput
    data: XOR<FollowerUpdateManyMutationInput, FollowerUncheckedUpdateManyWithoutStreamerInput>
  }

  export type BanUpsertWithWhereUniqueWithoutUserInput = {
    where: BanWhereUniqueInput
    update: XOR<BanUpdateWithoutUserInput, BanUncheckedUpdateWithoutUserInput>
    create: XOR<BanCreateWithoutUserInput, BanUncheckedCreateWithoutUserInput>
  }

  export type BanUpdateWithWhereUniqueWithoutUserInput = {
    where: BanWhereUniqueInput
    data: XOR<BanUpdateWithoutUserInput, BanUncheckedUpdateWithoutUserInput>
  }

  export type BanUpdateManyWithWhereWithoutUserInput = {
    where: BanScalarWhereInput
    data: XOR<BanUpdateManyMutationInput, BanUncheckedUpdateManyWithoutUserInput>
  }

  export type BanScalarWhereInput = {
    AND?: BanScalarWhereInput | BanScalarWhereInput[]
    OR?: BanScalarWhereInput[]
    NOT?: BanScalarWhereInput | BanScalarWhereInput[]
    id?: StringFilter<"Ban"> | string
    createdAt?: DateTimeFilter<"Ban"> | Date | string
    updatedAt?: DateTimeFilter<"Ban"> | Date | string
    userId?: StringFilter<"Ban"> | string
    moderatorId?: StringFilter<"Ban"> | string
    streamerId?: StringFilter<"Ban"> | string
    reason?: StringFilter<"Ban"> | string
    action?: EnumbanActionFilter<"Ban"> | $Enums.banAction
    expiresAt?: DateTimeNullableFilter<"Ban"> | Date | string | null
  }

  export type BanUpsertWithWhereUniqueWithoutStreamerInput = {
    where: BanWhereUniqueInput
    update: XOR<BanUpdateWithoutStreamerInput, BanUncheckedUpdateWithoutStreamerInput>
    create: XOR<BanCreateWithoutStreamerInput, BanUncheckedCreateWithoutStreamerInput>
  }

  export type BanUpdateWithWhereUniqueWithoutStreamerInput = {
    where: BanWhereUniqueInput
    data: XOR<BanUpdateWithoutStreamerInput, BanUncheckedUpdateWithoutStreamerInput>
  }

  export type BanUpdateManyWithWhereWithoutStreamerInput = {
    where: BanScalarWhereInput
    data: XOR<BanUpdateManyMutationInput, BanUncheckedUpdateManyWithoutStreamerInput>
  }

  export type ModeratorUpsertWithWhereUniqueWithoutStreamerInput = {
    where: ModeratorWhereUniqueInput
    update: XOR<ModeratorUpdateWithoutStreamerInput, ModeratorUncheckedUpdateWithoutStreamerInput>
    create: XOR<ModeratorCreateWithoutStreamerInput, ModeratorUncheckedCreateWithoutStreamerInput>
  }

  export type ModeratorUpdateWithWhereUniqueWithoutStreamerInput = {
    where: ModeratorWhereUniqueInput
    data: XOR<ModeratorUpdateWithoutStreamerInput, ModeratorUncheckedUpdateWithoutStreamerInput>
  }

  export type ModeratorUpdateManyWithWhereWithoutStreamerInput = {
    where: ModeratorScalarWhereInput
    data: XOR<ModeratorUpdateManyMutationInput, ModeratorUncheckedUpdateManyWithoutStreamerInput>
  }

  export type ModeratorScalarWhereInput = {
    AND?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
    OR?: ModeratorScalarWhereInput[]
    NOT?: ModeratorScalarWhereInput | ModeratorScalarWhereInput[]
    id?: StringFilter<"Moderator"> | string
    createdAt?: DateTimeFilter<"Moderator"> | Date | string
    updatedAt?: DateTimeFilter<"Moderator"> | Date | string
    userId?: StringFilter<"Moderator"> | string
    streamerId?: StringFilter<"Moderator"> | string
  }

  export type ModeratorUpsertWithWhereUniqueWithoutUserInput = {
    where: ModeratorWhereUniqueInput
    update: XOR<ModeratorUpdateWithoutUserInput, ModeratorUncheckedUpdateWithoutUserInput>
    create: XOR<ModeratorCreateWithoutUserInput, ModeratorUncheckedCreateWithoutUserInput>
  }

  export type ModeratorUpdateWithWhereUniqueWithoutUserInput = {
    where: ModeratorWhereUniqueInput
    data: XOR<ModeratorUpdateWithoutUserInput, ModeratorUncheckedUpdateWithoutUserInput>
  }

  export type ModeratorUpdateManyWithWhereWithoutUserInput = {
    where: ModeratorScalarWhereInput
    data: XOR<ModeratorUpdateManyMutationInput, ModeratorUncheckedUpdateManyWithoutUserInput>
  }

  export type StreamerCurrencyUpsertWithWhereUniqueWithoutUserInput = {
    where: StreamerCurrencyWhereUniqueInput
    update: XOR<StreamerCurrencyUpdateWithoutUserInput, StreamerCurrencyUncheckedUpdateWithoutUserInput>
    create: XOR<StreamerCurrencyCreateWithoutUserInput, StreamerCurrencyUncheckedCreateWithoutUserInput>
  }

  export type StreamerCurrencyUpdateWithWhereUniqueWithoutUserInput = {
    where: StreamerCurrencyWhereUniqueInput
    data: XOR<StreamerCurrencyUpdateWithoutUserInput, StreamerCurrencyUncheckedUpdateWithoutUserInput>
  }

  export type StreamerCurrencyUpdateManyWithWhereWithoutUserInput = {
    where: StreamerCurrencyScalarWhereInput
    data: XOR<StreamerCurrencyUpdateManyMutationInput, StreamerCurrencyUncheckedUpdateManyWithoutUserInput>
  }

  export type StreamerCurrencyScalarWhereInput = {
    AND?: StreamerCurrencyScalarWhereInput | StreamerCurrencyScalarWhereInput[]
    OR?: StreamerCurrencyScalarWhereInput[]
    NOT?: StreamerCurrencyScalarWhereInput | StreamerCurrencyScalarWhereInput[]
    id?: StringFilter<"StreamerCurrency"> | string
    createdAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    updatedAt?: DateTimeFilter<"StreamerCurrency"> | Date | string
    name?: StringFilter<"StreamerCurrency"> | string
    image?: StringFilter<"StreamerCurrency"> | string
    userId?: StringFilter<"StreamerCurrency"> | string
  }

  export type CurrencyBalanceUpsertWithWhereUniqueWithoutUserInput = {
    where: CurrencyBalanceWhereUniqueInput
    update: XOR<CurrencyBalanceUpdateWithoutUserInput, CurrencyBalanceUncheckedUpdateWithoutUserInput>
    create: XOR<CurrencyBalanceCreateWithoutUserInput, CurrencyBalanceUncheckedCreateWithoutUserInput>
  }

  export type CurrencyBalanceUpdateWithWhereUniqueWithoutUserInput = {
    where: CurrencyBalanceWhereUniqueInput
    data: XOR<CurrencyBalanceUpdateWithoutUserInput, CurrencyBalanceUncheckedUpdateWithoutUserInput>
  }

  export type CurrencyBalanceUpdateManyWithWhereWithoutUserInput = {
    where: CurrencyBalanceScalarWhereInput
    data: XOR<CurrencyBalanceUpdateManyMutationInput, CurrencyBalanceUncheckedUpdateManyWithoutUserInput>
  }

  export type CurrencyBalanceScalarWhereInput = {
    AND?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
    OR?: CurrencyBalanceScalarWhereInput[]
    NOT?: CurrencyBalanceScalarWhereInput | CurrencyBalanceScalarWhereInput[]
    id?: StringFilter<"CurrencyBalance"> | string
    createdAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    updatedAt?: DateTimeFilter<"CurrencyBalance"> | Date | string
    streamerCurrencyId?: StringNullableFilter<"CurrencyBalance"> | string | null
    count?: IntFilter<"CurrencyBalance"> | number
    userId?: StringFilter<"CurrencyBalance"> | string
  }

  export type UserRewardUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    update: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    data: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
  }

  export type UserRewardUpdateManyWithWhereWithoutUserInput = {
    where: UserRewardScalarWhereInput
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRewardScalarWhereInput = {
    AND?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    OR?: UserRewardScalarWhereInput[]
    NOT?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    id?: StringFilter<"UserReward"> | string
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    userId?: StringFilter<"UserReward"> | string
    image?: StringFilter<"UserReward"> | string
    description?: StringFilter<"UserReward"> | string
    name?: StringFilter<"UserReward"> | string
    price?: IntFilter<"UserReward"> | number
  }

  export type BuyerRewardUpsertWithWhereUniqueWithoutUserInput = {
    where: BuyerRewardWhereUniqueInput
    update: XOR<BuyerRewardUpdateWithoutUserInput, BuyerRewardUncheckedUpdateWithoutUserInput>
    create: XOR<BuyerRewardCreateWithoutUserInput, BuyerRewardUncheckedCreateWithoutUserInput>
  }

  export type BuyerRewardUpdateWithWhereUniqueWithoutUserInput = {
    where: BuyerRewardWhereUniqueInput
    data: XOR<BuyerRewardUpdateWithoutUserInput, BuyerRewardUncheckedUpdateWithoutUserInput>
  }

  export type BuyerRewardUpdateManyWithWhereWithoutUserInput = {
    where: BuyerRewardScalarWhereInput
    data: XOR<BuyerRewardUpdateManyMutationInput, BuyerRewardUncheckedUpdateManyWithoutUserInput>
  }

  export type BuyerRewardScalarWhereInput = {
    AND?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
    OR?: BuyerRewardScalarWhereInput[]
    NOT?: BuyerRewardScalarWhereInput | BuyerRewardScalarWhereInput[]
    id?: StringFilter<"BuyerReward"> | string
    createdAt?: DateTimeFilter<"BuyerReward"> | Date | string
    updatedAt?: DateTimeFilter<"BuyerReward"> | Date | string
    userId?: StringFilter<"BuyerReward"> | string
    rewardId?: StringFilter<"BuyerReward"> | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutSubscriberInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutSubscriberInput, SubscriptionUncheckedUpdateWithoutSubscriberInput>
    create: XOR<SubscriptionCreateWithoutSubscriberInput, SubscriptionUncheckedCreateWithoutSubscriberInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutSubscriberInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutSubscriberInput, SubscriptionUncheckedUpdateWithoutSubscriberInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutSubscriberInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutSubscriberInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    subscriberId?: StringFilter<"Subscription"> | string
    subscribedId?: StringFilter<"Subscription"> | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutSubscribedInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutSubscribedInput, SubscriptionUncheckedUpdateWithoutSubscribedInput>
    create: XOR<SubscriptionCreateWithoutSubscribedInput, SubscriptionUncheckedCreateWithoutSubscribedInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutSubscribedInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutSubscribedInput, SubscriptionUncheckedUpdateWithoutSubscribedInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutSubscribedInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutSubscribedInput>
  }

  export type EmoteUpsertWithWhereUniqueWithoutUserInput = {
    where: EmoteWhereUniqueInput
    update: XOR<EmoteUpdateWithoutUserInput, EmoteUncheckedUpdateWithoutUserInput>
    create: XOR<EmoteCreateWithoutUserInput, EmoteUncheckedCreateWithoutUserInput>
  }

  export type EmoteUpdateWithWhereUniqueWithoutUserInput = {
    where: EmoteWhereUniqueInput
    data: XOR<EmoteUpdateWithoutUserInput, EmoteUncheckedUpdateWithoutUserInput>
  }

  export type EmoteUpdateManyWithWhereWithoutUserInput = {
    where: EmoteScalarWhereInput
    data: XOR<EmoteUpdateManyMutationInput, EmoteUncheckedUpdateManyWithoutUserInput>
  }

  export type EmoteScalarWhereInput = {
    AND?: EmoteScalarWhereInput | EmoteScalarWhereInput[]
    OR?: EmoteScalarWhereInput[]
    NOT?: EmoteScalarWhereInput | EmoteScalarWhereInput[]
    id?: StringFilter<"Emote"> | string
    createdAt?: DateTimeFilter<"Emote"> | Date | string
    updatedAt?: DateTimeFilter<"Emote"> | Date | string
    image?: StringFilter<"Emote"> | string
    tag?: StringFilter<"Emote"> | string
    name?: StringFilter<"Emote"> | string
    userId?: StringFilter<"Emote"> | string
  }

  export type StreamUpsertWithoutUserInput = {
    update: XOR<StreamUpdateWithoutUserInput, StreamUncheckedUpdateWithoutUserInput>
    create: XOR<StreamCreateWithoutUserInput, StreamUncheckedCreateWithoutUserInput>
    where?: StreamWhereInput
  }

  export type StreamUpdateToOneWithWhereWithoutUserInput = {
    where?: StreamWhereInput
    data: XOR<StreamUpdateWithoutUserInput, StreamUncheckedUpdateWithoutUserInput>
  }

  export type StreamUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUpdateManyWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    categories?: CategoryUncheckedUpdateManyWithoutStreamNestedInput
  }

  export type StreamStatsUpsertWithWhereUniqueWithoutUserInput = {
    where: StreamStatsWhereUniqueInput
    update: XOR<StreamStatsUpdateWithoutUserInput, StreamStatsUncheckedUpdateWithoutUserInput>
    create: XOR<StreamStatsCreateWithoutUserInput, StreamStatsUncheckedCreateWithoutUserInput>
  }

  export type StreamStatsUpdateWithWhereUniqueWithoutUserInput = {
    where: StreamStatsWhereUniqueInput
    data: XOR<StreamStatsUpdateWithoutUserInput, StreamStatsUncheckedUpdateWithoutUserInput>
  }

  export type StreamStatsUpdateManyWithWhereWithoutUserInput = {
    where: StreamStatsScalarWhereInput
    data: XOR<StreamStatsUpdateManyMutationInput, StreamStatsUncheckedUpdateManyWithoutUserInput>
  }

  export type StreamStatsScalarWhereInput = {
    AND?: StreamStatsScalarWhereInput | StreamStatsScalarWhereInput[]
    OR?: StreamStatsScalarWhereInput[]
    NOT?: StreamStatsScalarWhereInput | StreamStatsScalarWhereInput[]
    id?: StringFilter<"StreamStats"> | string
    createdAt?: DateTimeFilter<"StreamStats"> | Date | string
    updatedAt?: DateTimeFilter<"StreamStats"> | Date | string
    name?: StringFilter<"StreamStats"> | string
    whenEnded?: DateTimeFilter<"StreamStats"> | Date | string
    duration?: IntFilter<"StreamStats"> | number
    tag?: StringNullableListFilter<"StreamStats">
    theHighestOnline?: IntFilter<"StreamStats"> | number
    theAverageOnline?: IntFilter<"StreamStats"> | number
    userId?: StringFilter<"StreamStats"> | string
  }

  export type ChatUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
  }

  export type ChatUpdateManyWithWhereWithoutUserInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatScalarWhereInput = {
    AND?: ChatScalarWhereInput | ChatScalarWhereInput[]
    OR?: ChatScalarWhereInput[]
    NOT?: ChatScalarWhereInput | ChatScalarWhereInput[]
    id?: StringFilter<"Chat"> | string
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    pinnedMessageId?: StringNullableFilter<"Chat"> | string | null
    userId?: StringNullableFilter<"Chat"> | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    chatId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    replyMessageId?: StringNullableFilter<"Message"> | string | null
    content?: StringFilter<"Message"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutForUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutForUserInput, NotificationUncheckedUpdateWithoutForUserInput>
    create: XOR<NotificationCreateWithoutForUserInput, NotificationUncheckedCreateWithoutForUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutForUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutForUserInput, NotificationUncheckedUpdateWithoutForUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutForUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutForUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    content?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    forUserId?: StringFilter<"Notification"> | string
    fromUserId?: StringFilter<"Notification"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutFromUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutFromUserInput, NotificationUncheckedUpdateWithoutFromUserInput>
    create: XOR<NotificationCreateWithoutFromUserInput, NotificationUncheckedCreateWithoutFromUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutFromUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutFromUserInput, NotificationUncheckedUpdateWithoutFromUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutFromUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutFromUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: StringNullableFilter<"Account"> | string | null
  }

  export type UserSubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSubscriptionWhereUniqueInput
    update: XOR<UserSubscriptionUpdateWithoutUserInput, UserSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSubscriptionCreateWithoutUserInput, UserSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type UserSubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSubscriptionWhereUniqueInput
    data: XOR<UserSubscriptionUpdateWithoutUserInput, UserSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UserSubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: UserSubscriptionScalarWhereInput
    data: XOR<UserSubscriptionUpdateManyMutationInput, UserSubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSubscriptionScalarWhereInput = {
    AND?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
    OR?: UserSubscriptionScalarWhereInput[]
    NOT?: UserSubscriptionScalarWhereInput | UserSubscriptionScalarWhereInput[]
    id?: StringFilter<"UserSubscription"> | string
    userId?: StringFilter<"UserSubscription"> | string
    price?: IntFilter<"UserSubscription"> | number
    icon?: StringFilter<"UserSubscription"> | string
    createdAt?: DateTimeFilter<"UserSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"UserSubscription"> | Date | string
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSubscriptionsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UserCreateWithoutSubscribersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscribersInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscribersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSubscribersInput = {
    update: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscribersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
  }

  export type UserUpdateWithoutSubscribersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscribersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserSubscriptionInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserSubscriptionInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSubscriptionInput, UserUncheckedCreateWithoutUserSubscriptionInput>
  }

  export type UserUpsertWithoutUserSubscriptionInput = {
    update: XOR<UserUpdateWithoutUserSubscriptionInput, UserUncheckedUpdateWithoutUserSubscriptionInput>
    create: XOR<UserCreateWithoutUserSubscriptionInput, UserUncheckedCreateWithoutUserSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSubscriptionInput, UserUncheckedUpdateWithoutUserSubscriptionInput>
  }

  export type UserUpdateWithoutUserSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAppointedModeratorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointedModeratorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointedModeratorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointedModeratorsInput, UserUncheckedCreateWithoutAppointedModeratorsInput>
  }

  export type UserCreateWithoutUserModeratorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserModeratorsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserModeratorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserModeratorsInput, UserUncheckedCreateWithoutUserModeratorsInput>
  }

  export type BanCreateWithoutModeratorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutBansInput
    streamer: UserCreateNestedOneWithoutIssuedBansInput
  }

  export type BanUncheckedCreateWithoutModeratorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanCreateOrConnectWithoutModeratorInput = {
    where: BanWhereUniqueInput
    create: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput>
  }

  export type BanCreateManyModeratorInputEnvelope = {
    data: BanCreateManyModeratorInput | BanCreateManyModeratorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAppointedModeratorsInput = {
    update: XOR<UserUpdateWithoutAppointedModeratorsInput, UserUncheckedUpdateWithoutAppointedModeratorsInput>
    create: XOR<UserCreateWithoutAppointedModeratorsInput, UserUncheckedCreateWithoutAppointedModeratorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointedModeratorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointedModeratorsInput, UserUncheckedUpdateWithoutAppointedModeratorsInput>
  }

  export type UserUpdateWithoutAppointedModeratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointedModeratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUserModeratorsInput = {
    update: XOR<UserUpdateWithoutUserModeratorsInput, UserUncheckedUpdateWithoutUserModeratorsInput>
    create: XOR<UserCreateWithoutUserModeratorsInput, UserUncheckedCreateWithoutUserModeratorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserModeratorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserModeratorsInput, UserUncheckedUpdateWithoutUserModeratorsInput>
  }

  export type UserUpdateWithoutUserModeratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserModeratorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BanUpsertWithWhereUniqueWithoutModeratorInput = {
    where: BanWhereUniqueInput
    update: XOR<BanUpdateWithoutModeratorInput, BanUncheckedUpdateWithoutModeratorInput>
    create: XOR<BanCreateWithoutModeratorInput, BanUncheckedCreateWithoutModeratorInput>
  }

  export type BanUpdateWithWhereUniqueWithoutModeratorInput = {
    where: BanWhereUniqueInput
    data: XOR<BanUpdateWithoutModeratorInput, BanUncheckedUpdateWithoutModeratorInput>
  }

  export type BanUpdateManyWithWhereWithoutModeratorInput = {
    where: BanScalarWhereInput
    data: XOR<BanUpdateManyMutationInput, BanUncheckedUpdateManyWithoutModeratorInput>
  }

  export type UserCreateWithoutDescriptionPartsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDescriptionPartsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDescriptionPartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDescriptionPartsInput, UserUncheckedCreateWithoutDescriptionPartsInput>
  }

  export type UserUpsertWithoutDescriptionPartsInput = {
    update: XOR<UserUpdateWithoutDescriptionPartsInput, UserUncheckedUpdateWithoutDescriptionPartsInput>
    create: XOR<UserCreateWithoutDescriptionPartsInput, UserUncheckedCreateWithoutDescriptionPartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDescriptionPartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDescriptionPartsInput, UserUncheckedUpdateWithoutDescriptionPartsInput>
  }

  export type UserUpdateWithoutDescriptionPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDescriptionPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBansInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBansInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBansInput, UserUncheckedCreateWithoutBansInput>
  }

  export type ModeratorCreateWithoutIssuedBansInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAppointedModeratorsInput
    streamer: UserCreateNestedOneWithoutUserModeratorsInput
  }

  export type ModeratorUncheckedCreateWithoutIssuedBansInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
  }

  export type ModeratorCreateOrConnectWithoutIssuedBansInput = {
    where: ModeratorWhereUniqueInput
    create: XOR<ModeratorCreateWithoutIssuedBansInput, ModeratorUncheckedCreateWithoutIssuedBansInput>
  }

  export type UserCreateWithoutIssuedBansInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutIssuedBansInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutIssuedBansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIssuedBansInput, UserUncheckedCreateWithoutIssuedBansInput>
  }

  export type UserUpsertWithoutBansInput = {
    update: XOR<UserUpdateWithoutBansInput, UserUncheckedUpdateWithoutBansInput>
    create: XOR<UserCreateWithoutBansInput, UserUncheckedCreateWithoutBansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBansInput, UserUncheckedUpdateWithoutBansInput>
  }

  export type UserUpdateWithoutBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ModeratorUpsertWithoutIssuedBansInput = {
    update: XOR<ModeratorUpdateWithoutIssuedBansInput, ModeratorUncheckedUpdateWithoutIssuedBansInput>
    create: XOR<ModeratorCreateWithoutIssuedBansInput, ModeratorUncheckedCreateWithoutIssuedBansInput>
    where?: ModeratorWhereInput
  }

  export type ModeratorUpdateToOneWithWhereWithoutIssuedBansInput = {
    where?: ModeratorWhereInput
    data: XOR<ModeratorUpdateWithoutIssuedBansInput, ModeratorUncheckedUpdateWithoutIssuedBansInput>
  }

  export type ModeratorUpdateWithoutIssuedBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointedModeratorsNestedInput
    streamer?: UserUpdateOneRequiredWithoutUserModeratorsNestedInput
  }

  export type ModeratorUncheckedUpdateWithoutIssuedBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutIssuedBansInput = {
    update: XOR<UserUpdateWithoutIssuedBansInput, UserUncheckedUpdateWithoutIssuedBansInput>
    create: XOR<UserCreateWithoutIssuedBansInput, UserUncheckedCreateWithoutIssuedBansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutIssuedBansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutIssuedBansInput, UserUncheckedUpdateWithoutIssuedBansInput>
  }

  export type UserUpdateWithoutIssuedBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutIssuedBansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CurrencyBalanceCreateWithoutStreamerCurrencyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    count?: number
    user: UserCreateNestedOneWithoutCurrencyBalanceInput
  }

  export type CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    count?: number
    userId: string
  }

  export type CurrencyBalanceCreateOrConnectWithoutStreamerCurrencyInput = {
    where: CurrencyBalanceWhereUniqueInput
    create: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput>
  }

  export type CurrencyBalanceCreateManyStreamerCurrencyInputEnvelope = {
    data: CurrencyBalanceCreateManyStreamerCurrencyInput | CurrencyBalanceCreateManyStreamerCurrencyInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStreamerCurrencyInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStreamerCurrencyInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStreamerCurrencyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStreamerCurrencyInput, UserUncheckedCreateWithoutStreamerCurrencyInput>
  }

  export type CurrencyBalanceUpsertWithWhereUniqueWithoutStreamerCurrencyInput = {
    where: CurrencyBalanceWhereUniqueInput
    update: XOR<CurrencyBalanceUpdateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedUpdateWithoutStreamerCurrencyInput>
    create: XOR<CurrencyBalanceCreateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedCreateWithoutStreamerCurrencyInput>
  }

  export type CurrencyBalanceUpdateWithWhereUniqueWithoutStreamerCurrencyInput = {
    where: CurrencyBalanceWhereUniqueInput
    data: XOR<CurrencyBalanceUpdateWithoutStreamerCurrencyInput, CurrencyBalanceUncheckedUpdateWithoutStreamerCurrencyInput>
  }

  export type CurrencyBalanceUpdateManyWithWhereWithoutStreamerCurrencyInput = {
    where: CurrencyBalanceScalarWhereInput
    data: XOR<CurrencyBalanceUpdateManyMutationInput, CurrencyBalanceUncheckedUpdateManyWithoutStreamerCurrencyInput>
  }

  export type UserUpsertWithoutStreamerCurrencyInput = {
    update: XOR<UserUpdateWithoutStreamerCurrencyInput, UserUncheckedUpdateWithoutStreamerCurrencyInput>
    create: XOR<UserCreateWithoutStreamerCurrencyInput, UserUncheckedCreateWithoutStreamerCurrencyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStreamerCurrencyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStreamerCurrencyInput, UserUncheckedUpdateWithoutStreamerCurrencyInput>
  }

  export type UserUpdateWithoutStreamerCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStreamerCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StreamerCurrencyCreateWithoutCurrencyBalancesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    user: UserCreateNestedOneWithoutStreamerCurrencyInput
  }

  export type StreamerCurrencyUncheckedCreateWithoutCurrencyBalancesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
    userId: string
  }

  export type StreamerCurrencyCreateOrConnectWithoutCurrencyBalancesInput = {
    where: StreamerCurrencyWhereUniqueInput
    create: XOR<StreamerCurrencyCreateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedCreateWithoutCurrencyBalancesInput>
  }

  export type UserCreateWithoutCurrencyBalanceInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCurrencyBalanceInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCurrencyBalanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCurrencyBalanceInput, UserUncheckedCreateWithoutCurrencyBalanceInput>
  }

  export type StreamerCurrencyUpsertWithoutCurrencyBalancesInput = {
    update: XOR<StreamerCurrencyUpdateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedUpdateWithoutCurrencyBalancesInput>
    create: XOR<StreamerCurrencyCreateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedCreateWithoutCurrencyBalancesInput>
    where?: StreamerCurrencyWhereInput
  }

  export type StreamerCurrencyUpdateToOneWithWhereWithoutCurrencyBalancesInput = {
    where?: StreamerCurrencyWhereInput
    data: XOR<StreamerCurrencyUpdateWithoutCurrencyBalancesInput, StreamerCurrencyUncheckedUpdateWithoutCurrencyBalancesInput>
  }

  export type StreamerCurrencyUpdateWithoutCurrencyBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStreamerCurrencyNestedInput
  }

  export type StreamerCurrencyUncheckedUpdateWithoutCurrencyBalancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCurrencyBalanceInput = {
    update: XOR<UserUpdateWithoutCurrencyBalanceInput, UserUncheckedUpdateWithoutCurrencyBalanceInput>
    create: XOR<UserCreateWithoutCurrencyBalanceInput, UserUncheckedCreateWithoutCurrencyBalanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCurrencyBalanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCurrencyBalanceInput, UserUncheckedUpdateWithoutCurrencyBalanceInput>
  }

  export type UserUpdateWithoutCurrencyBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCurrencyBalanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserRewardsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRewardsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
  }

  export type BuyerRewardCreateWithoutRewardInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBoughtRewardsInput
  }

  export type BuyerRewardUncheckedCreateWithoutRewardInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type BuyerRewardCreateOrConnectWithoutRewardInput = {
    where: BuyerRewardWhereUniqueInput
    create: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput>
  }

  export type BuyerRewardCreateManyRewardInputEnvelope = {
    data: BuyerRewardCreateManyRewardInput | BuyerRewardCreateManyRewardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserRewardsInput = {
    update: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type UserUpdateWithoutUserRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BuyerRewardUpsertWithWhereUniqueWithoutRewardInput = {
    where: BuyerRewardWhereUniqueInput
    update: XOR<BuyerRewardUpdateWithoutRewardInput, BuyerRewardUncheckedUpdateWithoutRewardInput>
    create: XOR<BuyerRewardCreateWithoutRewardInput, BuyerRewardUncheckedCreateWithoutRewardInput>
  }

  export type BuyerRewardUpdateWithWhereUniqueWithoutRewardInput = {
    where: BuyerRewardWhereUniqueInput
    data: XOR<BuyerRewardUpdateWithoutRewardInput, BuyerRewardUncheckedUpdateWithoutRewardInput>
  }

  export type BuyerRewardUpdateManyWithWhereWithoutRewardInput = {
    where: BuyerRewardScalarWhereInput
    data: XOR<BuyerRewardUpdateManyMutationInput, BuyerRewardUncheckedUpdateManyWithoutRewardInput>
  }

  export type UserCreateWithoutBoughtRewardsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoughtRewardsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoughtRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoughtRewardsInput, UserUncheckedCreateWithoutBoughtRewardsInput>
  }

  export type UserRewardCreateWithoutBuyerRewardsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string
    description: string
    name: string
    price: number
    user: UserCreateNestedOneWithoutUserRewardsInput
  }

  export type UserRewardUncheckedCreateWithoutBuyerRewardsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    image?: string
    description: string
    name: string
    price: number
  }

  export type UserRewardCreateOrConnectWithoutBuyerRewardsInput = {
    where: UserRewardWhereUniqueInput
    create: XOR<UserRewardCreateWithoutBuyerRewardsInput, UserRewardUncheckedCreateWithoutBuyerRewardsInput>
  }

  export type UserUpsertWithoutBoughtRewardsInput = {
    update: XOR<UserUpdateWithoutBoughtRewardsInput, UserUncheckedUpdateWithoutBoughtRewardsInput>
    create: XOR<UserCreateWithoutBoughtRewardsInput, UserUncheckedCreateWithoutBoughtRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoughtRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoughtRewardsInput, UserUncheckedUpdateWithoutBoughtRewardsInput>
  }

  export type UserUpdateWithoutBoughtRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoughtRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRewardUpsertWithoutBuyerRewardsInput = {
    update: XOR<UserRewardUpdateWithoutBuyerRewardsInput, UserRewardUncheckedUpdateWithoutBuyerRewardsInput>
    create: XOR<UserRewardCreateWithoutBuyerRewardsInput, UserRewardUncheckedCreateWithoutBuyerRewardsInput>
    where?: UserRewardWhereInput
  }

  export type UserRewardUpdateToOneWithWhereWithoutBuyerRewardsInput = {
    where?: UserRewardWhereInput
    data: XOR<UserRewardUpdateWithoutBuyerRewardsInput, UserRewardUncheckedUpdateWithoutBuyerRewardsInput>
  }

  export type UserRewardUpdateWithoutBuyerRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserRewardsNestedInput
  }

  export type UserRewardUncheckedUpdateWithoutBuyerRewardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateWithoutStreamInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    description: string
    StreamStats?: StreamStatsCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutStreamInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamStatsId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryCreateOrConnectWithoutStreamInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
  }

  export type CategoryCreateManyStreamInputEnvelope = {
    data: CategoryCreateManyStreamInput | CategoryCreateManyStreamInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStreamInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStreamInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStreamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutStreamInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutStreamInput, CategoryUncheckedUpdateWithoutStreamInput>
    create: XOR<CategoryCreateWithoutStreamInput, CategoryUncheckedCreateWithoutStreamInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutStreamInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutStreamInput, CategoryUncheckedUpdateWithoutStreamInput>
  }

  export type CategoryUpdateManyWithWhereWithoutStreamInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutStreamInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    streamStatsId?: StringNullableFilter<"Category"> | string | null
    streamId?: StringNullableFilter<"Category"> | string | null
    name?: StringFilter<"Category"> | string
    image?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
  }

  export type UserUpsertWithoutStreamInput = {
    update: XOR<UserUpdateWithoutStreamInput, UserUncheckedUpdateWithoutStreamInput>
    create: XOR<UserCreateWithoutStreamInput, UserUncheckedCreateWithoutStreamInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStreamInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStreamInput, UserUncheckedUpdateWithoutStreamInput>
  }

  export type UserUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryCreateWithoutStreamStatsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    description: string
    Stream?: StreamCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutStreamStatsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryCreateOrConnectWithoutStreamStatsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput>
  }

  export type CategoryCreateManyStreamStatsInputEnvelope = {
    data: CategoryCreateManyStreamStatsInput | CategoryCreateManyStreamStatsInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStreamStatsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStreamStatsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStreamStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStreamStatsInput, UserUncheckedCreateWithoutStreamStatsInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutStreamStatsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutStreamStatsInput, CategoryUncheckedUpdateWithoutStreamStatsInput>
    create: XOR<CategoryCreateWithoutStreamStatsInput, CategoryUncheckedCreateWithoutStreamStatsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutStreamStatsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutStreamStatsInput, CategoryUncheckedUpdateWithoutStreamStatsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutStreamStatsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutStreamStatsInput>
  }

  export type UserUpsertWithoutStreamStatsInput = {
    update: XOR<UserUpdateWithoutStreamStatsInput, UserUncheckedUpdateWithoutStreamStatsInput>
    create: XOR<UserCreateWithoutStreamStatsInput, UserUncheckedCreateWithoutStreamStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStreamStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStreamStatsInput, UserUncheckedUpdateWithoutStreamStatsInput>
  }

  export type UserUpdateWithoutStreamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStreamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEmoteInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmoteInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmoteInput, UserUncheckedCreateWithoutEmoteInput>
  }

  export type UserUpsertWithoutEmoteInput = {
    update: XOR<UserUpdateWithoutEmoteInput, UserUncheckedUpdateWithoutEmoteInput>
    create: XOR<UserCreateWithoutEmoteInput, UserUncheckedCreateWithoutEmoteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmoteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmoteInput, UserUncheckedUpdateWithoutEmoteInput>
  }

  export type UserUpdateWithoutEmoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StreamStatsCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    user: UserCreateNestedOneWithoutStreamStatsInput
  }

  export type StreamStatsUncheckedCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    userId: string
  }

  export type StreamStatsCreateOrConnectWithoutCategoriesInput = {
    where: StreamStatsWhereUniqueInput
    create: XOR<StreamStatsCreateWithoutCategoriesInput, StreamStatsUncheckedCreateWithoutCategoriesInput>
  }

  export type StreamCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutStreamInput
  }

  export type StreamUncheckedCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    countOnline?: number
    tag?: StreamCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
    qualityUrls: JsonNullValueInput | InputJsonValue
    user?: UserUncheckedCreateNestedOneWithoutStreamInput
  }

  export type StreamCreateOrConnectWithoutCategoriesInput = {
    where: StreamWhereUniqueInput
    create: XOR<StreamCreateWithoutCategoriesInput, StreamUncheckedCreateWithoutCategoriesInput>
  }

  export type StreamStatsUpsertWithoutCategoriesInput = {
    update: XOR<StreamStatsUpdateWithoutCategoriesInput, StreamStatsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<StreamStatsCreateWithoutCategoriesInput, StreamStatsUncheckedCreateWithoutCategoriesInput>
    where?: StreamStatsWhereInput
  }

  export type StreamStatsUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: StreamStatsWhereInput
    data: XOR<StreamStatsUpdateWithoutCategoriesInput, StreamStatsUncheckedUpdateWithoutCategoriesInput>
  }

  export type StreamStatsUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutStreamStatsNestedInput
  }

  export type StreamStatsUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StreamUpsertWithoutCategoriesInput = {
    update: XOR<StreamUpdateWithoutCategoriesInput, StreamUncheckedUpdateWithoutCategoriesInput>
    create: XOR<StreamCreateWithoutCategoriesInput, StreamUncheckedCreateWithoutCategoriesInput>
    where?: StreamWhereInput
  }

  export type StreamUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: StreamWhereInput
    data: XOR<StreamUpdateWithoutCategoriesInput, StreamUncheckedUpdateWithoutCategoriesInput>
  }

  export type StreamUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutStreamNestedInput
  }

  export type StreamUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    countOnline?: IntFieldUpdateOperationsInput | number
    tag?: StreamUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    qualityUrls?: JsonNullValueInput | InputJsonValue
    user?: UserUncheckedUpdateOneWithoutStreamNestedInput
  }

  export type MessageCreateWithoutChatInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutMessageInput
    reply?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUncheckedCreateWithoutChatInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId: string
    replyMessageId?: string | null
    content: string
    replies?: MessageUncheckedCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatUncheckedCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageCreateOrConnectWithoutChatInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateManyChatInputEnvelope = {
    data: MessageCreateManyChatInput | MessageCreateManyChatInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutPinnedInChatsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessageInput
    reply?: MessageCreateNestedOneWithoutRepliesInput
    replies?: MessageCreateNestedManyWithoutReplyInput
  }

  export type MessageUncheckedCreateWithoutPinnedInChatsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    replyMessageId?: string | null
    content: string
    replies?: MessageUncheckedCreateNestedManyWithoutReplyInput
  }

  export type MessageCreateOrConnectWithoutPinnedInChatsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutPinnedInChatsInput, MessageUncheckedCreateWithoutPinnedInChatsInput>
  }

  export type UserCreateWithoutChatInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatInput>
  }

  export type MessageUpsertWithoutPinnedInChatsInput = {
    update: XOR<MessageUpdateWithoutPinnedInChatsInput, MessageUncheckedUpdateWithoutPinnedInChatsInput>
    create: XOR<MessageCreateWithoutPinnedInChatsInput, MessageUncheckedCreateWithoutPinnedInChatsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutPinnedInChatsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutPinnedInChatsInput, MessageUncheckedUpdateWithoutPinnedInChatsInput>
  }

  export type MessageUpdateWithoutPinnedInChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessageNestedInput
    reply?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyNestedInput
  }

  export type MessageUncheckedUpdateWithoutPinnedInChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    replies?: MessageUncheckedUpdateManyWithoutReplyNestedInput
  }

  export type UserUpsertWithoutChatInput = {
    update: XOR<UserUpdateWithoutChatInput, UserUncheckedUpdateWithoutChatInput>
    create: XOR<UserCreateWithoutChatInput, UserUncheckedCreateWithoutChatInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatInput, UserUncheckedUpdateWithoutChatInput>
  }

  export type UserUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessage?: MessageCreateNestedOneWithoutPinnedInChatsInput
    User?: UserCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessageId?: string | null
    userId?: string | null
  }

  export type ChatCreateOrConnectWithoutMessagesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessageInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessageInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
  }

  export type MessageCreateWithoutRepliesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessageInput
    reply?: MessageCreateNestedOneWithoutRepliesInput
    pinnedInChats?: ChatCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUncheckedCreateWithoutRepliesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    replyMessageId?: string | null
    content: string
    pinnedInChats?: ChatUncheckedCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageCreateOrConnectWithoutRepliesInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
  }

  export type MessageCreateWithoutReplyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessageInput
    replies?: MessageCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageUncheckedCreateWithoutReplyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    content: string
    replies?: MessageUncheckedCreateNestedManyWithoutReplyInput
    pinnedInChats?: ChatUncheckedCreateNestedManyWithoutPinnedMessageInput
  }

  export type MessageCreateOrConnectWithoutReplyInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput>
  }

  export type MessageCreateManyReplyInputEnvelope = {
    data: MessageCreateManyReplyInput | MessageCreateManyReplyInput[]
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutPinnedMessageInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChatInput
    User?: UserCreateNestedOneWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutPinnedMessageInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutPinnedMessageInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput>
  }

  export type ChatCreateManyPinnedMessageInputEnvelope = {
    data: ChatCreateManyPinnedMessageInput | ChatCreateManyPinnedMessageInput[]
    skipDuplicates?: boolean
  }

  export type ChatUpsertWithoutMessagesInput = {
    update: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessage?: MessageUpdateOneWithoutPinnedInChatsNestedInput
    User?: UserUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutMessageInput = {
    update: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
  }

  export type UserUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MessageUpsertWithoutRepliesInput = {
    update: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
    create: XOR<MessageCreateWithoutRepliesInput, MessageUncheckedCreateWithoutRepliesInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutRepliesInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutRepliesInput, MessageUncheckedUpdateWithoutRepliesInput>
  }

  export type MessageUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessageNestedInput
    reply?: MessageUpdateOneWithoutRepliesNestedInput
    pinnedInChats?: ChatUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    pinnedInChats?: ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutReplyInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReplyInput, MessageUncheckedUpdateWithoutReplyInput>
    create: XOR<MessageCreateWithoutReplyInput, MessageUncheckedCreateWithoutReplyInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReplyInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReplyInput, MessageUncheckedUpdateWithoutReplyInput>
  }

  export type MessageUpdateManyWithWhereWithoutReplyInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReplyInput>
  }

  export type ChatUpsertWithWhereUniqueWithoutPinnedMessageInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutPinnedMessageInput, ChatUncheckedUpdateWithoutPinnedMessageInput>
    create: XOR<ChatCreateWithoutPinnedMessageInput, ChatUncheckedCreateWithoutPinnedMessageInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutPinnedMessageInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutPinnedMessageInput, ChatUncheckedUpdateWithoutPinnedMessageInput>
  }

  export type ChatUpdateManyWithWhereWithoutPinnedMessageInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutPinnedMessageInput>
  }

  export type UserCreateWithoutReceivedNotificationInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedNotificationInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedNotificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedNotificationInput, UserUncheckedCreateWithoutReceivedNotificationInput>
  }

  export type UserCreateWithoutSentNotificationsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    account?: AccountCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentNotificationsInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    account?: AccountUncheckedCreateNestedManyWithoutUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
  }

  export type UserUpsertWithoutReceivedNotificationInput = {
    update: XOR<UserUpdateWithoutReceivedNotificationInput, UserUncheckedUpdateWithoutReceivedNotificationInput>
    create: XOR<UserCreateWithoutReceivedNotificationInput, UserUncheckedCreateWithoutReceivedNotificationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedNotificationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedNotificationInput, UserUncheckedUpdateWithoutReceivedNotificationInput>
  }

  export type UserUpdateWithoutReceivedNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSentNotificationsInput = {
    update: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
    create: XOR<UserCreateWithoutSentNotificationsInput, UserUncheckedCreateWithoutSentNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentNotificationsInput, UserUncheckedUpdateWithoutSentNotificationsInput>
  }

  export type UserUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    account?: AccountUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartCreateNestedManyWithoutUserInput
    following?: FollowerCreateNestedManyWithoutUserInput
    followers?: FollowerCreateNestedManyWithoutStreamerInput
    bans?: BanCreateNestedManyWithoutUserInput
    issuedBans?: BanCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteCreateNestedManyWithoutUserInput
    Stream?: StreamCreateNestedOneWithoutUserInput
    StreamStats?: StreamStatsCreateNestedManyWithoutUserInput
    chat?: ChatCreateNestedManyWithoutUserInput
    Message?: MessageCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationCreateNestedManyWithoutFromUserInput
    UserSubscription?: UserSubscriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id?: string
    email: string
    password: string
    name: string
    avatar?: string
    description?: string
    banner?: string
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    color?: string
    countFollowers?: number
    streamId?: string | null
    method: $Enums.AuthMethod
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    descriptionParts?: DescriptionPartUncheckedCreateNestedManyWithoutUserInput
    following?: FollowerUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowerUncheckedCreateNestedManyWithoutStreamerInput
    bans?: BanUncheckedCreateNestedManyWithoutUserInput
    issuedBans?: BanUncheckedCreateNestedManyWithoutStreamerInput
    userModerators?: ModeratorUncheckedCreateNestedManyWithoutStreamerInput
    appointedModerators?: ModeratorUncheckedCreateNestedManyWithoutUserInput
    streamerCurrency?: StreamerCurrencyUncheckedCreateNestedManyWithoutUserInput
    currencyBalance?: CurrencyBalanceUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    boughtRewards?: BuyerRewardUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutSubscriberInput
    subscribers?: SubscriptionUncheckedCreateNestedManyWithoutSubscribedInput
    Emote?: EmoteUncheckedCreateNestedManyWithoutUserInput
    StreamStats?: StreamStatsUncheckedCreateNestedManyWithoutUserInput
    chat?: ChatUncheckedCreateNestedManyWithoutUserInput
    Message?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedNotification?: NotificationUncheckedCreateNestedManyWithoutForUserInput
    sentNotifications?: NotificationUncheckedCreateNestedManyWithoutFromUserInput
    UserSubscription?: UserSubscriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUpdateManyWithoutUserNestedInput
    following?: FollowerUpdateManyWithoutUserNestedInput
    followers?: FollowerUpdateManyWithoutStreamerNestedInput
    bans?: BanUpdateManyWithoutUserNestedInput
    issuedBans?: BanUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUpdateManyWithoutUserNestedInput
    Stream?: StreamUpdateOneWithoutUserNestedInput
    StreamStats?: StreamStatsUpdateManyWithoutUserNestedInput
    chat?: ChatUpdateManyWithoutUserNestedInput
    Message?: MessageUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUpdateManyWithoutFromUserNestedInput
    UserSubscription?: UserSubscriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    banner?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    countFollowers?: IntFieldUpdateOperationsInput | number
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptionParts?: DescriptionPartUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowerUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowerUncheckedUpdateManyWithoutStreamerNestedInput
    bans?: BanUncheckedUpdateManyWithoutUserNestedInput
    issuedBans?: BanUncheckedUpdateManyWithoutStreamerNestedInput
    userModerators?: ModeratorUncheckedUpdateManyWithoutStreamerNestedInput
    appointedModerators?: ModeratorUncheckedUpdateManyWithoutUserNestedInput
    streamerCurrency?: StreamerCurrencyUncheckedUpdateManyWithoutUserNestedInput
    currencyBalance?: CurrencyBalanceUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    boughtRewards?: BuyerRewardUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutSubscriberNestedInput
    subscribers?: SubscriptionUncheckedUpdateManyWithoutSubscribedNestedInput
    Emote?: EmoteUncheckedUpdateManyWithoutUserNestedInput
    StreamStats?: StreamStatsUncheckedUpdateManyWithoutUserNestedInput
    chat?: ChatUncheckedUpdateManyWithoutUserNestedInput
    Message?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedNotification?: NotificationUncheckedUpdateManyWithoutForUserNestedInput
    sentNotifications?: NotificationUncheckedUpdateManyWithoutFromUserNestedInput
    UserSubscription?: UserSubscriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DescriptionPartCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description: string
    url: string
  }

  export type FollowerCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerId: string
  }

  export type FollowerCreateManyStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type BanCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    moderatorId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanCreateManyStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    moderatorId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type ModeratorCreateManyStreamerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ModeratorCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerId: string
  }

  export type StreamerCurrencyCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image?: string
  }

  export type CurrencyBalanceCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamerCurrencyId?: string | null
    count?: number
  }

  export type UserRewardCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image?: string
    description: string
    name: string
    price: number
  }

  export type BuyerRewardCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rewardId: string
  }

  export type SubscriptionCreateManySubscriberInput = {
    id?: string
    subscribedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateManySubscribedInput = {
    id?: string
    subscriberId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmoteCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    tag: string
    name: string
  }

  export type StreamStatsCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    whenEnded: Date | string
    duration: number
    tag?: StreamStatsCreatetagInput | string[]
    theHighestOnline: number
    theAverageOnline: number
  }

  export type ChatCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    pinnedMessageId?: string | null
  }

  export type MessageCreateManySenderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    replyMessageId?: string | null
    content: string
  }

  export type NotificationCreateManyForUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    fromUserId: string
  }

  export type NotificationCreateManyFromUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    link?: string | null
    forUserId: string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSubscriptionCreateManyUserInput = {
    id?: string
    price?: number
    icon?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DescriptionPartUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionPartUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionPartUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type FollowerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamer?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowerUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowerUncheckedUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FollowerUncheckedUpdateManyWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    moderator?: ModeratorUpdateOneRequiredWithoutIssuedBansNestedInput
    streamer?: UserUpdateOneRequiredWithoutIssuedBansNestedInput
  }

  export type BanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBansNestedInput
    moderator?: ModeratorUpdateOneRequiredWithoutIssuedBansNestedInput
  }

  export type BanUncheckedUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanUncheckedUpdateManyWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    moderatorId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ModeratorUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointedModeratorsNestedInput
    issuedBans?: BanUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorUncheckedUpdateWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    issuedBans?: BanUncheckedUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorUncheckedUpdateManyWithoutStreamerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ModeratorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamer?: UserUpdateOneRequiredWithoutUserModeratorsNestedInput
    issuedBans?: BanUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerId?: StringFieldUpdateOperationsInput | string
    issuedBans?: BanUncheckedUpdateManyWithoutModeratorNestedInput
  }

  export type ModeratorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerId?: StringFieldUpdateOperationsInput | string
  }

  export type StreamerCurrencyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    currencyBalances?: CurrencyBalanceUpdateManyWithoutStreamerCurrencyNestedInput
  }

  export type StreamerCurrencyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    currencyBalances?: CurrencyBalanceUncheckedUpdateManyWithoutStreamerCurrencyNestedInput
  }

  export type StreamerCurrencyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyBalanceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    streamerCurrency?: StreamerCurrencyUpdateOneWithoutCurrencyBalancesNestedInput
  }

  export type CurrencyBalanceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
  }

  export type CurrencyBalanceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamerCurrencyId?: NullableStringFieldUpdateOperationsInput | string | null
    count?: IntFieldUpdateOperationsInput | number
  }

  export type UserRewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    BuyerRewards?: BuyerRewardUpdateManyWithoutRewardNestedInput
  }

  export type UserRewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    BuyerRewards?: BuyerRewardUncheckedUpdateManyWithoutRewardNestedInput
  }

  export type UserRewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type BuyerRewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reward?: UserRewardUpdateOneRequiredWithoutBuyerRewardsNestedInput
  }

  export type BuyerRewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardId?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerRewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rewardId?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscribed?: UserUpdateOneRequiredWithoutSubscribersNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscribedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscriberInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscribedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutSubscribedInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriber?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutSubscribedInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyWithoutSubscribedInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type EmoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StreamStatsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUpdateManyWithoutStreamStatsNestedInput
  }

  export type StreamStatsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUncheckedUpdateManyWithoutStreamStatsNestedInput
  }

  export type StreamStatsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    whenEnded?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    tag?: StreamStatsUpdatetagInput | string[]
    theHighestOnline?: IntFieldUpdateOperationsInput | number
    theAverageOnline?: IntFieldUpdateOperationsInput | number
  }

  export type ChatUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChatNestedInput
    pinnedMessage?: MessageUpdateOneWithoutPinnedInChatsNestedInput
  }

  export type ChatUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pinnedMessageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    reply?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    replies?: MessageUncheckedUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutForUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    fromUser?: UserUpdateOneRequiredWithoutSentNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutForUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutForUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    fromUserId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUser?: UserUpdateOneRequiredWithoutReceivedNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUserId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    forUserId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BanCreateManyModeratorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    streamerId: string
    reason: string
    action: $Enums.banAction
    expiresAt?: Date | string | null
  }

  export type BanUpdateWithoutModeratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutBansNestedInput
    streamer?: UserUpdateOneRequiredWithoutIssuedBansNestedInput
  }

  export type BanUncheckedUpdateWithoutModeratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanUncheckedUpdateManyWithoutModeratorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    streamerId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    action?: EnumbanActionFieldUpdateOperationsInput | $Enums.banAction
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CurrencyBalanceCreateManyStreamerCurrencyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    count?: number
    userId: string
  }

  export type CurrencyBalanceUpdateWithoutStreamerCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCurrencyBalanceNestedInput
  }

  export type CurrencyBalanceUncheckedUpdateWithoutStreamerCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CurrencyBalanceUncheckedUpdateManyWithoutStreamerCurrencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerRewardCreateManyRewardInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type BuyerRewardUpdateWithoutRewardInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBoughtRewardsNestedInput
  }

  export type BuyerRewardUncheckedUpdateWithoutRewardInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerRewardUncheckedUpdateManyWithoutRewardInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateManyStreamInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamStatsId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    StreamStats?: StreamStatsUpdateOneWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamStatsId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyWithoutStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamStatsId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateManyStreamStatsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    streamId?: string | null
    name: string
    image: string
    description: string
  }

  export type CategoryUpdateWithoutStreamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Stream?: StreamUpdateOneWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutStreamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyWithoutStreamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    streamId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyChatInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    senderId: string
    replyMessageId?: string | null
    content: string
  }

  export type MessageUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutMessageNestedInput
    reply?: MessageUpdateOneWithoutRepliesNestedInput
    replies?: MessageUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    replies?: MessageUncheckedUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutChatInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: StringFieldUpdateOperationsInput | string
    replyMessageId?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyReplyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatId: string
    senderId: string
    content: string
  }

  export type ChatCreateManyPinnedMessageInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type MessageUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessageNestedInput
    replies?: MessageUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    replies?: MessageUncheckedUpdateManyWithoutReplyNestedInput
    pinnedInChats?: ChatUncheckedUpdateManyWithoutPinnedMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChatUpdateWithoutPinnedMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChatNestedInput
    User?: UserUpdateOneWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutPinnedMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutPinnedMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModeratorCountOutputTypeDefaultArgs instead
     */
    export type ModeratorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModeratorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamerCurrencyCountOutputTypeDefaultArgs instead
     */
    export type StreamerCurrencyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamerCurrencyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRewardCountOutputTypeDefaultArgs instead
     */
    export type UserRewardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRewardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamCountOutputTypeDefaultArgs instead
     */
    export type StreamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamStatsCountOutputTypeDefaultArgs instead
     */
    export type StreamStatsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamStatsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatCountOutputTypeDefaultArgs instead
     */
    export type ChatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageCountOutputTypeDefaultArgs instead
     */
    export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FollowerDefaultArgs instead
     */
    export type FollowerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FollowerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSubscriptionDefaultArgs instead
     */
    export type UserSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModeratorDefaultArgs instead
     */
    export type ModeratorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModeratorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DescriptionPartDefaultArgs instead
     */
    export type DescriptionPartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DescriptionPartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BanDefaultArgs instead
     */
    export type BanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamerCurrencyDefaultArgs instead
     */
    export type StreamerCurrencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamerCurrencyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CurrencyBalanceDefaultArgs instead
     */
    export type CurrencyBalanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CurrencyBalanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRewardDefaultArgs instead
     */
    export type UserRewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRewardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuyerRewardDefaultArgs instead
     */
    export type BuyerRewardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerRewardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamDefaultArgs instead
     */
    export type StreamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StreamStatsDefaultArgs instead
     */
    export type StreamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StreamStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmoteDefaultArgs instead
     */
    export type EmoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatDefaultArgs instead
     */
    export type ChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokenDefaultArgs instead
     */
    export type TokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokenDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}